/**
* Generated code
* Do not edit this file!!
*/
import { ajax } from 'rxjs/ajax'
import { FormGroup, FormControl,Validators } from '@angular/forms'
/**
* Make an api request
* @param method The request method get,post,put,patch and delete
* @param endpoint The api endpoint url
* @param body The request body, default null 
*/
class j2t{
private static host: string = 'dev.hyperhaul.com'
private static schemes: string = 'https'
private static basePath: string = '/api'
private static consumes: string = 'application/json'
private static produces: string = 'application/json'
private static security: string = 'Bearer'

static o(method: string,endpoint: string,body:any = null, extra: string = ''){
    let storage = localStorage.getItem('jwttoken')   
    let token =  storage ? JSON.parse(storage).access : undefined  
    let regex = /\{([}}]+)\}/ 
    let useregex = endpoint.includes('{')
    let extraendpoint = useregex ? endpoint.replace(regex, extra) : endpoint + extra
    return ajax({
        url: this.schemes + '://' + this.host + this.basePath +  extraendpoint,
        method: method,
        withCredentials: true,
        headers: token ? 
        {
            'Content-Type': this.produces,
            'Accept': this.consumes,
            'Authorization' : this.security + ' ' + token  
        } : 
        {
            'Content-Type': this.produces,
            'Accept': this.consumes,
        },
        body: body !== null ? JSON.stringify(body) : null
    })        
}}

export interface PasswordChange{
 newPassword1: string
 newPassword2: string
}

export interface PasswordReset{
 email: string
}

export interface PasswordResetConfirm{
 newPassword1: string
 newPassword2: string
 uid: string
 token: string
}

export interface Organization{
}

export interface UserProfile{
/**@enum:["M","F"]*/
 gender?: string
 contact: string
 dob?: string
 readonly photo?: string
 readonly photoThumbnail?: string
}

export interface RegistrationUser{
 username: string
 email: string
 password: string
 readonly displayName?: string
 firstName?: string
 lastName?: string
 profile?: UserProfile
}

export interface Registration{
 organization: Organization
 user: RegistrationUser
}

export interface VerifyEmail{
 key: string
}

export interface TokenObtainPair{
 username: string
 password: string
}

export interface TokenRefresh{
 refresh: string
}

export interface UserDetail{
 readonly username?: string
 readonly email?: string
 readonly displayName?: string
 firstName: string
 lastName: string
 profile: UserProfile
 readonly organizations?: string
}

export interface ExportConfig{
 readonly id?: number
 configName: string
}

export interface InvoiceCondition{
 readonly id?: number
 conditionName: string
}

export interface InvoiceFlag{
 readonly id?: number
 remarks: string
 invoice: number
}

export interface Invoice{
 readonly id?: number
 invoiceName: string
 status: string
}

export interface Coe{
 readonly id?: number
 expiryDate: string
 vehicle: string
}

export interface CompanyOwnedVpc{
 readonly id?: number
 code: string
 vpcStartDate: string
 vpcEndDate: string
 vpcIssuedDate: string
 isOwner: boolean
 organization?: number
 lot?: number
}

export interface Insurance{
 readonly id?: number
 insurer: string
 policyNo: string
 startDate: string
 endDate: string
 remarks?: string
 vehicle: string
}

export interface LorryDetails{
 readonly id?: number
 readonly displayName?: string
 vehicleType: string
 vehicle: string
}

export interface Lot{
 readonly id?: number
/**@enum:["HEAVY_VEHICLE_LOT","TRAILER_LOT_20_FOOT","TRAILER_LOT_40_FOOT"]*/
 lotType: string
 lotNo: string
 lotOwnerName: string
 lotOwnerUen: string
 parkingLot?: number
}

export interface OtherCompanyVpc{
 readonly id?: number
 code: string
 vpcStartDate: string
 vpcEndDate: string
 vpcIssuedDate: string
 isOwner: boolean
 owner: string
 costPrice: string
 organization?: number
}

export interface OtherSiteCategory{
 readonly id?: number
 category: string
}

export interface OtherSite{
 readonly id?: number
 category: OtherSiteCategory
 name: string
 isShiftLocation?: boolean
 addressMaster?: string
 belongsTo: number
}

export interface AddressMaster{
 googleMapId: string
 address: string
}

export interface ParkingLot{
 readonly id?: number
 addressMaster: AddressMaster
 lots?: Array<Lot>
 readonly count40Foot?: string
 readonly count20Foot?: string
 readonly countHeavyVehicle?: string
 parkingLotCode: string
 parkingLotName: string
 haulier?: number
}

export interface PortEntryPermit{
 readonly id?: number
 permitNo: string
 company: string
 expiryDate: string
 feePaid: number
 vehicle: string
}

export interface PrimeMoverDetails{
 readonly id?: number
 readonly displayName?: string
 vehicleType: string
 vehicle: string
}

export interface RoadTax{
 readonly id?: number
 organization: string
 amount: string
 renewDate: string
 expiryDate: string
 vehicle: string
 renewedBy?: number
}

export interface TrailerTyre{
 readonly id?: number
 noOfTyres: number
 tyreType?: number
 trailer: string
}

export interface TrailerTyreChangeLog{
 readonly id?: number
 position: string
 mileage: string
 remarks: string
 dateOfChange: string
 tyre: number
}

export interface Trailer{
 plateNo: string
 sizeType: string
 payload: number
 isBorrowed?: boolean
 registrationDate: string
 brand: string
 ulw: number
 mlw: number
 mfgDate: string
}

export interface TyreMaster{
 readonly id?: number
 name: string
 size: string
 brand: string
 model: string
 origin: string
 vendor: string
 unitPrice: string
 isTubeless?: boolean
 belongsTo?: number
}

export interface VehicleTyreChangeLog{
 readonly id?: number
 position: string
 mileage: string
 remarks: string
 dateOfChange: string
 tyre: number
}

export interface VehicleTyre{
 readonly id?: number
 noOfTyres: number
 tyreType?: number
 vehicle: string
}

export interface Vehicle{
 plateNo: string
 model: string
 payload: number
 iu: string
 engineNo: string
 chassisNo: string
 ulw: number
 mlw: number
 mfgDate: string
 brand: string
 isActive?: boolean
 isBorrowed?: boolean
 registrationDate: string
 organization?: number
 belongsTo?: number
 vehicleType: number
 registeredBy?: number
}

export interface Vpc{
 readonly id?: number
 code: string
 vpcStartDate: string
 vpcEndDate: string
 vpcIssuedDate: string
 isOwner: boolean
 organization?: number
}

export interface CompanyBillingAddress{
 readonly id?: number
 building?: string
 unit?: string
 company: number
 addressMaster?: string
}

export interface EndCustomerHaulier{
 readonly id?: number
 endCustomer: number
 haulier: number
}

export interface CompanyEndCustomer{
 readonly id?: number
 activeDate: string
 company: number
}

export interface EntityType{
 readonly id?: number
 issuanceAgency?: string
 entityType?: string
 entityTypeIndicator: string
}

export interface FreightForwarderHaulier{
 readonly id?: number
 freightForwarder: number
 haulier: number
}

export interface FreightForwarder{
 readonly id?: number
 activeDate: string
 company: number
}

export interface CompanyGlobalRule{
 readonly id?: number
 instruction: string
 customer: number
}

export interface PortnetAccount{
 readonly id?: number
 username: string
 password: string
 readonly createdDate?: string
 expiryDate: string
 company: number
 createdBy?: number
}

export interface CompanyShiftWorkHour{
 readonly id?: number
 company: number
 timeStartWeekday: number
 timeStartHour: string
 timeEndWeekday: number
 timeEndHour: string
}

export interface CompanySiteContact{
 readonly id?: number
 firstName: string
 lastName: string
 workHp?: string
 personalHp?: string
 email?: string
 readonly createdDate?: string
 isActive?: boolean
}

export interface CompanySiteHour{
 readonly id?: number
 weekdayOpen?: string
 weekdayClose?: string
 weekendOpen?: string
 weekendClose?: string
 lunchStart?: string
 lunchEnd?: string
}

export interface CompanySiteLoadingBay{
 readonly id?: number
 name?: string
 description?: string
}

export interface CompanySiteParking{
 readonly id?: number
 parkingRemarks?: string
 hourlyRateWkDay?: string
 hourlyRateWkEnd?: string
 peakRateWkDay?: string
 peakRateWkEnd?: string
 site: number
}

export interface CompanySite{
 readonly id?: number
 readonly siteContacts?: Array<number>
 siteHours?: CompanySiteHour
 readonly parkingInfo?: Array<number>
 siteLoadingBays?: Array<CompanySiteLoadingBay>
 addressMaster: AddressMaster
/**@enum:["wh","ob","al","ji","cs","sc","sh","m","o"]*/
 siteType?: string
 building?: string
 unit?: string
 name?: string
 faxNo?: string
 isOutskirtArea?: boolean
 isWithinCbd?: boolean
 hasSecurity?: boolean
 noOfLoadingBay?: number
 remarks?: string
 readonly company?: number
}

export interface Uen{
 readonly id?: number
 uen: string
 regStreetName: string
 entityName: string
 regPostalCode: string
 issuanceAgencyId: string
 rank: string
 uenIssueDate: string
 fullCount: number
 uenStatus: string
 entityType: number
}

export interface ContainerAttachment{
 readonly id?: number
 readonly file?: string
 remarks: string
 readonly uploadedDate?: string
 cancelledDate: string
 uploadedBy?: number
 cancelledBy?: number
 container: number
}

export interface ContainerContainerImco{
 readonly id?: number
 imcoDgClassMaster: number
}

export interface ContainerContainerDetail{
 readonly id?: number
 containerImcoDetails: Array<ContainerContainerImco>
 dangerousGoods?: string
 temperature?: string
 grossWeight?: string
 containerCondition?: string
 remarks?: string
}

export interface ContainerContainerMaster{
 id?: number
 readonly createdDate?: string
 containerNumber: string
 tareWeight?: number
 maxGrossWeight?: number
 isValidated?: boolean
 createdBy?: number
 isoCodeMaster: number
 isOwnedBy?: number
}

export interface ContainerCargoMaster{
 id?: number
 cargoCode?: string
 goods: Array<number>
}

export interface Container{
 readonly id?: number
 containerDetail?: ContainerContainerDetail
 containerMaster?: ContainerContainerMaster
 cargoMaster?: ContainerCargoMaster
 jobOrder?: number
}

export interface ContainerLocationContainerLocationEstimatedDates{
 id?: number
 dateMin?: string
 dateMax?: string
 isFlexible?: boolean
}

export interface ContainerPortGoodsPermit{
 readonly id?: number
 value: string
 jobOrderPort: number
}

export interface ContainerPort{
 readonly id?: number
 goodsPermits: Array<ContainerPortGoodsPermit>
 readonly createdDate?: string
 readonly updatedDate?: string
 vesselStore?: string
 inOutVoyageStore?: string
 billOfLading?: string
 bookingRef?: string
 deliveryOrder?: string
 portOfDischarge?: string
 portOfLoading?: string
 createdBy?: number
 updatedBy?: number
 portMaster?: number
 vessel?: number
}

export interface ContainerSite{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 createdBy?: number
 updatedBy?: number
 site?: number
}

export interface ContainerOtherSite{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 createdBy?: number
 updatedBy?: number
 site?: number
 category?: number
}

export interface ContainerParkingLot{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 createdBy?: number
 updatedBy?: number
 parkingLot?: number
}

export interface ContainerDepot{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 offHireRef?: string
 pickUpRef?: string
 bookingRef?: string
 storingOrder?: string
 lastDay?: string
 lastDayInformedOn?: string
 createdBy?: number
 updatedBy?: number
 depotMaster?: number
}

export interface ContainerLocation{
 readonly id?: number
 locationEstimatedDate?: ContainerLocationContainerLocationEstimatedDates
 port?: ContainerPort
 site?: ContainerSite
 otherSite?: ContainerOtherSite
 parkingLot?: ContainerParkingLot
 depot?: ContainerDepot
 readonly isShiftLocation?: string
 readonly createdDate?: string
 readonly updatedDate?: string
/**@enum:["H","F","L","C","A"]*/
 organizationType?: string
 order?: number
/**@enum:["CLIENT","PORT","DEPOT","PARKING_LOT","OTHERS"]*/
 locationType: string
 objectId?: number
 remarks?: string
 createdBy?: number
 updatedBy?: number
 genericOrganization?: number
 containerTrip: number
 jobOrderLocation?: number
 locationAction?: number
}

export interface ContainerTripContainerMaster{
 readonly id?: number
 readonly createdDate?: string
 containerNumber: string
 tareWeight?: number
 maxGrossWeight?: number
 isValidated?: boolean
 createdBy?: number
 isoCodeMaster: number
 isOwnedBy?: number
}

export interface ContainerTripContainer{
 readonly id?: number
 containerMaster: ContainerTripContainerMaster
 cargoMaster?: number
}

export interface ContainerTripContainerVersion{
 readonly id?: number
 container: ContainerTripContainer
 readonly createdDate?: string
 readonly updatedDate?: string
 version: string
 isActive?: boolean
 createdBy?: number
 updatedBy?: number
 jobOrder: number
}

export interface ContainerTrip{
 readonly id?: number
 containerLocations: Array<ContainerLocation>
 containerVersion: ContainerTripContainerVersion
 order?: number
 jobOrderTrip?: number
}

export interface ContainerDetail{
 readonly id?: number
 dangerousGoods?: string
 temperature?: string
 grossWeight?: string
 containerCondition?: string
 remarks?: string
 container: number
}

export interface ContainerLocationEstimatedDates{
 readonly id?: number
 dateMin?: string
 dateMax?: string
 isFlexible?: boolean
 containerLocation: number
}

export interface ContainerGoodsHistory{
 readonly id?: number
 loadedAmount: number
 remarks?: string
 containerLocation: number
 containerGoods: number
}

export interface ContainerGoods{
 readonly id?: number
 goodsName: string
 unitSymbol: string
 description?: string
 container: number
}

export interface CustomerBillingAddress{
 readonly id?: number
 addressMaster: string
 building?: string
 unit?: string
 isActive?: boolean
}

export interface Contact{
 readonly id?: number
 firstname: string
 lastname: string
 position?: string
 workHp?: string
 officeHp?: string
 personalHp?: string
 faxNo?: string
 email?: string
 isActive?: boolean
 customer: number
}

export interface CustomerGlobalRule{
 readonly id?: number
 instructions: string
 isActive?: boolean
}

export interface CustomerNonTenantCustomerOpenHour{
 readonly id?: number
 readonly customer?: number
 timeStartWeekday: number
 timeStartHour: string
 timeEndWeekday: number
 timeEndHour: string
}

export interface CompanyProfile{
 readonly id?: number
 address: AddressMaster
 billingAddress?: AddressMaster
 legalAddress?: AddressMaster
 uen?: string
 name: string
 readonly photo?: string
 uenName?: string
 gstRegistered?: boolean
 email?: string
 phone?: string
 website?: string
}

export interface CustomerNonTenant{
 readonly id?: number
 customerOpenHours?: Array<CustomerNonTenantCustomerOpenHour>
 readonly owner?: string
 companyProfile: CompanyProfile
 nonTenantBillingAddresses?: Array<CustomerBillingAddress>
 readonly contacts?: Array<Contact>
 globalRules?: Array<CustomerGlobalRule>
/**@enum:["ff","ec"]*/
 customerType: string
 customerReferenceCode?: string
 isActive?: boolean
 organization?: number
 contactInvite?: number
}

export interface CustomerOpenHour{
 readonly id?: number
 customer: number
 timeStartWeekday: number
 timeStartHour: string
 timeEndWeekday: number
 timeEndHour: string
}

export interface CustomerSiteContact{
 readonly id?: number
 firstname: string
 lastname: string
 position?: string
 workHp?: string
 personalHp?: string
 email?: string
 isActive?: boolean
}

export interface CustomerSiteDetail{
 readonly id?: number
 building?: string
 unit?: string
 name?: string
 faxNo?: string
 isOutskirtArea?: boolean
 isWithinCbd?: boolean
 hasSecurity?: boolean
 noOfLoadingBay?: number
 remarks?: string
 areaCode?: number
}

export interface CustomerSiteLoadingBay{
 readonly id?: number
 name?: string
 description?: string
}

export interface CustomerSiteParking{
 readonly id?: number
 parkingRemarks?: string
 hourlyRateWkDay?: string
 hourlyRateWkEnd?: string
 peakRateWkDay?: string
 peakRateWkEnd?: string
}

export interface CustomerSiteHour{
 readonly id?: number
 timeStart?: number
 timeEnd?: number
 isOverLoop?: boolean
 weekdayOpen?: string
 weekdayClose?: string
 saturdayOpen?: string
 saturdayClose?: string
 sundayOpen?: string
 sundayClose?: string
 lunchStart?: string
 lunchEnd?: string
}

export interface CustomerSite{
 readonly id?: number
 customerSiteDetail?: CustomerSiteDetail
 customerSiteParking?: CustomerSiteParking
 customerSiteHour?: CustomerSiteHour
 customerSiteContacts?: Array<CustomerSiteContact>
 customerSiteLoadingBays?: Array<CustomerSiteLoadingBay>
 addressMaster?: AddressMaster
/**@enum:["wh","ob","al","ji","cs","sc","sh","m","o"]*/
 siteType?: string
 building?: string
 unit?: string
 name: string
 faxNo?: string
 isOutskirtArea?: boolean
 isWithinCbd?: boolean
 hasSecurity?: boolean
 noOfLoadingBay?: number
 remarks?: string
 areaCode?: number
 isActive?: boolean
 customer: number
}

export interface CpfContribution{
 readonly id?: number
}

export interface DriverRegularWorkHour{
 readonly id?: number
 driver: number
 timeFrom: string
 timeUntil: string
}

export interface DriverShiftWorkHour{
 readonly id?: number
 driver: number
 timeStartWeekday: number
 timeStartHour: string
 timeEndWeekday: number
 timeEndHour: string
}

export interface DriverAddressMaster{
 googleMapId: string
 address: string
}

export interface DrivingLicense{
 readonly id?: number
 licenseNo: string
 startDate: string
 expiryDate: string
 remarks?: string
 renewDate?: string
 demeritPoints: number
 driver?: number
 renewedBy?: number
}

export interface HazmatLicense{
 readonly id?: number
 licenseNo: string
 startDate: string
 expiryDate: string
 remarks?: string
 renewDate?: string
 driver?: number
 renewedBy?: number
}

export interface PSAPass{
 readonly id?: number
 licenseNo: string
 startDate: string
 expiryDate: string
 remarks?: string
 renewDate?: string
 driver?: number
 renewedBy?: number
}

export interface JurongPortPass{
 readonly id?: number
 licenseNo: string
 startDate: string
 expiryDate: string
 remarks?: string
 renewDate?: string
 driver?: number
 renewedBy?: number
}

export interface Driver{
 readonly id?: number
 homeAddress: DriverAddressMaster
 drivingLicense?: DrivingLicense
 hazmatLicense?: HazmatLicense
 psaPass?: PSAPass
 jurongPortPass?: JurongPortPass
 employeeId?: string
 firstName: string
 lastName: string
 nric?: string
/**@enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BQ","BA","BW","BV","BR","IO","BN","BG","BF","BI","CV","KH","CM","CA","KY","CF","TD","CL","CN","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CW","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HK","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","NC","NZ","NI","NE","NG","NU","NF","KP","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SX","SK","SI","SB","SO","ZA","GS","KR","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","UM","US","UY","UZ","VU","VE","VN","VG","VI","WF","EH","YE","ZM","ZW"]*/
 nationality?: string
 dateOfBirth?: string
 contactNo: string
 contactNo2: string
 joinDate?: string
 resignDate?: string
 isActive?: boolean
 readonly organization?: number
 user?: number
 readonly organizations?: Array<number>
}

export interface Msc{
 readonly id?: number
}

export interface TripRate{
 readonly id?: number
 amount: string
 driver: number
}

export interface ImageRecognition{
 readonly id?: number
 readonly status?: string
 readonly createdDate?: string
 readonly updatedDate?: string
 readonly photo?: string
 readonly createdBy?: number
 readonly updatedBy?: number
}

export interface ImageRecognitionType{
 readonly id?: number
 imageRecognition: ImageRecognition
/**@enum:[0,1,2]*/
 imageType?: number
 readonly yetAnotherImage?: string
}

export interface JobOrderAttachment{
 readonly id?: number
 readonly file?: string
 readonly fileName?: string
}

export interface GlobalLocationEstimatedDates{
 readonly id?: number
 dateMin?: string
 dateMax?: string
 isFlexible?: boolean
 jobOrderLocation: number
}

export interface JobOrderLocationGlobalLocationEstimatedDates{
 id?: number
 dateMin?: string
 dateMax?: string
 isFlexible?: boolean
}

export interface JobOrderLocationGoodsPermit{
 readonly id?: number
 value: string
}

export interface JobOrderLocationJobOrderPort{
 readonly id?: number
 goodsPermits: Array<JobOrderLocationGoodsPermit>
 readonly createdDate?: string
 readonly updatedDate?: string
 vesselStore?: string
 inOutVoyageStore?: string
 billOfLading?: string
 bookingRef?: string
 deliveryOrder?: string
 portOfDischarge?: string
 portOfLoading?: string
 createdBy?: number
 updatedBy?: number
 portMaster?: number
 terminalMaster?: number
 vessel?: number
}

export interface JobOrderLocationJobOrderSite{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 createdBy?: number
 updatedBy?: number
 site?: number
}

export interface JobOrderLocationJobOrderOtherSite{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 createdBy?: number
 updatedBy?: number
 site?: number
 category?: number
}

export interface JobOrderLocationJobOrderParkingLot{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 createdBy?: number
 updatedBy?: number
 parkingLot?: number
}

export interface JobOrderLocationJobOrderDepot{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 offHireRef?: string
 pickUpRef?: string
 bookingRef?: string
 storingOrder?: string
 lastDay?: string
 lastDayInformedOn?: string
 createdBy?: number
 updatedBy?: number
 depotMaster?: number
}

export interface JobOrderLocation{
 readonly id?: number
 locationEstimatedDate?: JobOrderLocationGlobalLocationEstimatedDates
 port?: JobOrderLocationJobOrderPort
 site?: JobOrderLocationJobOrderSite
 otherSite?: JobOrderLocationJobOrderOtherSite
 parkingLot?: JobOrderLocationJobOrderParkingLot
 depot?: JobOrderLocationJobOrderDepot
 readonly isShiftLocation?: string
 readonly createdDate?: string
 readonly updatedDate?: string
 order?: number
/**@enum:["CLIENT","PORT","DEPOT","PARKING_LOT","OTHERS"]*/
 locationType: string
 objectId?: number
 remarks?: string
 createdBy?: number
 updatedBy?: number
 jobOrderTrip: number
 journeySetting?: number
 locationAction?: number
}

export interface JobOrderContainerDetails{
 readonly id?: number
 dangerousGoods?: string
 temperature?: string
 grossWeight?: string
 containerCondition?: string
 remarks?: string
}

export interface JobOrderContainerMaster{
 readonly id?: number
 readonly createdDate?: string
 containerNumber: string
 tareWeight?: number
 maxGrossWeight?: number
 isValidated?: boolean
 createdBy?: number
 isoCodeMaster: number
 isOwnedBy?: number
}

export interface JobOrderContainer{
 readonly id?: number
 containerDetail?: JobOrderContainerDetails
 containerMaster?: JobOrderContainerMaster
 cargoMaster?: number
}

export interface JobOrder{
 readonly id?: number
 readonly jobOrderLocations?: Array<JobOrderLocation>
 readonly containers?: Array<JobOrderContainer>
 readonly attachments?: Array<JobOrderAttachment>
/**@enum:["H","F","L","C","A"]*/
 organizationType?: string
 readonly jobOrderCode?: string
 customerRef?: string
 remarks?: string
 readonly createdDate?: string
 kivDate?: string
 cancelledDate?: string
 subleasedDate?: string
/**@enum:[0,1,2,3,4,5]*/
 status?: number
 genericOrganization?: number
 jobType: number
 readonly purchaseOrder?: number
 customer?: number
}

export interface JobOrderDepot{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 offHireRef?: string
 pickUpRef?: string
 bookingRef?: string
 storingOrder?: string
 lastDay?: string
 lastDayInformedOn?: string
 createdBy?: number
 updatedBy?: number
 depotMaster?: number
}

export interface GoodsPermit{
 readonly id?: number
 value: string
 jobOrderPort: number
}

export interface JobOrderOtherSite{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 createdBy?: number
 updatedBy?: number
 site?: number
 category?: number
}

export interface JobOrderParkingLot{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 createdBy?: number
 updatedBy?: number
 parkingLot?: number
}

export interface JobOrderPort{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 vesselStore?: string
 inOutVoyageStore?: string
 billOfLading?: string
 bookingRef?: string
 deliveryOrder?: string
 portOfDischarge?: string
 portOfLoading?: string
 createdBy?: number
 updatedBy?: number
 portMaster?: number
 terminalMaster?: number
 vessel?: number
}

export interface JobOrderSite{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 createdBy?: number
 updatedBy?: number
 site?: number
}

export interface RevisionRequest{
 readonly id?: number
 changes?: string
 readonly requestedAt?: string
 acceptedAt?: string
 rejectedAt?: string
 objectId: number
 requestedBy?: number
 acceptedBy?: number
 rejectedBy?: number
 contentType: number
}

export interface JobOrderTrip{
 readonly id?: number
 order?: number
 jobOrderVersion: number
 tripSetting?: number
}

export interface JobOrderVersionJobOrderLocation{
 readonly id?: number
 readonly createdDate?: string
 readonly updatedDate?: string
 order?: number
/**@enum:["CLIENT","PORT","DEPOT","PARKING_LOT","OTHERS"]*/
 locationType: string
 objectId?: number
 remarks?: string
 createdBy?: number
 updatedBy?: number
 journeySetting?: number
 locationAction?: number
}

export interface JobOrderVersionJobOrderTrip{
 readonly id?: number
 jobOrderLocations: Array<JobOrderVersionJobOrderLocation>
 order?: number
 tripSetting?: number
}

export interface JobOrderVersion{
 readonly id?: number
 jobOrderTrips: Array<JobOrderVersionJobOrderTrip>
 readonly createdDate?: string
 readonly updatedDate?: string
 version: string
 isActive?: boolean
 createdBy?: number
 updatedBy?: number
 jobOrder: number
}

export interface JobCategoryJobType{
 readonly id?: number
 readonly jobTypeLabel?: string
 name: string
}

export interface JobCategory{
 readonly id?: number
 jobTypes?: Array<JobCategoryJobType>
/**@enum:["H","F","L","C","A"]*/
 organizationType?: string
 name: string
 genericOrganization?: number
}

export interface JobTypeJourneySetting{
 id: number
 order?: number
 location: string
 locationAction?: number
}

export interface JobTypeTripSetting{
 id: number
 journeySettings: Array<JobTypeJourneySetting>
 readonly name?: string
 order?: number
}

export interface JobType{
 readonly id?: number
 tripSettings?: Array<JobTypeTripSetting>
 readonly jobTypeLabel?: string
 name: string
 jobCategory: number
}

export interface JourneySetting{
 readonly id?: number
 order?: number
 location: string
 tripSetting: number
 locationAction?: number
}

export interface LocationActionEvent{
 readonly id?: number
 order?: number
/**@enum:["departure","position","arrival","at","pt","x_ray","c_c","do_c","cl_c","dol_c","ce_c","doe_c","gl_c","clg_c","ge_c","ceg_c","l_c","un_c","br","w","pc","v_p","-"]*/
 eventType: string
 locationAction: number
}

export interface LocationActionLocationActionEvent{
 readonly id?: number
 order?: number
/**@enum:["departure","position","arrival","at","pt","x_ray","c_c","do_c","cl_c","dol_c","ce_c","doe_c","gl_c","clg_c","ge_c","ceg_c","l_c","un_c","br","w","pc","v_p","-"]*/
 eventType: string
}

export interface LocationAction{
 readonly id?: number
 events?: Array<LocationActionLocationActionEvent>
/**@enum:["H","F","L","C","A"]*/
 organizationType?: string
 actionName: string
 description?: string
 location?: string
 locationId?: number
 genericOrganization?: number
}

export interface TripSetting{
 readonly id?: number
 order?: number
 jobType: number
}

export interface GenericConstruct{
}

export interface Action{
 readonly id?: number
 readonly text?: string
 actor?: GenericConstruct
 verb: string
 actionObject?: GenericConstruct
 target?: GenericConstruct
 timestamp?: string
 readonly timestampHr?: string
 readonly timesince?: string
 readonly isRead?: string
}

export interface Follow{
 started?: string
 followObject?: GenericConstruct
}

export interface ContactInvite{
 readonly id?: number
 inviter: Organization
 readonly invitedBy?: string
 invitee: Organization
 isAccepted: boolean
 readonly acceptedBy?: string
}

export interface CreateContactInvite{
 code: string
}

export interface Permission{
 code?: string
 readonly description?: string
}

export interface Dcon{
 readonly id?: number
 previousContainerNumber: string
 instruction: string
 creationDate?: string
 inwardSlotOperator: string
 discharge_Cell: string
 portOfLoading: string
 intergateway: string
 outwardSlotOperator: string
 loadCell: string
 portOfDischarge1: string
 portOfDischarge2: string
 portOfDischarge3: string
 portOfDestination: string
 containerOperator: string
 containerStatus: string
 containerWeight: number
 declaredTemp: string
 cargoDescription: string
 containerLength: string
 containerHeight: string
 containerType: string
 isoSizeType: string
 vgmDeclared: string
 vgmSigningPerson: string
 vgmReferenceNumber: string
 vgmWeighingMethod: string
 vgmAcquiredTime?: string
 pm4Declared: string
 pm4Status: string
 imoClass: string
 psaGroup: string
 overHeight: string
 overWidthRight: string
 overLengthFront: string
 overLengthBack: string
 ucLength: string
 ucWidth: string
 ucHeight: string
 abpDeclared: string
 supplementaryTli: string
 specialDetails: string
 landReshipOrShift: string
 chargeable: string
 batchNumber: string
 transhipment: string
 connection_Status: string
 reExport: string
 ucr: string
 sealNumber: string
 loloAccount: string
 depotServices: string
 pti: string
 cfs: string
 containerCondition: string
 yardLocation: string
 remarks: string
 discTime?: string
 discDetails: string
 moveTime?: string
 moveDetails: string
 gateOut_Time?: string
 gate_Out_Details: string
 gateInTime?: string
 gateInDetails: string
 loadTime?: string
 loadDetails: string
 xrayTime?: string
 xrayDetails: string
 nominationLoader: string
 nominationTime?: string
 vip: string
 billOfLading: string
 declaredAirVent: string
 declaredHumidity: string
 operationalRemarks: string
 overWidthLeft: string
 dischargerVeda?: number
 loaderVeda?: number
 dischargerVedaBerthing?: number
 loaderVedaBerthing?: number
 container?: number
 containerMaster?: number
}

export interface Veda{
 readonly id?: number
 vessel: string
 abbrVessel: string
 inVoy: string
 outVoy: string
 inAbbrVoy: string
 outAbbrVoy: string
 vesselOperator: string
 psaServiceCode: string
 psaServiceDescription: string
 customerServiceCode: string
 customerServiceDescription: string
 vesselId: string
 imoNo: string
 callSign: string
 loa: string
 wharfsideIndicator: string
 status: string
 consortium: string
 name: string
 member: string
 source: string
}

export interface ContainerMaster{
 readonly id?: number
 readonly createdDate?: string
 containerNumber: string
 tareWeight?: number
 maxGrossWeight?: number
 createdBy?: number
 isoCodeMaster: number
 isOwnedBy?: number
}

export interface Dpre{
 readonly id?: number
 veda: Veda
 containerMaster: number
 authNo: string
 billOfLading: string
 discharge: string
 containerOperator: string
 dangerousGoods: string
 deliveryStatus: string
 deliveryCancel: string
 loloAccount: string
 subletCancel: string
 subletRelease: string
 reasonCategory?: string
 reason?: string
 isActive?: boolean
 container?: number
}

export interface Hte{
 readonly id?: number
 veda: Veda
 containerMaster: number
 source?: string
 eventTime?: string
 arriveExitTime?: string
 containerOperator: string
 containerStatus: string
 weight: string
 condition: string
 cargoRefNumber: string
 sealNo: string
 driver: string
 pmNumber: string
 psaPass: string
 customLane: string
 lolo: string
 isActive?: boolean
 container?: number
}

export interface Scda{
 readonly id?: number
 veda: Veda
 closingTimeArrival?: string
 closingTimeDoc?: string
 berthingTime?: string
 size?: string
 pregateDateTime?: string
 vehicleNo?: string
 container?: number
 containerMaster?: number
}

export interface PurchaseOrderPort{
 readonly id?: number
 vesselStore?: string
 inOutVoyageStore?: string
 billOfLading?: string
 bookingRef?: string
 deliveryOrder?: string
 portOfDischarge?: string
 portOfLoading?: string
 portMaster?: number
 vessel?: number
}

export interface PurchaseOrderSite{
 readonly id?: number
 site?: number
}

export interface PurchaseOrderOtherSite{
 readonly id?: number
 site?: number
 category?: number
}

export interface PurchaseOrderParkingLot{
 readonly id?: number
 parkingLot?: number
}

export interface PurchaseOrderDepot{
 readonly id?: number
 offHireRef?: string
 pickUpRef?: string
 bookingRef?: string
 storingOrder?: string
 lastDay?: string
 lastDayInformedOn?: string
 depotMaster?: number
}

export interface PurchaseOrderItemLocation{
 readonly id?: number
 port?: PurchaseOrderPort
 site?: PurchaseOrderSite
 otherSite?: PurchaseOrderOtherSite
 parkingLot?: PurchaseOrderParkingLot
 depot?: PurchaseOrderDepot
/**@enum:["CLIENT","PORT","DEPOT","PARKING_LOT","OTHERS"]*/
 locationType: string
 locationId?: number
 remarks?: string
 belongsTo: number
}

export interface PurchaseOrderItem{
 readonly id?: number
 actualPrice: string
 deliveryDate?: string
 description?: string
 remarks?: string
 purchaseOrder: number
 salesCode?: number
 itemInvoiceCode: number
 item: number
 gstRate: number
 containerMaster?: number
}

export interface PurchaseOrderPurchaseOrderItem{
 readonly id?: number
 actualPrice: string
 deliveryDate?: string
 description?: string
 remarks?: string
 salesCode?: number
 itemInvoiceCode: number
 item: number
 gstRate: number
 containerMaster?: number
}

export interface SalesCodeQuantity{
 salesCode: number
 quantity: number
}

export interface PurchaseOrderQuantity{
 readonly id?: number
 readonly purchaseOrderNumber?: string
 readonly purchaseContract?: number
/**@enum:["STANDING_ORDER","QUOTATION","JOB_ORDER","UNASSIGNED"]*/
 readonly status?: string
 readonly startContractDate?: string
 readonly endContractDate?: string
 readonly bufferTime?: number
 readonly remarks?: string
 readonly isActive?: boolean
 readonly purchaseOrderItems?: Array<PurchaseOrderPurchaseOrderItem>
 purchaseOrderQuantities: Array<SalesCodeQuantity>
}

export interface UserGeneral{
 readonly id?: number
 username: string
 email?: string
 firstName?: string
 lastName?: string
}

export interface PurchaseOrder{
 readonly id?: number
 readonly purchaseOrderNumber?: string
 purchaseOrderItems: Array<PurchaseOrderPurchaseOrderItem>
 acceptedBy?: UserGeneral
 rejectedBy?: UserGeneral
 readonly createdDate?: string
 readonly updatedDate?: string
/**@enum:["H","F","L","C","A"]*/
 organizationType?: string
/**@enum:["STANDING_ORDER","QUOTATION","JOB_ORDER","UNASSIGNED"]*/
 status?: string
 purchaseContract?: number
 startContractDate?: string
 endContractDate?: string
 bufferTime?: number
 remarks?: string
 isActive?: boolean
 acceptedDate?: string
 rejectedDate?: string
 contractCycleInDays?: number
 modeOfPayment: string
 paymentTerms?: string
 createdBy?: number
 updatedBy?: number
 genericOrganization?: number
}

export interface QuotationContractPort{
 readonly id?: number
 vesselStore?: string
 inOutVoyageStore?: string
 billOfLading?: string
 bookingRef?: string
 deliveryOrder?: string
 portOfDischarge?: string
 portOfLoading?: string
 portMaster?: number
 vessel?: number
}

export interface QuotationContractSite{
 readonly id?: number
 site?: number
}

export interface QuotationContractOtherSite{
 readonly id?: number
 site?: number
 category?: number
}

export interface QuotationContractParkingLot{
 readonly id?: number
 parkingLot?: number
}

export interface QuotationContractDepot{
 readonly id?: number
 offHireRef?: string
 pickUpRef?: string
 bookingRef?: string
 storingOrder?: string
 lastDay?: string
 lastDayInformedOn?: string
 depotMaster?: number
}

export interface QuotationContractItemLocation{
 readonly id?: number
 port?: QuotationContractPort
 site?: QuotationContractSite
 otherSite?: QuotationContractOtherSite
 parkingLot?: QuotationContractParkingLot
 depot?: QuotationContractDepot
/**@enum:["CLIENT","PORT","DEPOT","PARKING_LOT","OTHERS"]*/
 locationType: string
 remarks?: string
 quotationContractItem: number
}

export interface QuotationContractItem{
 readonly id?: number
 quantity: number
 deliveryDate?: string
 description?: string
 quotationContract: number
 billingUnit: number
 isoCode?: number
 containerNumber?: number
}

export interface QuotationContractQuotationContractItem{
 readonly id?: number
 deliveryDate?: string
 description?: string
 quotationContract: number
 billingUnit: number
 isoCode?: number
 containerNumber?: number
}

export interface QuotationContract{
 readonly id?: number
 readonly quotationContractItems?: Array<QuotationContractQuotationContractItem>
 readonly quotationContractLocationItems?: string
 readonly createdDate?: string
 readonly updatedDate?: string
 quotationContractNumber?: string
 startContractDate: string
 endContractDate: string
 isActive?: boolean
 remarks?: string
 createdBy?: number
 updatedBy?: number
 customer: number
}

export interface QuotationItem{
 readonly id?: number
 setPrice?: string
 remarks?: string
 quotation: number
 quotationContract?: number
 quotationContractItem: number
 salesCode: number
 gstRate: number
}

export interface Version{
 readonly id?: number
 readonly serializedData?: string
 objectId: string
 db: string
 format: string
 objectRepr: string
 readonly revision?: object
 readonly contentType?: object
}

export interface Quotation{
 readonly id?: number
 createdBy?: UserGeneral
 updatedBy?: UserGeneral
 acceptedBy?: UserGeneral
 withdrawnBy?: UserGeneral
 readonly createdDate?: string
 readonly updatedDate?: string
 quotationNumber?: string
 isActive?: boolean
 acceptedOn?: string
 withdrawnOn?: string
 quotationContract: number
 haulier: number
}

export interface BillingUnitMaster{
 readonly id?: number
 unitName: string
 unitSymbol: string
 hasLocationSetting?: boolean
 isSystemDefault?: boolean
}

export interface GoodsAndServicesTax{
 readonly id?: number
 name: string
 description?: string
 salesRate: string
 purchaseRate: string
}

export interface HaulierBillingUnitBillingUnit{
 id?: number
 unitName?: string
 unitSymbol?: string
 hasLocationSetting?: boolean
}

export interface HaulierBillingUnit{
 readonly id?: number
 billingUnitMaster: HaulierBillingUnitBillingUnit
 haulier: number
}

export interface InvoiceCode{
 readonly id?: number
/**@enum:["FC","VC","SC"]*/
 invoiceCodeType: string
 code?: string
 description?: string
 unitPrice: string
 haulier?: number
 haulierBillingUnit: number
}

export interface ItemCategory{
 readonly id?: number
 name: string
}

export interface ItemInvoiceCodePriceLog{
 readonly id?: number
 price: string
 dateOfChange?: string
 itemInvoiceCode: number
}

export interface ItemInvoiceCode{
 readonly id?: number
 code?: string
 description?: string
 unitPrice: string
 genericOrganization: number
 gstRate: number
 item: Array<number>
}

export interface ItemMasterArea{
 readonly id?: number
 itemMaster: number
 areaCode: number
}

export interface ItemMasterISO{
 readonly id?: number
 itemMaster: number
 isoCode: number
}

export interface ItemMaster{
 readonly id?: number
/**@enum:["H","F","L","C","A"]*/
 organizationType?: string
 itemCode: string
 itemDescription?: string
 itemSymbol: string
 isSystemDefault?: boolean
 genericOrganization?: number
 itemCategory: number
}

export interface PricingGroup{
 readonly id?: number
 groupName: string
}

export interface SalesCodeISOList{
 readonly id?: number
 salesCode: number
 isoCode: number
}

export interface SalesCode{
 readonly id?: number
 readonly defaultUnitPrice?: string
 readonly salesIsoCodes?: Array<SalesCodeISOList>
 code?: string
 description?: string
 locationRequired?: boolean
 unit: number
 jobType?: number
}

export interface SalesInvoiceCode{
 readonly id?: number
 salesCode: number
 invoiceCode: number
}

export interface ContainerOperator{
 readonly id?: number
 fullname: string
 psaCode: string
 depot: Array<number>
}

export interface ISOCodeMaster{
 readonly id?: number
 isoSizeType: string
 isoTypeGeneric: string
 typeDescription: string
 lengthInInches: string
 heightInInches: string
 widthInInches: string
}

export interface DepotOfficeNumber{
 readonly id?: number
 name: string
 officeNumber: string
 department: number
}

export interface DepotFaxNumber{
 readonly id?: number
 name: string
 faxNumber: string
 department: number
}

export interface DepotEmail{
 readonly id?: number
 name: string
 email: string
 department: number
}

export interface DepotContactDetails{
 readonly id?: number
 readonly officeNumber?: Array<DepotOfficeNumber>
 readonly faxNumber?: Array<DepotFaxNumber>
 readonly email?: Array<DepotEmail>
 name: string
 psaCode: string
 cmsCode: string
 dhc: string
 inputSource: string
 addressMaster: string
 depotGroupMaster?: number
}

export interface DepotGroupMaster{
 readonly id?: number
 name: string
}

export interface DepotMasterAddressMaster{
 googleMapId: string
 address: string
}

export interface DepotMaster{
 readonly id?: number
 addressMaster: DepotMasterAddressMaster
 name: string
 psaCode: string
 cmsCode: string
 dhc: string
 inputSource: string
 depotGroupMaster?: number
}

export interface DepotOpenHour{
 readonly id?: number
 depot: number
 timeStartWeekday: number
 timeStartHour: string
 timeEndWeekday: number
 timeEndHour: string
}

export interface ImcoDgClassMaster{
 readonly id?: number
 name: string
 description?: string
 imageUrl?: string
}

export interface PortDgClassMaster{
 readonly id?: number
 name: string
 description?: string
 imageUrl?: string
 portMaster: number
}

export interface PortDepartmentEmail{
 email: string
}

export interface PortDepartmentFaxNumber{
 faxNumber: string
}

export interface PortDepartmentOfficeNumber{
 officeNumber: string
}

export interface PortDepartment{
 readonly id?: number
 readonly officeNumber?: Array<PortDepartmentOfficeNumber>
 readonly faxNumber?: Array<PortDepartmentFaxNumber>
 readonly email?: Array<PortDepartmentEmail>
 name?: string
 port: number
 operations: number
}

export interface PortMaster{
 readonly id?: number
 portName: string
 website?: string
}

export interface ShippingLine{
 readonly id?: number
 name: string
 psaCode: string
 inputSource: string
}

export interface TerminalDepartmentEmail{
 readonly id?: number
 name: string
 email: string
 department: number
}

export interface TerminalDepartmentFaxNumber{
 faxNumber: string
}

export interface TerminalDepartmentOfficeNumber{
 officeNumber: string
}

export interface TerminalDepartment{
 readonly id?: number
 readonly officeNumber?: Array<TerminalDepartmentOfficeNumber>
 readonly faxNumber?: Array<TerminalDepartmentFaxNumber>
 readonly email?: Array<TerminalDepartmentEmail>
 name?: string
 terminal: number
 operations: number
}

export interface TerminalMaster{
 readonly id?: number
 terminalName: string
 inputSource: string
 addressMaster: string
 portMaster: number
}

export interface TerminalOpenHour{
 readonly id?: number
 terminal: number
 timeStartWeekday: number
 timeStartHour: string
 timeEndWeekday: number
 timeEndHour: string
}

export interface PortTerminalOperationsMaster{
 readonly id?: number
 name: string
 description?: string
}

export interface VedaBerthing{
 readonly id?: number
 requiredBerthTime?: string
 estimatedBerthTime?: string
 actualBerthTime?: string
 requiredUnberthTime?: string
 estimatedUnberthTime?: string
 actualUnberthTime?: string
 completionOfDischarge?: string
 completionOfLoad?: string
 completionOfBunkering?: string
 firstActivity: string
 lastActivity: string
 importFreeStoreRent: string
 berthNo: string
 wharfmark: string
 crane: string
 source: string
 veda: number
}

export interface VehicleType{
 readonly id?: number
 name: string
}

export interface PurchaseOrderStandingOrder{
 readonly id?: number
 readonly purchaseOrderNumber?: string
 purchaseContract?: number
/**@enum:["STANDING_ORDER","QUOTATION","JOB_ORDER","UNASSIGNED"]*/
 readonly status?: string
 readonly startContractDate?: string
 readonly endContractDate?: string
 readonly bufferTime?: number
 readonly remarks?: string
 readonly isActive?: boolean
 readonly purchaseOrderItems?: Array<PurchaseOrderPurchaseOrderItem>
}

export interface StandingOrderContract{
 readonly id?: number
 createdBy?: UserGeneral
 updatedBy?: UserGeneral
 readonly createdDate?: string
 readonly updatedDate?: string
 standingOrderContractNumber?: string
 bufferTime?: number
 startContractDate: string
 endContractDate: string
 remarks?: string
 isActive?: boolean
 modeOfPayment: string
 paymentTerms?: string
 organization?: number
 standingOrderTemplate: number
 organizations: Array<number>
}

export interface StandingOrderTemplateItemInvoiceLine{
 readonly id?: number
 templatePrice: string
 remarks?: string
 invoiceCode: number
}

export interface StandingOrderTemplateItem{
 readonly id?: number
 readonly standingOrderTemplateItemInvoiceLines?: Array<StandingOrderTemplateItemInvoiceLine>
 setPrice: string
 salesCode: number
 gstRate: number
}

export interface StandingOrderTemplate{
 readonly id?: number
 standingOrderItems: Array<StandingOrderTemplateItem>
 name: string
 description?: string
 genericOrganization: number
}

export interface EventActual{
 readonly id?: number
/**@enum:["departure","position","arrival","at","pt","x_ray","c_c","do_c","cl_c","dol_c","ce_c","doe_c","gl_c","clg_c","ge_c","ceg_c","l_c","un_c","br","w","pc","v_p","-"]*/
 eventType: string
 detail?: string
 readonly occurredTime?: string
 journeyActual?: number
}

export interface TripActual{
 readonly id?: number
 tripPlan: number
}

export interface EventDefaultDuration{
/**@enum:["departure","position","arrival","at","pt","x_ray","c_c","do_c","cl_c","dol_c","ce_c","doe_c","gl_c","clg_c","ge_c","ceg_c","l_c","un_c","br","w","pc","v_p","-"]*/
 eventType: string
 duration?: number
 remarks?: string
}

export interface EventLocationAction{
 readonly id?: number
 order?: number
/**@enum:["departure","position","arrival","at","pt","x_ray","c_c","do_c","cl_c","dol_c","ce_c","doe_c","gl_c","clg_c","ge_c","ceg_c","l_c","un_c","br","w","pc","v_p","-"]*/
 eventType: string
 locationAction: number
}

export interface EventPlan{
 readonly id?: number
 readonly eventTypeLabel?: string
/**@enum:["departure","position","arrival","at","pt","x_ray","c_c","do_c","cl_c","dol_c","ce_c","doe_c","gl_c","clg_c","ge_c","ceg_c","l_c","un_c","br","w","pc","v_p","-"]*/
 eventType: string
 detail?: string
 plannedStartTime: string
 estimatedDuration: number
 journeyPlan?: number
}

export interface TemplatePlanName{
 readonly id?: number
 name?: string
}

export interface TemplatePlan{
 readonly id?: number
 createdBy?: UserGeneral
 updatedBy?: UserGeneral
 templatePlanName: string
 readonly createdDate?: string
 readonly updatedDate?: string
 isActive?: boolean
 jobOrder: number
}

export interface TripPlanEventPlan{
 readonly id?: number
 readonly plannedEndTime?: string
/**@enum:["departure","position","arrival","at","pt","x_ray","c_c","do_c","cl_c","dol_c","ce_c","doe_c","gl_c","clg_c","ge_c","ceg_c","l_c","un_c","br","w","pc","v_p","-"]*/
 eventType: string
 detail?: string
 plannedStartTime: string
 estimatedDuration: number
}

export interface TripPlanJourneyPlan{
 readonly id?: number
 readonly eventPlans?: Array<TripPlanEventPlan>
 readonly journeyActual?: string
 journeyName: string
 containerLocation: number
 driver?: number
}

export interface TripPlan{
 readonly id?: number
 readonly journeyPlans?: Array<TripPlanJourneyPlan>
 readonly tripActual?: string
 readonly container?: string
 tripName: string
 isDone?: boolean
 templatePlan?: number
 containerTrip: number
 vehicle?: string
}


/** FormGroup PasswordChange */
export const PasswordChangeForm = new FormGroup({
newPassword1: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(128)]),
newPassword2: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(128)])})

/** FormGroup PasswordReset */
export const PasswordResetForm = new FormGroup({
email: new FormControl('',[Validators.required,Validators.email,Validators.minLength(1)])})

/** FormGroup PasswordResetConfirm */
export const PasswordResetConfirmForm = new FormGroup({
newPassword1: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(128)]),
newPassword2: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(128)]),
uid: new FormControl('',[Validators.required,Validators.minLength(1)]),
token: new FormControl('',[Validators.required,Validators.minLength(1)])})

/** FormGroup Organization */
export const OrganizationForm = new FormGroup({
})

/** FormGroup UserProfile */
export const UserProfileForm = new FormGroup({
gender: new FormControl(''),
contact: new FormControl('',[Validators.required,Validators.minLength(1)]),
dob: new FormControl(''),
photo: new FormControl(''),
photoThumbnail: new FormControl('')})

/** FormGroup RegistrationUser */
export const RegistrationUserForm = new FormGroup({
username: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(150)]),
email: new FormControl('',[Validators.required,Validators.email,Validators.minLength(1)]),
password: new FormControl('',[Validators.required,Validators.minLength(1)]),
displayName: new FormControl(''),
firstName: new FormControl('',[Validators.maxLength(30)]),
lastName: new FormControl('',[Validators.maxLength(150)]),
profile: new FormControl('')})

/** FormGroup Registration */
export const RegistrationForm = new FormGroup({
organization: new FormControl('',[Validators.required]),
user: new FormControl('',[Validators.required])})

/** FormGroup VerifyEmail */
export const VerifyEmailForm = new FormGroup({
key: new FormControl('',[Validators.required,Validators.minLength(1)])})

/** FormGroup TokenObtainPair */
export const TokenObtainPairForm = new FormGroup({
username: new FormControl('',[Validators.required,Validators.minLength(1)]),
password: new FormControl('',[Validators.required,Validators.minLength(1)])})

/** FormGroup TokenRefresh */
export const TokenRefreshForm = new FormGroup({
refresh: new FormControl('',[Validators.required,Validators.minLength(1)])})

/** FormGroup UserDetail */
export const UserDetailForm = new FormGroup({
username: new FormControl('',[Validators.minLength(1)]),
email: new FormControl('',[Validators.email,Validators.minLength(1)]),
displayName: new FormControl(''),
firstName: new FormControl('',[Validators.required,Validators.minLength(1)]),
lastName: new FormControl('',[Validators.required,Validators.minLength(1)]),
profile: new FormControl('',[Validators.required]),
organizations: new FormControl('')})

/** FormGroup ExportConfig */
export const ExportConfigForm = new FormGroup({
id: new FormControl(''),
configName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(32)])})

/** FormGroup InvoiceCondition */
export const InvoiceConditionForm = new FormGroup({
id: new FormControl(''),
conditionName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(32)])})

/** FormGroup InvoiceFlag */
export const InvoiceFlagForm = new FormGroup({
id: new FormControl(''),
remarks: new FormControl('',[Validators.required,Validators.minLength(1)]),
invoice: new FormControl('',[Validators.required])})

/** FormGroup Invoice */
export const InvoiceForm = new FormGroup({
id: new FormControl(''),
invoiceName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(32)]),
status: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(32)])})

/** FormGroup Coe */
export const CoeForm = new FormGroup({
id: new FormControl(''),
expiryDate: new FormControl('',[Validators.required]),
vehicle: new FormControl('',[Validators.required])})

/** FormGroup CompanyOwnedVpc */
export const CompanyOwnedVpcForm = new FormGroup({
id: new FormControl(''),
code: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
vpcStartDate: new FormControl('',[Validators.required]),
vpcEndDate: new FormControl('',[Validators.required]),
vpcIssuedDate: new FormControl('',[Validators.required]),
isOwner: new FormControl(false,[Validators.required]),
organization: new FormControl(''),
lot: new FormControl('')})

/** FormGroup Insurance */
export const InsuranceForm = new FormGroup({
id: new FormControl(''),
insurer: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
policyNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)]),
startDate: new FormControl('',[Validators.required]),
endDate: new FormControl('',[Validators.required]),
remarks: new FormControl(''),
vehicle: new FormControl('',[Validators.required])})

/** FormGroup LorryDetails */
export const LorryDetailsForm = new FormGroup({
id: new FormControl(''),
displayName: new FormControl(''),
vehicleType: new FormControl('',[Validators.required,Validators.minLength(1)]),
vehicle: new FormControl('',[Validators.required])})

/** FormGroup Lot */
export const LotForm = new FormGroup({
id: new FormControl(''),
lotType: new FormControl('',[Validators.required]),
lotNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(10)]),
lotOwnerName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
lotOwnerUen: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
parkingLot: new FormControl('')})

/** FormGroup OtherCompanyVpc */
export const OtherCompanyVpcForm = new FormGroup({
id: new FormControl(''),
code: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
vpcStartDate: new FormControl('',[Validators.required]),
vpcEndDate: new FormControl('',[Validators.required]),
vpcIssuedDate: new FormControl('',[Validators.required]),
isOwner: new FormControl(false,[Validators.required]),
owner: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
costPrice: new FormControl('',[Validators.required]),
organization: new FormControl('')})

/** FormGroup OtherSiteCategory */
export const OtherSiteCategoryForm = new FormGroup({
id: new FormControl(''),
category: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(55)])})

/** FormGroup OtherSite */
export const OtherSiteForm = new FormGroup({
id: new FormControl(''),
category: new FormControl('',[Validators.required]),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)]),
isShiftLocation: new FormControl(false),
addressMaster: new FormControl(''),
belongsTo: new FormControl('',[Validators.required])})

/** FormGroup AddressMaster */
export const AddressMasterForm = new FormGroup({
googleMapId: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
address: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)])})

/** FormGroup ParkingLot */
export const ParkingLotForm = new FormGroup({
id: new FormControl(''),
addressMaster: new FormControl('',[Validators.required]),
lots: new FormControl(''),
count40Foot: new FormControl(''),
count20Foot: new FormControl(''),
countHeavyVehicle: new FormControl(''),
parkingLotCode: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(32)]),
parkingLotName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(55)]),
haulier: new FormControl('')})

/** FormGroup PortEntryPermit */
export const PortEntryPermitForm = new FormGroup({
id: new FormControl(''),
permitNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(15)]),
company: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
expiryDate: new FormControl('',[Validators.required]),
feePaid: new FormControl('',[Validators.required]),
vehicle: new FormControl('',[Validators.required])})

/** FormGroup PrimeMoverDetails */
export const PrimeMoverDetailsForm = new FormGroup({
id: new FormControl(''),
displayName: new FormControl(''),
vehicleType: new FormControl('',[Validators.required,Validators.minLength(1)]),
vehicle: new FormControl('',[Validators.required])})

/** FormGroup RoadTax */
export const RoadTaxForm = new FormGroup({
id: new FormControl(''),
organization: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)]),
amount: new FormControl('',[Validators.required]),
renewDate: new FormControl('',[Validators.required]),
expiryDate: new FormControl('',[Validators.required]),
vehicle: new FormControl('',[Validators.required]),
renewedBy: new FormControl('')})

/** FormGroup TrailerTyre */
export const TrailerTyreForm = new FormGroup({
id: new FormControl(''),
noOfTyres: new FormControl('',[Validators.required]),
tyreType: new FormControl(''),
trailer: new FormControl('',[Validators.required])})

/** FormGroup TrailerTyreChangeLog */
export const TrailerTyreChangeLogForm = new FormGroup({
id: new FormControl(''),
position: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(20)]),
mileage: new FormControl('',[Validators.required]),
remarks: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
dateOfChange: new FormControl('',[Validators.required]),
tyre: new FormControl('',[Validators.required])})

/** FormGroup Trailer */
export const TrailerForm = new FormGroup({
plateNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(8)]),
sizeType: new FormControl('',[Validators.required]),
payload: new FormControl('',[Validators.required]),
isBorrowed: new FormControl(false),
registrationDate: new FormControl('',[Validators.required]),
brand: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)]),
ulw: new FormControl('',[Validators.required]),
mlw: new FormControl('',[Validators.required]),
mfgDate: new FormControl('',[Validators.required])})

/** FormGroup TyreMaster */
export const TyreMasterForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(15)]),
size: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(5)]),
brand: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(15)]),
model: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(15)]),
origin: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
vendor: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)]),
unitPrice: new FormControl('',[Validators.required]),
isTubeless: new FormControl(false),
belongsTo: new FormControl('')})

/** FormGroup VehicleTyreChangeLog */
export const VehicleTyreChangeLogForm = new FormGroup({
id: new FormControl(''),
position: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(20)]),
mileage: new FormControl('',[Validators.required]),
remarks: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
dateOfChange: new FormControl('',[Validators.required]),
tyre: new FormControl('',[Validators.required])})

/** FormGroup VehicleTyre */
export const VehicleTyreForm = new FormGroup({
id: new FormControl(''),
noOfTyres: new FormControl('',[Validators.required]),
tyreType: new FormControl(''),
vehicle: new FormControl('',[Validators.required])})

/** FormGroup Vehicle */
export const VehicleForm = new FormGroup({
plateNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(7)]),
model: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
payload: new FormControl('',[Validators.required]),
iu: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(10)]),
engineNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
chassisNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
ulw: new FormControl('',[Validators.required]),
mlw: new FormControl('',[Validators.required]),
mfgDate: new FormControl('',[Validators.required]),
brand: new FormControl('',[Validators.required]),
isActive: new FormControl(false),
isBorrowed: new FormControl(false),
registrationDate: new FormControl('',[Validators.required]),
organization: new FormControl(''),
belongsTo: new FormControl(''),
vehicleType: new FormControl('',[Validators.required]),
registeredBy: new FormControl('')})

/** FormGroup Vpc */
export const VpcForm = new FormGroup({
id: new FormControl(''),
code: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
vpcStartDate: new FormControl('',[Validators.required]),
vpcEndDate: new FormControl('',[Validators.required]),
vpcIssuedDate: new FormControl('',[Validators.required]),
isOwner: new FormControl(false,[Validators.required]),
organization: new FormControl('')})

/** FormGroup CompanyBillingAddress */
export const CompanyBillingAddressForm = new FormGroup({
id: new FormControl(''),
building: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
unit: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
company: new FormControl('',[Validators.required]),
addressMaster: new FormControl('')})

/** FormGroup EndCustomerHaulier */
export const EndCustomerHaulierForm = new FormGroup({
id: new FormControl(''),
endCustomer: new FormControl('',[Validators.required]),
haulier: new FormControl('',[Validators.required])})

/** FormGroup CompanyEndCustomer */
export const CompanyEndCustomerForm = new FormGroup({
id: new FormControl(''),
activeDate: new FormControl('',[Validators.required]),
company: new FormControl('',[Validators.required])})

/** FormGroup EntityType */
export const EntityTypeForm = new FormGroup({
id: new FormControl(''),
issuanceAgency: new FormControl('',[Validators.minLength(1),Validators.maxLength(100)]),
entityType: new FormControl('',[Validators.minLength(1)]),
entityTypeIndicator: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(5)])})

/** FormGroup FreightForwarderHaulier */
export const FreightForwarderHaulierForm = new FormGroup({
id: new FormControl(''),
freightForwarder: new FormControl('',[Validators.required]),
haulier: new FormControl('',[Validators.required])})

/** FormGroup FreightForwarder */
export const FreightForwarderForm = new FormGroup({
id: new FormControl(''),
activeDate: new FormControl('',[Validators.required]),
company: new FormControl('',[Validators.required])})

/** FormGroup CompanyGlobalRule */
export const CompanyGlobalRuleForm = new FormGroup({
id: new FormControl(''),
instruction: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
customer: new FormControl('',[Validators.required])})

/** FormGroup PortnetAccount */
export const PortnetAccountForm = new FormGroup({
id: new FormControl(''),
username: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
password: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
createdDate: new FormControl(''),
expiryDate: new FormControl('',[Validators.required]),
company: new FormControl('',[Validators.required]),
createdBy: new FormControl('')})

/** FormGroup CompanyShiftWorkHour */
export const CompanyShiftWorkHourForm = new FormGroup({
id: new FormControl(''),
company: new FormControl('',[Validators.required]),
timeStartWeekday: new FormControl('',[Validators.required]),
timeStartHour: new FormControl('',[Validators.required]),
timeEndWeekday: new FormControl('',[Validators.required]),
timeEndHour: new FormControl('',[Validators.required])})

/** FormGroup CompanySiteContact */
export const CompanySiteContactForm = new FormGroup({
id: new FormControl(''),
firstName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
lastName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
workHp: new FormControl('',[Validators.minLength(1),Validators.maxLength(12)]),
personalHp: new FormControl('',[Validators.minLength(1),Validators.maxLength(12)]),
email: new FormControl('',[Validators.minLength(1),Validators.maxLength(30)]),
createdDate: new FormControl(''),
isActive: new FormControl(false)})

/** FormGroup CompanySiteHour */
export const CompanySiteHourForm = new FormGroup({
id: new FormControl(''),
weekdayOpen: new FormControl(''),
weekdayClose: new FormControl(''),
weekendOpen: new FormControl(''),
weekendClose: new FormControl(''),
lunchStart: new FormControl(''),
lunchEnd: new FormControl('')})

/** FormGroup CompanySiteLoadingBay */
export const CompanySiteLoadingBayForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.minLength(1),Validators.maxLength(10)]),
description: new FormControl('',[Validators.minLength(1),Validators.maxLength(100)])})

/** FormGroup CompanySiteParking */
export const CompanySiteParkingForm = new FormGroup({
id: new FormControl(''),
parkingRemarks: new FormControl('',[Validators.maxLength(50)]),
hourlyRateWkDay: new FormControl(''),
hourlyRateWkEnd: new FormControl(''),
peakRateWkDay: new FormControl(''),
peakRateWkEnd: new FormControl(''),
site: new FormControl('',[Validators.required])})

/** FormGroup CompanySite */
export const CompanySiteForm = new FormGroup({
id: new FormControl(''),
siteContacts: new FormControl(''),
siteHours: new FormControl(''),
parkingInfo: new FormControl(''),
siteLoadingBays: new FormControl(''),
addressMaster: new FormControl('',[Validators.required]),
siteType: new FormControl(''),
building: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
unit: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
name: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
faxNo: new FormControl('',[Validators.minLength(1),Validators.maxLength(15)]),
isOutskirtArea: new FormControl(false),
isWithinCbd: new FormControl(false),
hasSecurity: new FormControl(false),
noOfLoadingBay: new FormControl(''),
remarks: new FormControl('',[Validators.minLength(1),Validators.maxLength(60)]),
company: new FormControl('')})

/** FormGroup Uen */
export const UenForm = new FormGroup({
id: new FormControl(''),
uen: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(20)]),
regStreetName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
entityName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(100)]),
regPostalCode: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(10)]),
issuanceAgencyId: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(10)]),
rank: new FormControl('',[Validators.required]),
uenIssueDate: new FormControl('',[Validators.required]),
fullCount: new FormControl('',[Validators.required]),
uenStatus: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(10)]),
entityType: new FormControl('',[Validators.required])})

/** FormGroup ContainerAttachment */
export const ContainerAttachmentForm = new FormGroup({
id: new FormControl(''),
file: new FormControl(''),
remarks: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
uploadedDate: new FormControl(''),
cancelledDate: new FormControl('',[Validators.required]),
uploadedBy: new FormControl(''),
cancelledBy: new FormControl(''),
container: new FormControl('',[Validators.required])})

/** FormGroup ContainerContainerImco */
export const ContainerContainerImcoForm = new FormGroup({
id: new FormControl(''),
imcoDgClassMaster: new FormControl('',[Validators.required])})

/** FormGroup ContainerContainerDetail */
export const ContainerContainerDetailForm = new FormGroup({
id: new FormControl(''),
containerImcoDetails: new FormControl('',[Validators.required]),
dangerousGoods: new FormControl('',[Validators.maxLength(25)]),
temperature: new FormControl(''),
grossWeight: new FormControl(''),
containerCondition: new FormControl('',[Validators.maxLength(50)]),
remarks: new FormControl('')})

/** FormGroup ContainerContainerMaster */
export const ContainerContainerMasterForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
containerNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(12)]),
tareWeight: new FormControl(''),
maxGrossWeight: new FormControl(''),
isValidated: new FormControl(false),
createdBy: new FormControl(''),
isoCodeMaster: new FormControl('',[Validators.required]),
isOwnedBy: new FormControl('')})

/** FormGroup ContainerCargoMaster */
export const ContainerCargoMasterForm = new FormGroup({
id: new FormControl(''),
cargoCode: new FormControl('',[Validators.maxLength(50)]),
goods: new FormControl('',[Validators.required])})

/** FormGroup Container */
export const ContainerForm = new FormGroup({
id: new FormControl(''),
containerDetail: new FormControl(''),
containerMaster: new FormControl(''),
cargoMaster: new FormControl(''),
jobOrder: new FormControl('')})

/** FormGroup ContainerLocationContainerLocationEstimatedDates */
export const ContainerLocationContainerLocationEstimatedDatesForm = new FormGroup({
id: new FormControl(''),
dateMin: new FormControl(''),
dateMax: new FormControl(''),
isFlexible: new FormControl(false)})

/** FormGroup ContainerPortGoodsPermit */
export const ContainerPortGoodsPermitForm = new FormGroup({
id: new FormControl(''),
value: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)]),
jobOrderPort: new FormControl('',[Validators.required])})

/** FormGroup ContainerPort */
export const ContainerPortForm = new FormGroup({
id: new FormControl(''),
goodsPermits: new FormControl('',[Validators.required]),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
vesselStore: new FormControl('',[Validators.maxLength(60)]),
inOutVoyageStore: new FormControl('',[Validators.maxLength(10)]),
billOfLading: new FormControl('',[Validators.maxLength(30)]),
bookingRef: new FormControl('',[Validators.maxLength(50)]),
deliveryOrder: new FormControl('',[Validators.maxLength(30)]),
portOfDischarge: new FormControl('',[Validators.maxLength(50)]),
portOfLoading: new FormControl('',[Validators.maxLength(50)]),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
portMaster: new FormControl(''),
vessel: new FormControl('')})

/** FormGroup ContainerSite */
export const ContainerSiteForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
site: new FormControl('')})

/** FormGroup ContainerOtherSite */
export const ContainerOtherSiteForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
site: new FormControl(''),
category: new FormControl('')})

/** FormGroup ContainerParkingLot */
export const ContainerParkingLotForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
parkingLot: new FormControl('')})

/** FormGroup ContainerDepot */
export const ContainerDepotForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
offHireRef: new FormControl('',[Validators.maxLength(30)]),
pickUpRef: new FormControl('',[Validators.maxLength(50)]),
bookingRef: new FormControl('',[Validators.maxLength(50)]),
storingOrder: new FormControl('',[Validators.maxLength(30)]),
lastDay: new FormControl(''),
lastDayInformedOn: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
depotMaster: new FormControl('')})

/** FormGroup ContainerLocation */
export const ContainerLocationForm = new FormGroup({
id: new FormControl(''),
locationEstimatedDate: new FormControl(''),
port: new FormControl(''),
site: new FormControl(''),
otherSite: new FormControl(''),
parkingLot: new FormControl(''),
depot: new FormControl(''),
isShiftLocation: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
organizationType: new FormControl(''),
order: new FormControl(''),
locationType: new FormControl('',[Validators.required]),
objectId: new FormControl(''),
remarks: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
genericOrganization: new FormControl(''),
containerTrip: new FormControl('',[Validators.required]),
jobOrderLocation: new FormControl(''),
locationAction: new FormControl('')})

/** FormGroup ContainerTripContainerMaster */
export const ContainerTripContainerMasterForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
containerNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(12)]),
tareWeight: new FormControl(''),
maxGrossWeight: new FormControl(''),
isValidated: new FormControl(false),
createdBy: new FormControl(''),
isoCodeMaster: new FormControl('',[Validators.required]),
isOwnedBy: new FormControl('')})

/** FormGroup ContainerTripContainer */
export const ContainerTripContainerForm = new FormGroup({
id: new FormControl(''),
containerMaster: new FormControl('',[Validators.required]),
cargoMaster: new FormControl('')})

/** FormGroup ContainerTripContainerVersion */
export const ContainerTripContainerVersionForm = new FormGroup({
id: new FormControl(''),
container: new FormControl('',[Validators.required]),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
version: new FormControl('',[Validators.required,Validators.maxLength(75)]),
isActive: new FormControl(false),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
jobOrder: new FormControl('',[Validators.required])})

/** FormGroup ContainerTrip */
export const ContainerTripForm = new FormGroup({
id: new FormControl(''),
containerLocations: new FormControl('',[Validators.required]),
containerVersion: new FormControl('',[Validators.required]),
order: new FormControl(''),
jobOrderTrip: new FormControl('')})

/** FormGroup ContainerDetail */
export const ContainerDetailForm = new FormGroup({
id: new FormControl(''),
dangerousGoods: new FormControl('',[Validators.maxLength(25)]),
temperature: new FormControl(''),
grossWeight: new FormControl(''),
containerCondition: new FormControl('',[Validators.maxLength(50)]),
remarks: new FormControl(''),
container: new FormControl('',[Validators.required])})

/** FormGroup ContainerLocationEstimatedDates */
export const ContainerLocationEstimatedDatesForm = new FormGroup({
id: new FormControl(''),
dateMin: new FormControl(''),
dateMax: new FormControl(''),
isFlexible: new FormControl(false),
containerLocation: new FormControl('',[Validators.required])})

/** FormGroup ContainerGoodsHistory */
export const ContainerGoodsHistoryForm = new FormGroup({
id: new FormControl(''),
loadedAmount: new FormControl('',[Validators.required]),
remarks: new FormControl(''),
containerLocation: new FormControl('',[Validators.required]),
containerGoods: new FormControl('',[Validators.required])})

/** FormGroup ContainerGoods */
export const ContainerGoodsForm = new FormGroup({
id: new FormControl(''),
goodsName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(55)]),
unitSymbol: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(10)]),
description: new FormControl(''),
container: new FormControl('',[Validators.required])})

/** FormGroup CustomerBillingAddress */
export const CustomerBillingAddressForm = new FormGroup({
id: new FormControl(''),
addressMaster: new FormControl('',[Validators.required]),
building: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
unit: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
isActive: new FormControl(false)})

/** FormGroup Contact */
export const ContactForm = new FormGroup({
id: new FormControl(''),
firstname: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
lastname: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
position: new FormControl('',[Validators.minLength(1),Validators.maxLength(60)]),
workHp: new FormControl('',[Validators.minLength(1),Validators.maxLength(12)]),
officeHp: new FormControl('',[Validators.minLength(1),Validators.maxLength(12)]),
personalHp: new FormControl('',[Validators.minLength(1),Validators.maxLength(12)]),
faxNo: new FormControl('',[Validators.minLength(1),Validators.maxLength(15)]),
email: new FormControl('',[Validators.minLength(1),Validators.maxLength(30)]),
isActive: new FormControl(false),
customer: new FormControl('',[Validators.required])})

/** FormGroup CustomerGlobalRule */
export const CustomerGlobalRuleForm = new FormGroup({
id: new FormControl(''),
instructions: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
isActive: new FormControl(false)})

/** FormGroup CustomerNonTenantCustomerOpenHour */
export const CustomerNonTenantCustomerOpenHourForm = new FormGroup({
id: new FormControl(''),
customer: new FormControl(''),
timeStartWeekday: new FormControl('',[Validators.required]),
timeStartHour: new FormControl('',[Validators.required]),
timeEndWeekday: new FormControl('',[Validators.required]),
timeEndHour: new FormControl('',[Validators.required])})

/** FormGroup CompanyProfile */
export const CompanyProfileForm = new FormGroup({
id: new FormControl(''),
address: new FormControl('',[Validators.required]),
billingAddress: new FormControl(''),
legalAddress: new FormControl(''),
uen: new FormControl('',[Validators.minLength(1),Validators.maxLength(32)]),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
photo: new FormControl(''),
uenName: new FormControl('',[Validators.maxLength(60)]),
gstRegistered: new FormControl(false),
email: new FormControl('',[Validators.maxLength(60)]),
phone: new FormControl('',[Validators.maxLength(60)]),
website: new FormControl('',[Validators.maxLength(60)])})

/** FormGroup CustomerNonTenant */
export const CustomerNonTenantForm = new FormGroup({
id: new FormControl(''),
customerOpenHours: new FormControl(''),
owner: new FormControl(''),
companyProfile: new FormControl('',[Validators.required]),
nonTenantBillingAddresses: new FormControl(''),
contacts: new FormControl(''),
globalRules: new FormControl(''),
customerType: new FormControl('',[Validators.required]),
customerReferenceCode: new FormControl('',[Validators.maxLength(32)]),
isActive: new FormControl(false),
organization: new FormControl(''),
contactInvite: new FormControl('')})

/** FormGroup CustomerOpenHour */
export const CustomerOpenHourForm = new FormGroup({
id: new FormControl(''),
customer: new FormControl('',[Validators.required]),
timeStartWeekday: new FormControl('',[Validators.required]),
timeStartHour: new FormControl('',[Validators.required]),
timeEndWeekday: new FormControl('',[Validators.required]),
timeEndHour: new FormControl('',[Validators.required])})

/** FormGroup CustomerSiteContact */
export const CustomerSiteContactForm = new FormGroup({
id: new FormControl(''),
firstname: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
lastname: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
position: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
workHp: new FormControl('',[Validators.minLength(1),Validators.maxLength(12)]),
personalHp: new FormControl('',[Validators.minLength(1),Validators.maxLength(12)]),
email: new FormControl('',[Validators.minLength(1),Validators.maxLength(30)]),
isActive: new FormControl(false)})

/** FormGroup CustomerSiteDetail */
export const CustomerSiteDetailForm = new FormGroup({
id: new FormControl(''),
building: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
unit: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
name: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
faxNo: new FormControl('',[Validators.minLength(1),Validators.maxLength(15)]),
isOutskirtArea: new FormControl(false),
isWithinCbd: new FormControl(false),
hasSecurity: new FormControl(false),
noOfLoadingBay: new FormControl(''),
remarks: new FormControl('',[Validators.minLength(1),Validators.maxLength(60)]),
areaCode: new FormControl('')})

/** FormGroup CustomerSiteLoadingBay */
export const CustomerSiteLoadingBayForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.minLength(1),Validators.maxLength(10)]),
description: new FormControl('',[Validators.minLength(1),Validators.maxLength(100)])})

/** FormGroup CustomerSiteParking */
export const CustomerSiteParkingForm = new FormGroup({
id: new FormControl(''),
parkingRemarks: new FormControl('',[Validators.maxLength(50)]),
hourlyRateWkDay: new FormControl(''),
hourlyRateWkEnd: new FormControl(''),
peakRateWkDay: new FormControl(''),
peakRateWkEnd: new FormControl('')})

/** FormGroup CustomerSiteHour */
export const CustomerSiteHourForm = new FormGroup({
id: new FormControl(''),
timeStart: new FormControl(''),
timeEnd: new FormControl(''),
isOverLoop: new FormControl(false),
weekdayOpen: new FormControl(''),
weekdayClose: new FormControl(''),
saturdayOpen: new FormControl(''),
saturdayClose: new FormControl(''),
sundayOpen: new FormControl(''),
sundayClose: new FormControl(''),
lunchStart: new FormControl(''),
lunchEnd: new FormControl('')})

/** FormGroup CustomerSite */
export const CustomerSiteForm = new FormGroup({
id: new FormControl(''),
customerSiteDetail: new FormControl(''),
customerSiteParking: new FormControl(''),
customerSiteHour: new FormControl(''),
customerSiteContacts: new FormControl(''),
customerSiteLoadingBays: new FormControl(''),
addressMaster: new FormControl(''),
siteType: new FormControl(''),
building: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
unit: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
faxNo: new FormControl('',[Validators.minLength(1),Validators.maxLength(15)]),
isOutskirtArea: new FormControl(false),
isWithinCbd: new FormControl(false),
hasSecurity: new FormControl(false),
noOfLoadingBay: new FormControl(''),
remarks: new FormControl('',[Validators.minLength(1),Validators.maxLength(60)]),
areaCode: new FormControl(''),
isActive: new FormControl(false),
customer: new FormControl('',[Validators.required])})

/** FormGroup CpfContribution */
export const CpfContributionForm = new FormGroup({
id: new FormControl('')})

/** FormGroup DriverRegularWorkHour */
export const DriverRegularWorkHourForm = new FormGroup({
id: new FormControl(''),
driver: new FormControl('',[Validators.required]),
timeFrom: new FormControl('',[Validators.required]),
timeUntil: new FormControl('',[Validators.required])})

/** FormGroup DriverShiftWorkHour */
export const DriverShiftWorkHourForm = new FormGroup({
id: new FormControl(''),
driver: new FormControl('',[Validators.required]),
timeStartWeekday: new FormControl('',[Validators.required]),
timeStartHour: new FormControl('',[Validators.required]),
timeEndWeekday: new FormControl('',[Validators.required]),
timeEndHour: new FormControl('',[Validators.required])})

/** FormGroup DriverAddressMaster */
export const DriverAddressMasterForm = new FormGroup({
googleMapId: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
address: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)])})

/** FormGroup DrivingLicense */
export const DrivingLicenseForm = new FormGroup({
id: new FormControl(''),
licenseNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
startDate: new FormControl('',[Validators.required]),
expiryDate: new FormControl('',[Validators.required]),
remarks: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
renewDate: new FormControl(''),
demeritPoints: new FormControl('',[Validators.required]),
driver: new FormControl(''),
renewedBy: new FormControl('')})

/** FormGroup HazmatLicense */
export const HazmatLicenseForm = new FormGroup({
id: new FormControl(''),
licenseNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
startDate: new FormControl('',[Validators.required]),
expiryDate: new FormControl('',[Validators.required]),
remarks: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
renewDate: new FormControl(''),
driver: new FormControl(''),
renewedBy: new FormControl('')})

/** FormGroup PSAPass */
export const PSAPassForm = new FormGroup({
id: new FormControl(''),
licenseNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
startDate: new FormControl('',[Validators.required]),
expiryDate: new FormControl('',[Validators.required]),
remarks: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
renewDate: new FormControl(''),
driver: new FormControl(''),
renewedBy: new FormControl('')})

/** FormGroup JurongPortPass */
export const JurongPortPassForm = new FormGroup({
id: new FormControl(''),
licenseNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
startDate: new FormControl('',[Validators.required]),
expiryDate: new FormControl('',[Validators.required]),
remarks: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
renewDate: new FormControl(''),
driver: new FormControl(''),
renewedBy: new FormControl('')})

/** FormGroup Driver */
export const DriverForm = new FormGroup({
id: new FormControl(''),
homeAddress: new FormControl('',[Validators.required]),
drivingLicense: new FormControl(''),
hazmatLicense: new FormControl(''),
psaPass: new FormControl(''),
jurongPortPass: new FormControl(''),
employeeId: new FormControl('',[Validators.maxLength(32)]),
firstName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
lastName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
nric: new FormControl('',[Validators.maxLength(20)]),
nationality: new FormControl(''),
dateOfBirth: new FormControl(''),
contactNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(20)]),
contactNo2: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(20)]),
joinDate: new FormControl(''),
resignDate: new FormControl(''),
isActive: new FormControl(false),
organization: new FormControl(''),
user: new FormControl(''),
organizations: new FormControl('')})

/** FormGroup Msc */
export const MscForm = new FormGroup({
id: new FormControl('')})

/** FormGroup TripRate */
export const TripRateForm = new FormGroup({
id: new FormControl(''),
amount: new FormControl('',[Validators.required]),
driver: new FormControl('',[Validators.required])})

/** FormGroup ImageRecognition */
export const ImageRecognitionForm = new FormGroup({
id: new FormControl(''),
status: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
photo: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl('')})

/** FormGroup ImageRecognitionType */
export const ImageRecognitionTypeForm = new FormGroup({
id: new FormControl(''),
imageRecognition: new FormControl('',[Validators.required]),
imageType: new FormControl(''),
yetAnotherImage: new FormControl('')})

/** FormGroup JobOrderAttachment */
export const JobOrderAttachmentForm = new FormGroup({
id: new FormControl(''),
file: new FormControl(''),
fileName: new FormControl('')})

/** FormGroup GlobalLocationEstimatedDates */
export const GlobalLocationEstimatedDatesForm = new FormGroup({
id: new FormControl(''),
dateMin: new FormControl(''),
dateMax: new FormControl(''),
isFlexible: new FormControl(false),
jobOrderLocation: new FormControl('',[Validators.required])})

/** FormGroup JobOrderLocationGlobalLocationEstimatedDates */
export const JobOrderLocationGlobalLocationEstimatedDatesForm = new FormGroup({
id: new FormControl(''),
dateMin: new FormControl(''),
dateMax: new FormControl(''),
isFlexible: new FormControl(false)})

/** FormGroup JobOrderLocationGoodsPermit */
export const JobOrderLocationGoodsPermitForm = new FormGroup({
id: new FormControl(''),
value: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)])})

/** FormGroup JobOrderLocationJobOrderPort */
export const JobOrderLocationJobOrderPortForm = new FormGroup({
id: new FormControl(''),
goodsPermits: new FormControl('',[Validators.required]),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
vesselStore: new FormControl('',[Validators.maxLength(60)]),
inOutVoyageStore: new FormControl('',[Validators.maxLength(10)]),
billOfLading: new FormControl('',[Validators.maxLength(30)]),
bookingRef: new FormControl('',[Validators.maxLength(50)]),
deliveryOrder: new FormControl('',[Validators.maxLength(30)]),
portOfDischarge: new FormControl('',[Validators.maxLength(50)]),
portOfLoading: new FormControl('',[Validators.maxLength(50)]),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
portMaster: new FormControl(''),
terminalMaster: new FormControl(''),
vessel: new FormControl('')})

/** FormGroup JobOrderLocationJobOrderSite */
export const JobOrderLocationJobOrderSiteForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
site: new FormControl('')})

/** FormGroup JobOrderLocationJobOrderOtherSite */
export const JobOrderLocationJobOrderOtherSiteForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
site: new FormControl(''),
category: new FormControl('')})

/** FormGroup JobOrderLocationJobOrderParkingLot */
export const JobOrderLocationJobOrderParkingLotForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
parkingLot: new FormControl('')})

/** FormGroup JobOrderLocationJobOrderDepot */
export const JobOrderLocationJobOrderDepotForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
offHireRef: new FormControl('',[Validators.maxLength(30)]),
pickUpRef: new FormControl('',[Validators.maxLength(50)]),
bookingRef: new FormControl('',[Validators.maxLength(50)]),
storingOrder: new FormControl('',[Validators.maxLength(30)]),
lastDay: new FormControl(''),
lastDayInformedOn: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
depotMaster: new FormControl('')})

/** FormGroup JobOrderLocation */
export const JobOrderLocationForm = new FormGroup({
id: new FormControl(''),
locationEstimatedDate: new FormControl(''),
port: new FormControl(''),
site: new FormControl(''),
otherSite: new FormControl(''),
parkingLot: new FormControl(''),
depot: new FormControl(''),
isShiftLocation: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
order: new FormControl(''),
locationType: new FormControl('',[Validators.required]),
objectId: new FormControl(''),
remarks: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
jobOrderTrip: new FormControl('',[Validators.required]),
journeySetting: new FormControl(''),
locationAction: new FormControl('')})

/** FormGroup JobOrderContainerDetails */
export const JobOrderContainerDetailsForm = new FormGroup({
id: new FormControl(''),
dangerousGoods: new FormControl('',[Validators.maxLength(25)]),
temperature: new FormControl(''),
grossWeight: new FormControl(''),
containerCondition: new FormControl('',[Validators.maxLength(50)]),
remarks: new FormControl('')})

/** FormGroup JobOrderContainerMaster */
export const JobOrderContainerMasterForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
containerNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(12)]),
tareWeight: new FormControl(''),
maxGrossWeight: new FormControl(''),
isValidated: new FormControl(false),
createdBy: new FormControl(''),
isoCodeMaster: new FormControl('',[Validators.required]),
isOwnedBy: new FormControl('')})

/** FormGroup JobOrderContainer */
export const JobOrderContainerForm = new FormGroup({
id: new FormControl(''),
containerDetail: new FormControl(''),
containerMaster: new FormControl(''),
cargoMaster: new FormControl('')})

/** FormGroup JobOrder */
export const JobOrderForm = new FormGroup({
id: new FormControl(''),
jobOrderLocations: new FormControl(''),
containers: new FormControl(''),
attachments: new FormControl(''),
organizationType: new FormControl(''),
jobOrderCode: new FormControl('',[Validators.minLength(1)]),
customerRef: new FormControl('',[Validators.maxLength(50)]),
remarks: new FormControl(''),
createdDate: new FormControl(''),
kivDate: new FormControl(''),
cancelledDate: new FormControl(''),
subleasedDate: new FormControl(''),
status: new FormControl(''),
genericOrganization: new FormControl(''),
jobType: new FormControl('',[Validators.required]),
purchaseOrder: new FormControl(''),
customer: new FormControl('')})

/** FormGroup JobOrderDepot */
export const JobOrderDepotForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
offHireRef: new FormControl('',[Validators.maxLength(30)]),
pickUpRef: new FormControl('',[Validators.maxLength(50)]),
bookingRef: new FormControl('',[Validators.maxLength(50)]),
storingOrder: new FormControl('',[Validators.maxLength(30)]),
lastDay: new FormControl(''),
lastDayInformedOn: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
depotMaster: new FormControl('')})

/** FormGroup GoodsPermit */
export const GoodsPermitForm = new FormGroup({
id: new FormControl(''),
value: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)]),
jobOrderPort: new FormControl('',[Validators.required])})

/** FormGroup JobOrderOtherSite */
export const JobOrderOtherSiteForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
site: new FormControl(''),
category: new FormControl('')})

/** FormGroup JobOrderParkingLot */
export const JobOrderParkingLotForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
parkingLot: new FormControl('')})

/** FormGroup JobOrderPort */
export const JobOrderPortForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
vesselStore: new FormControl('',[Validators.maxLength(60)]),
inOutVoyageStore: new FormControl('',[Validators.maxLength(10)]),
billOfLading: new FormControl('',[Validators.maxLength(30)]),
bookingRef: new FormControl('',[Validators.maxLength(50)]),
deliveryOrder: new FormControl('',[Validators.maxLength(30)]),
portOfDischarge: new FormControl('',[Validators.maxLength(50)]),
portOfLoading: new FormControl('',[Validators.maxLength(50)]),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
portMaster: new FormControl(''),
terminalMaster: new FormControl(''),
vessel: new FormControl('')})

/** FormGroup JobOrderSite */
export const JobOrderSiteForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
site: new FormControl('')})

/** FormGroup RevisionRequest */
export const RevisionRequestForm = new FormGroup({
id: new FormControl(''),
changes: new FormControl(''),
requestedAt: new FormControl(''),
acceptedAt: new FormControl(''),
rejectedAt: new FormControl(''),
objectId: new FormControl('',[Validators.required]),
requestedBy: new FormControl(''),
acceptedBy: new FormControl(''),
rejectedBy: new FormControl(''),
contentType: new FormControl('',[Validators.required])})

/** FormGroup JobOrderTrip */
export const JobOrderTripForm = new FormGroup({
id: new FormControl(''),
order: new FormControl(''),
jobOrderVersion: new FormControl('',[Validators.required]),
tripSetting: new FormControl('')})

/** FormGroup JobOrderVersionJobOrderLocation */
export const JobOrderVersionJobOrderLocationForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
order: new FormControl(''),
locationType: new FormControl('',[Validators.required]),
objectId: new FormControl(''),
remarks: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
journeySetting: new FormControl(''),
locationAction: new FormControl('')})

/** FormGroup JobOrderVersionJobOrderTrip */
export const JobOrderVersionJobOrderTripForm = new FormGroup({
id: new FormControl(''),
jobOrderLocations: new FormControl('',[Validators.required]),
order: new FormControl(''),
tripSetting: new FormControl('')})

/** FormGroup JobOrderVersion */
export const JobOrderVersionForm = new FormGroup({
id: new FormControl(''),
jobOrderTrips: new FormControl('',[Validators.required]),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
version: new FormControl('',[Validators.required,Validators.maxLength(75)]),
isActive: new FormControl(false),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
jobOrder: new FormControl('',[Validators.required])})

/** FormGroup JobCategoryJobType */
export const JobCategoryJobTypeForm = new FormGroup({
id: new FormControl(''),
jobTypeLabel: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(55)])})

/** FormGroup JobCategory */
export const JobCategoryForm = new FormGroup({
id: new FormControl(''),
jobTypes: new FormControl(''),
organizationType: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
genericOrganization: new FormControl('')})

/** FormGroup JobTypeJourneySetting */
export const JobTypeJourneySettingForm = new FormGroup({
id: new FormControl('',[Validators.required]),
order: new FormControl(''),
location: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(55)]),
locationAction: new FormControl('')})

/** FormGroup JobTypeTripSetting */
export const JobTypeTripSettingForm = new FormGroup({
id: new FormControl('',[Validators.required]),
journeySettings: new FormControl('',[Validators.required]),
name: new FormControl(''),
order: new FormControl('')})

/** FormGroup JobType */
export const JobTypeForm = new FormGroup({
id: new FormControl(''),
tripSettings: new FormControl(''),
jobTypeLabel: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(55)]),
jobCategory: new FormControl('',[Validators.required])})

/** FormGroup JourneySetting */
export const JourneySettingForm = new FormGroup({
id: new FormControl(''),
order: new FormControl(''),
location: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(55)]),
tripSetting: new FormControl('',[Validators.required]),
locationAction: new FormControl('')})

/** FormGroup LocationActionEvent */
export const LocationActionEventForm = new FormGroup({
id: new FormControl(''),
order: new FormControl(''),
eventType: new FormControl('',[Validators.required]),
locationAction: new FormControl('',[Validators.required])})

/** FormGroup LocationActionLocationActionEvent */
export const LocationActionLocationActionEventForm = new FormGroup({
id: new FormControl(''),
order: new FormControl(''),
eventType: new FormControl('',[Validators.required])})

/** FormGroup LocationAction */
export const LocationActionForm = new FormGroup({
id: new FormControl(''),
events: new FormControl(''),
organizationType: new FormControl(''),
actionName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(55)]),
description: new FormControl(''),
location: new FormControl('',[Validators.minLength(1),Validators.maxLength(55)]),
locationId: new FormControl(''),
genericOrganization: new FormControl('')})

/** FormGroup TripSetting */
export const TripSettingForm = new FormGroup({
id: new FormControl(''),
order: new FormControl(''),
jobType: new FormControl('',[Validators.required])})

/** FormGroup GenericConstruct */
export const GenericConstructForm = new FormGroup({
})

/** FormGroup Action */
export const ActionForm = new FormGroup({
id: new FormControl(''),
text: new FormControl(''),
actor: new FormControl(''),
verb: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(255)]),
actionObject: new FormControl(''),
target: new FormControl(''),
timestamp: new FormControl(''),
timestampHr: new FormControl(''),
timesince: new FormControl(''),
isRead: new FormControl('')})

/** FormGroup Follow */
export const FollowForm = new FormGroup({
started: new FormControl(''),
followObject: new FormControl('')})

/** FormGroup ContactInvite */
export const ContactInviteForm = new FormGroup({
id: new FormControl(''),
inviter: new FormControl('',[Validators.required]),
invitedBy: new FormControl(''),
invitee: new FormControl('',[Validators.required]),
isAccepted: new FormControl(false,[Validators.required]),
acceptedBy: new FormControl('')})

/** FormGroup CreateContactInvite */
export const CreateContactInviteForm = new FormGroup({
code: new FormControl('',[Validators.required,Validators.minLength(1)])})

/** FormGroup Permission */
export const PermissionForm = new FormGroup({
code: new FormControl(''),
description: new FormControl('')})

/** FormGroup Dcon */
export const DconForm = new FormGroup({
id: new FormControl(''),
previousContainerNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
instruction: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
creationDate: new FormControl(''),
inwardSlotOperator: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
discharge_Cell: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
portOfLoading: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
intergateway: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
outwardSlotOperator: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
loadCell: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
portOfDischarge1: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
portOfDischarge2: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
portOfDischarge3: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
portOfDestination: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
containerOperator: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
containerStatus: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
containerWeight: new FormControl('',[Validators.required]),
declaredTemp: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
cargoDescription: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(200)]),
containerLength: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
containerHeight: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
containerType: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
isoSizeType: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
vgmDeclared: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
vgmSigningPerson: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
vgmReferenceNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
vgmWeighingMethod: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
vgmAcquiredTime: new FormControl(''),
pm4Declared: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
pm4Status: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
imoClass: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
psaGroup: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
overHeight: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
overWidthRight: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
overLengthFront: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
overLengthBack: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
ucLength: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
ucWidth: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
ucHeight: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
abpDeclared: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
supplementaryTli: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
specialDetails: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
landReshipOrShift: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
chargeable: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
batchNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
transhipment: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
connection_Status: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
reExport: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
ucr: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
sealNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
loloAccount: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
depotServices: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
pti: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
cfs: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
containerCondition: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
yardLocation: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
remarks: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(100)]),
discTime: new FormControl(''),
discDetails: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(100)]),
moveTime: new FormControl(''),
moveDetails: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(100)]),
gateOut_Time: new FormControl(''),
gate_Out_Details: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(100)]),
gateInTime: new FormControl(''),
gateInDetails: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(100)]),
loadTime: new FormControl(''),
loadDetails: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(100)]),
xrayTime: new FormControl(''),
xrayDetails: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(100)]),
nominationLoader: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(100)]),
nominationTime: new FormControl(''),
vip: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
billOfLading: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
declaredAirVent: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
declaredHumidity: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
operationalRemarks: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(100)]),
overWidthLeft: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
dischargerVeda: new FormControl(''),
loaderVeda: new FormControl(''),
dischargerVedaBerthing: new FormControl(''),
loaderVedaBerthing: new FormControl(''),
container: new FormControl(''),
containerMaster: new FormControl('')})

/** FormGroup Veda */
export const VedaForm = new FormGroup({
id: new FormControl(''),
vessel: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
abbrVessel: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
inVoy: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)]),
outVoy: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)]),
inAbbrVoy: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(20)]),
outAbbrVoy: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(20)]),
vesselOperator: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
psaServiceCode: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
psaServiceDescription: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
customerServiceCode: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
customerServiceDescription: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
vesselId: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
imoNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
callSign: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
loa: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
wharfsideIndicator: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
status: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
consortium: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
member: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(1000)]),
source: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)])})

/** FormGroup ContainerMaster */
export const ContainerMasterForm = new FormGroup({
id: new FormControl(''),
createdDate: new FormControl(''),
containerNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(12)]),
tareWeight: new FormControl(''),
maxGrossWeight: new FormControl(''),
createdBy: new FormControl(''),
isoCodeMaster: new FormControl('',[Validators.required]),
isOwnedBy: new FormControl('')})

/** FormGroup Dpre */
export const DpreForm = new FormGroup({
id: new FormControl(''),
veda: new FormControl('',[Validators.required]),
containerMaster: new FormControl('',[Validators.required]),
authNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
billOfLading: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
discharge: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
containerOperator: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
dangerousGoods: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
deliveryStatus: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
deliveryCancel: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
loloAccount: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
subletCancel: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
subletRelease: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
reasonCategory: new FormControl(''),
reason: new FormControl('',[Validators.minLength(1),Validators.maxLength(250)]),
isActive: new FormControl(false),
container: new FormControl('')})

/** FormGroup Hte */
export const HteForm = new FormGroup({
id: new FormControl(''),
veda: new FormControl('',[Validators.required]),
containerMaster: new FormControl('',[Validators.required]),
source: new FormControl('',[Validators.minLength(1)]),
eventTime: new FormControl(''),
arriveExitTime: new FormControl(''),
containerOperator: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
containerStatus: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
weight: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
condition: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
cargoRefNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
sealNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
driver: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
pmNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
psaPass: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
customLane: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
lolo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
isActive: new FormControl(false),
container: new FormControl('')})

/** FormGroup Scda */
export const ScdaForm = new FormGroup({
id: new FormControl(''),
veda: new FormControl('',[Validators.required]),
closingTimeArrival: new FormControl(''),
closingTimeDoc: new FormControl(''),
berthingTime: new FormControl(''),
size: new FormControl('',[Validators.minLength(1),Validators.maxLength(25)]),
pregateDateTime: new FormControl(''),
vehicleNo: new FormControl('',[Validators.minLength(1),Validators.maxLength(25)]),
container: new FormControl(''),
containerMaster: new FormControl('')})

/** FormGroup PurchaseOrderPort */
export const PurchaseOrderPortForm = new FormGroup({
id: new FormControl(''),
vesselStore: new FormControl('',[Validators.maxLength(60)]),
inOutVoyageStore: new FormControl('',[Validators.maxLength(10)]),
billOfLading: new FormControl('',[Validators.maxLength(30)]),
bookingRef: new FormControl('',[Validators.maxLength(50)]),
deliveryOrder: new FormControl('',[Validators.maxLength(30)]),
portOfDischarge: new FormControl('',[Validators.maxLength(50)]),
portOfLoading: new FormControl('',[Validators.maxLength(50)]),
portMaster: new FormControl(''),
vessel: new FormControl('')})

/** FormGroup PurchaseOrderSite */
export const PurchaseOrderSiteForm = new FormGroup({
id: new FormControl(''),
site: new FormControl('')})

/** FormGroup PurchaseOrderOtherSite */
export const PurchaseOrderOtherSiteForm = new FormGroup({
id: new FormControl(''),
site: new FormControl(''),
category: new FormControl('')})

/** FormGroup PurchaseOrderParkingLot */
export const PurchaseOrderParkingLotForm = new FormGroup({
id: new FormControl(''),
parkingLot: new FormControl('')})

/** FormGroup PurchaseOrderDepot */
export const PurchaseOrderDepotForm = new FormGroup({
id: new FormControl(''),
offHireRef: new FormControl('',[Validators.maxLength(30)]),
pickUpRef: new FormControl('',[Validators.maxLength(50)]),
bookingRef: new FormControl('',[Validators.maxLength(50)]),
storingOrder: new FormControl('',[Validators.maxLength(30)]),
lastDay: new FormControl(''),
lastDayInformedOn: new FormControl(''),
depotMaster: new FormControl('')})

/** FormGroup PurchaseOrderItemLocation */
export const PurchaseOrderItemLocationForm = new FormGroup({
id: new FormControl(''),
port: new FormControl(''),
site: new FormControl(''),
otherSite: new FormControl(''),
parkingLot: new FormControl(''),
depot: new FormControl(''),
locationType: new FormControl('',[Validators.required]),
locationId: new FormControl(''),
remarks: new FormControl(''),
belongsTo: new FormControl('',[Validators.required])})

/** FormGroup PurchaseOrderItem */
export const PurchaseOrderItemForm = new FormGroup({
id: new FormControl(''),
actualPrice: new FormControl('',[Validators.required]),
deliveryDate: new FormControl(''),
description: new FormControl('',[Validators.maxLength(75)]),
remarks: new FormControl(''),
purchaseOrder: new FormControl('',[Validators.required]),
salesCode: new FormControl(''),
itemInvoiceCode: new FormControl('',[Validators.required]),
item: new FormControl('',[Validators.required]),
gstRate: new FormControl('',[Validators.required]),
containerMaster: new FormControl('')})

/** FormGroup PurchaseOrderPurchaseOrderItem */
export const PurchaseOrderPurchaseOrderItemForm = new FormGroup({
id: new FormControl(''),
actualPrice: new FormControl('',[Validators.required]),
deliveryDate: new FormControl(''),
description: new FormControl('',[Validators.maxLength(75)]),
remarks: new FormControl(''),
salesCode: new FormControl(''),
itemInvoiceCode: new FormControl('',[Validators.required]),
item: new FormControl('',[Validators.required]),
gstRate: new FormControl('',[Validators.required]),
containerMaster: new FormControl('')})

/** FormGroup SalesCodeQuantity */
export const SalesCodeQuantityForm = new FormGroup({
salesCode: new FormControl('',[Validators.required]),
quantity: new FormControl('',[Validators.required])})

/** FormGroup PurchaseOrderQuantity */
export const PurchaseOrderQuantityForm = new FormGroup({
id: new FormControl(''),
purchaseOrderNumber: new FormControl('',[Validators.minLength(1)]),
purchaseContract: new FormControl(''),
status: new FormControl(''),
startContractDate: new FormControl(''),
endContractDate: new FormControl(''),
bufferTime: new FormControl(''),
remarks: new FormControl('',[Validators.minLength(1)]),
isActive: new FormControl(false),
purchaseOrderItems: new FormControl(''),
purchaseOrderQuantities: new FormControl('',[Validators.required])})

/** FormGroup UserGeneral */
export const UserGeneralForm = new FormGroup({
id: new FormControl(''),
username: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(150)]),
email: new FormControl('',[Validators.email,Validators.maxLength(254)]),
firstName: new FormControl('',[Validators.maxLength(30)]),
lastName: new FormControl('',[Validators.maxLength(150)])})

/** FormGroup PurchaseOrder */
export const PurchaseOrderForm = new FormGroup({
id: new FormControl(''),
purchaseOrderNumber: new FormControl('',[Validators.minLength(1)]),
purchaseOrderItems: new FormControl('',[Validators.required]),
acceptedBy: new FormControl(''),
rejectedBy: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
organizationType: new FormControl(''),
status: new FormControl(''),
purchaseContract: new FormControl(''),
startContractDate: new FormControl(''),
endContractDate: new FormControl(''),
bufferTime: new FormControl(''),
remarks: new FormControl(''),
isActive: new FormControl(false),
acceptedDate: new FormControl(''),
rejectedDate: new FormControl(''),
contractCycleInDays: new FormControl(''),
modeOfPayment: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(55)]),
paymentTerms: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
genericOrganization: new FormControl('')})

/** FormGroup QuotationContractPort */
export const QuotationContractPortForm = new FormGroup({
id: new FormControl(''),
vesselStore: new FormControl('',[Validators.maxLength(60)]),
inOutVoyageStore: new FormControl('',[Validators.maxLength(10)]),
billOfLading: new FormControl('',[Validators.maxLength(30)]),
bookingRef: new FormControl('',[Validators.maxLength(50)]),
deliveryOrder: new FormControl('',[Validators.maxLength(30)]),
portOfDischarge: new FormControl('',[Validators.maxLength(50)]),
portOfLoading: new FormControl('',[Validators.maxLength(50)]),
portMaster: new FormControl(''),
vessel: new FormControl('')})

/** FormGroup QuotationContractSite */
export const QuotationContractSiteForm = new FormGroup({
id: new FormControl(''),
site: new FormControl('')})

/** FormGroup QuotationContractOtherSite */
export const QuotationContractOtherSiteForm = new FormGroup({
id: new FormControl(''),
site: new FormControl(''),
category: new FormControl('')})

/** FormGroup QuotationContractParkingLot */
export const QuotationContractParkingLotForm = new FormGroup({
id: new FormControl(''),
parkingLot: new FormControl('')})

/** FormGroup QuotationContractDepot */
export const QuotationContractDepotForm = new FormGroup({
id: new FormControl(''),
offHireRef: new FormControl('',[Validators.maxLength(30)]),
pickUpRef: new FormControl('',[Validators.maxLength(50)]),
bookingRef: new FormControl('',[Validators.maxLength(50)]),
storingOrder: new FormControl('',[Validators.maxLength(30)]),
lastDay: new FormControl(''),
lastDayInformedOn: new FormControl(''),
depotMaster: new FormControl('')})

/** FormGroup QuotationContractItemLocation */
export const QuotationContractItemLocationForm = new FormGroup({
id: new FormControl(''),
port: new FormControl(''),
site: new FormControl(''),
otherSite: new FormControl(''),
parkingLot: new FormControl(''),
depot: new FormControl(''),
locationType: new FormControl('',[Validators.required]),
remarks: new FormControl(''),
quotationContractItem: new FormControl('',[Validators.required])})

/** FormGroup QuotationContractItem */
export const QuotationContractItemForm = new FormGroup({
id: new FormControl(''),
quantity: new FormControl('',[Validators.required]),
deliveryDate: new FormControl(''),
description: new FormControl(''),
quotationContract: new FormControl('',[Validators.required]),
billingUnit: new FormControl('',[Validators.required]),
isoCode: new FormControl(''),
containerNumber: new FormControl('')})

/** FormGroup QuotationContractQuotationContractItem */
export const QuotationContractQuotationContractItemForm = new FormGroup({
id: new FormControl(''),
deliveryDate: new FormControl(''),
description: new FormControl(''),
quotationContract: new FormControl('',[Validators.required]),
billingUnit: new FormControl('',[Validators.required]),
isoCode: new FormControl(''),
containerNumber: new FormControl('')})

/** FormGroup QuotationContract */
export const QuotationContractForm = new FormGroup({
id: new FormControl(''),
quotationContractItems: new FormControl(''),
quotationContractLocationItems: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
quotationContractNumber: new FormControl('',[Validators.maxLength(35)]),
startContractDate: new FormControl('',[Validators.required]),
endContractDate: new FormControl('',[Validators.required]),
isActive: new FormControl(false),
remarks: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
customer: new FormControl('',[Validators.required])})

/** FormGroup QuotationItem */
export const QuotationItemForm = new FormGroup({
id: new FormControl(''),
setPrice: new FormControl(''),
remarks: new FormControl(''),
quotation: new FormControl('',[Validators.required]),
quotationContract: new FormControl(''),
quotationContractItem: new FormControl('',[Validators.required]),
salesCode: new FormControl('',[Validators.required]),
gstRate: new FormControl('',[Validators.required])})

/** FormGroup Version */
export const VersionForm = new FormGroup({
id: new FormControl(''),
serializedData: new FormControl(''),
objectId: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(191)]),
db: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(191)]),
format: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(255)]),
objectRepr: new FormControl('',[Validators.required,Validators.minLength(1)]),
revision: new FormControl(''),
contentType: new FormControl('')})

/** FormGroup Quotation */
export const QuotationForm = new FormGroup({
id: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
acceptedBy: new FormControl(''),
withdrawnBy: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
quotationNumber: new FormControl('',[Validators.maxLength(35)]),
isActive: new FormControl(false),
acceptedOn: new FormControl(''),
withdrawnOn: new FormControl(''),
quotationContract: new FormControl('',[Validators.required]),
haulier: new FormControl('',[Validators.required])})

/** FormGroup BillingUnitMaster */
export const BillingUnitMasterForm = new FormGroup({
id: new FormControl(''),
unitName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
unitSymbol: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(10)]),
hasLocationSetting: new FormControl(false),
isSystemDefault: new FormControl(false)})

/** FormGroup GoodsAndServicesTax */
export const GoodsAndServicesTaxForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
description: new FormControl(''),
salesRate: new FormControl('',[Validators.required]),
purchaseRate: new FormControl('',[Validators.required])})

/** FormGroup HaulierBillingUnitBillingUnit */
export const HaulierBillingUnitBillingUnitForm = new FormGroup({
id: new FormControl(''),
unitName: new FormControl('',[Validators.minLength(1)]),
unitSymbol: new FormControl('',[Validators.minLength(1)]),
hasLocationSetting: new FormControl(false)})

/** FormGroup HaulierBillingUnit */
export const HaulierBillingUnitForm = new FormGroup({
id: new FormControl(''),
billingUnitMaster: new FormControl('',[Validators.required]),
haulier: new FormControl('',[Validators.required])})

/** FormGroup InvoiceCode */
export const InvoiceCodeForm = new FormGroup({
id: new FormControl(''),
invoiceCodeType: new FormControl('',[Validators.required]),
code: new FormControl('',[Validators.maxLength(55)]),
description: new FormControl(''),
unitPrice: new FormControl('',[Validators.required]),
haulier: new FormControl(''),
haulierBillingUnit: new FormControl('',[Validators.required])})

/** FormGroup ItemCategory */
export const ItemCategoryForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(55)])})

/** FormGroup ItemInvoiceCodePriceLog */
export const ItemInvoiceCodePriceLogForm = new FormGroup({
id: new FormControl(''),
price: new FormControl('',[Validators.required]),
dateOfChange: new FormControl(''),
itemInvoiceCode: new FormControl('',[Validators.required])})

/** FormGroup ItemInvoiceCode */
export const ItemInvoiceCodeForm = new FormGroup({
id: new FormControl(''),
code: new FormControl('',[Validators.maxLength(55)]),
description: new FormControl(''),
unitPrice: new FormControl('',[Validators.required]),
genericOrganization: new FormControl('',[Validators.required]),
gstRate: new FormControl('',[Validators.required]),
item: new FormControl('',[Validators.required])})

/** FormGroup ItemMasterArea */
export const ItemMasterAreaForm = new FormGroup({
id: new FormControl(''),
itemMaster: new FormControl('',[Validators.required]),
areaCode: new FormControl('',[Validators.required])})

/** FormGroup ItemMasterISO */
export const ItemMasterISOForm = new FormGroup({
id: new FormControl(''),
itemMaster: new FormControl('',[Validators.required]),
isoCode: new FormControl('',[Validators.required])})

/** FormGroup ItemMaster */
export const ItemMasterForm = new FormGroup({
id: new FormControl(''),
organizationType: new FormControl(''),
itemCode: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
itemDescription: new FormControl(''),
itemSymbol: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(10)]),
isSystemDefault: new FormControl(false),
genericOrganization: new FormControl(''),
itemCategory: new FormControl('',[Validators.required])})

/** FormGroup PricingGroup */
export const PricingGroupForm = new FormGroup({
id: new FormControl(''),
groupName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(32)])})

/** FormGroup SalesCodeISOList */
export const SalesCodeISOListForm = new FormGroup({
id: new FormControl(''),
salesCode: new FormControl('',[Validators.required]),
isoCode: new FormControl('',[Validators.required])})

/** FormGroup SalesCode */
export const SalesCodeForm = new FormGroup({
id: new FormControl(''),
defaultUnitPrice: new FormControl(''),
salesIsoCodes: new FormControl(''),
code: new FormControl('',[Validators.maxLength(55)]),
description: new FormControl(''),
locationRequired: new FormControl(false),
unit: new FormControl('',[Validators.required]),
jobType: new FormControl('')})

/** FormGroup SalesInvoiceCode */
export const SalesInvoiceCodeForm = new FormGroup({
id: new FormControl(''),
salesCode: new FormControl('',[Validators.required]),
invoiceCode: new FormControl('',[Validators.required])})

/** FormGroup ContainerOperator */
export const ContainerOperatorForm = new FormGroup({
id: new FormControl(''),
fullname: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)]),
psaCode: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(10)]),
depot: new FormControl('',[Validators.required])})

/** FormGroup ISOCodeMaster */
export const ISOCodeMasterForm = new FormGroup({
id: new FormControl(''),
isoSizeType: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(15)]),
isoTypeGeneric: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(15)]),
typeDescription: new FormControl('',[Validators.required,Validators.minLength(1)]),
lengthInInches: new FormControl('',[Validators.required]),
heightInInches: new FormControl('',[Validators.required]),
widthInInches: new FormControl('',[Validators.required])})

/** FormGroup DepotOfficeNumber */
export const DepotOfficeNumberForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
officeNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(12)]),
department: new FormControl('',[Validators.required])})

/** FormGroup DepotFaxNumber */
export const DepotFaxNumberForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
faxNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(15)]),
department: new FormControl('',[Validators.required])})

/** FormGroup DepotEmail */
export const DepotEmailForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
email: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
department: new FormControl('',[Validators.required])})

/** FormGroup DepotContactDetails */
export const DepotContactDetailsForm = new FormGroup({
id: new FormControl(''),
officeNumber: new FormControl(''),
faxNumber: new FormControl(''),
email: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)]),
psaCode: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(20)]),
cmsCode: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(20)]),
dhc: new FormControl('',[Validators.required]),
inputSource: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
addressMaster: new FormControl('',[Validators.required]),
depotGroupMaster: new FormControl('')})

/** FormGroup DepotGroupMaster */
export const DepotGroupMasterForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(100)])})

/** FormGroup DepotMasterAddressMaster */
export const DepotMasterAddressMasterForm = new FormGroup({
googleMapId: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
address: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)])})

/** FormGroup DepotMaster */
export const DepotMasterForm = new FormGroup({
id: new FormControl(''),
addressMaster: new FormControl('',[Validators.required]),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)]),
psaCode: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(20)]),
cmsCode: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(20)]),
dhc: new FormControl('',[Validators.required]),
inputSource: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
depotGroupMaster: new FormControl('')})

/** FormGroup DepotOpenHour */
export const DepotOpenHourForm = new FormGroup({
id: new FormControl(''),
depot: new FormControl('',[Validators.required]),
timeStartWeekday: new FormControl('',[Validators.required]),
timeStartHour: new FormControl('',[Validators.required]),
timeEndWeekday: new FormControl('',[Validators.required]),
timeEndHour: new FormControl('',[Validators.required])})

/** FormGroup ImcoDgClassMaster */
export const ImcoDgClassMasterForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
description: new FormControl('',[Validators.maxLength(255)]),
imageUrl: new FormControl('',[Validators.maxLength(255)])})

/** FormGroup PortDgClassMaster */
export const PortDgClassMasterForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
description: new FormControl('',[Validators.maxLength(255)]),
imageUrl: new FormControl('',[Validators.maxLength(255)]),
portMaster: new FormControl('',[Validators.required])})

/** FormGroup PortDepartmentEmail */
export const PortDepartmentEmailForm = new FormGroup({
email: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)])})

/** FormGroup PortDepartmentFaxNumber */
export const PortDepartmentFaxNumberForm = new FormGroup({
faxNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(15)])})

/** FormGroup PortDepartmentOfficeNumber */
export const PortDepartmentOfficeNumberForm = new FormGroup({
officeNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(12)])})

/** FormGroup PortDepartment */
export const PortDepartmentForm = new FormGroup({
id: new FormControl(''),
officeNumber: new FormControl(''),
faxNumber: new FormControl(''),
email: new FormControl(''),
name: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
port: new FormControl('',[Validators.required]),
operations: new FormControl('',[Validators.required])})

/** FormGroup PortMaster */
export const PortMasterForm = new FormGroup({
id: new FormControl(''),
portName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(100)]),
website: new FormControl('',[Validators.maxLength(100)])})

/** FormGroup ShippingLine */
export const ShippingLineForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(30)]),
psaCode: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(10)]),
inputSource: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)])})

/** FormGroup TerminalDepartmentEmail */
export const TerminalDepartmentEmailForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
email: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(60)]),
department: new FormControl('',[Validators.required])})

/** FormGroup TerminalDepartmentFaxNumber */
export const TerminalDepartmentFaxNumberForm = new FormGroup({
faxNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(15)])})

/** FormGroup TerminalDepartmentOfficeNumber */
export const TerminalDepartmentOfficeNumberForm = new FormGroup({
officeNumber: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(12)])})

/** FormGroup TerminalDepartment */
export const TerminalDepartmentForm = new FormGroup({
id: new FormControl(''),
officeNumber: new FormControl(''),
faxNumber: new FormControl(''),
email: new FormControl(''),
name: new FormControl('',[Validators.minLength(1),Validators.maxLength(50)]),
terminal: new FormControl('',[Validators.required]),
operations: new FormControl('',[Validators.required])})

/** FormGroup TerminalMaster */
export const TerminalMasterForm = new FormGroup({
id: new FormControl(''),
terminalName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
inputSource: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
addressMaster: new FormControl('',[Validators.required]),
portMaster: new FormControl('',[Validators.required])})

/** FormGroup TerminalOpenHour */
export const TerminalOpenHourForm = new FormGroup({
id: new FormControl(''),
terminal: new FormControl('',[Validators.required]),
timeStartWeekday: new FormControl('',[Validators.required]),
timeStartHour: new FormControl('',[Validators.required]),
timeEndWeekday: new FormControl('',[Validators.required]),
timeEndHour: new FormControl('',[Validators.required])})

/** FormGroup PortTerminalOperationsMaster */
export const PortTerminalOperationsMasterForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
description: new FormControl('')})

/** FormGroup VedaBerthing */
export const VedaBerthingForm = new FormGroup({
id: new FormControl(''),
requiredBerthTime: new FormControl(''),
estimatedBerthTime: new FormControl(''),
actualBerthTime: new FormControl(''),
requiredUnberthTime: new FormControl(''),
estimatedUnberthTime: new FormControl(''),
actualUnberthTime: new FormControl(''),
completionOfDischarge: new FormControl(''),
completionOfLoad: new FormControl(''),
completionOfBunkering: new FormControl(''),
firstActivity: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
lastActivity: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
importFreeStoreRent: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
berthNo: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
wharfmark: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
crane: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(25)]),
source: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
veda: new FormControl('',[Validators.required])})

/** FormGroup VehicleType */
export const VehicleTypeForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)])})

/** FormGroup PurchaseOrderStandingOrder */
export const PurchaseOrderStandingOrderForm = new FormGroup({
id: new FormControl(''),
purchaseOrderNumber: new FormControl('',[Validators.minLength(1)]),
purchaseContract: new FormControl(''),
status: new FormControl(''),
startContractDate: new FormControl(''),
endContractDate: new FormControl(''),
bufferTime: new FormControl(''),
remarks: new FormControl('',[Validators.minLength(1)]),
isActive: new FormControl(false),
purchaseOrderItems: new FormControl('')})

/** FormGroup StandingOrderContract */
export const StandingOrderContractForm = new FormGroup({
id: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
standingOrderContractNumber: new FormControl('',[Validators.maxLength(35)]),
bufferTime: new FormControl(''),
startContractDate: new FormControl('',[Validators.required]),
endContractDate: new FormControl('',[Validators.required]),
remarks: new FormControl(''),
isActive: new FormControl(false),
modeOfPayment: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(55)]),
paymentTerms: new FormControl(''),
organization: new FormControl(''),
standingOrderTemplate: new FormControl('',[Validators.required]),
organizations: new FormControl('',[Validators.required])})

/** FormGroup StandingOrderTemplateItemInvoiceLine */
export const StandingOrderTemplateItemInvoiceLineForm = new FormGroup({
id: new FormControl(''),
templatePrice: new FormControl('',[Validators.required]),
remarks: new FormControl(''),
invoiceCode: new FormControl('',[Validators.required])})

/** FormGroup StandingOrderTemplateItem */
export const StandingOrderTemplateItemForm = new FormGroup({
id: new FormControl(''),
standingOrderTemplateItemInvoiceLines: new FormControl(''),
setPrice: new FormControl('',[Validators.required]),
salesCode: new FormControl('',[Validators.required]),
gstRate: new FormControl('',[Validators.required])})

/** FormGroup StandingOrderTemplate */
export const StandingOrderTemplateForm = new FormGroup({
id: new FormControl(''),
standingOrderItems: new FormControl('',[Validators.required]),
name: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(55)]),
description: new FormControl(''),
genericOrganization: new FormControl('',[Validators.required])})

/** FormGroup EventActual */
export const EventActualForm = new FormGroup({
id: new FormControl(''),
eventType: new FormControl('',[Validators.required]),
detail: new FormControl(''),
occurredTime: new FormControl(''),
journeyActual: new FormControl('')})

/** FormGroup TripActual */
export const TripActualForm = new FormGroup({
id: new FormControl(''),
tripPlan: new FormControl('',[Validators.required])})

/** FormGroup EventDefaultDuration */
export const EventDefaultDurationForm = new FormGroup({
eventType: new FormControl('',[Validators.required]),
duration: new FormControl(''),
remarks: new FormControl('')})

/** FormGroup EventLocationAction */
export const EventLocationActionForm = new FormGroup({
id: new FormControl(''),
order: new FormControl(''),
eventType: new FormControl('',[Validators.required]),
locationAction: new FormControl('',[Validators.required])})

/** FormGroup EventPlan */
export const EventPlanForm = new FormGroup({
id: new FormControl(''),
eventTypeLabel: new FormControl(''),
eventType: new FormControl('',[Validators.required]),
detail: new FormControl(''),
plannedStartTime: new FormControl('',[Validators.required]),
estimatedDuration: new FormControl('',[Validators.required]),
journeyPlan: new FormControl('')})

/** FormGroup TemplatePlanName */
export const TemplatePlanNameForm = new FormGroup({
id: new FormControl(''),
name: new FormControl('',[Validators.maxLength(50)])})

/** FormGroup TemplatePlan */
export const TemplatePlanForm = new FormGroup({
id: new FormControl(''),
createdBy: new FormControl(''),
updatedBy: new FormControl(''),
templatePlanName: new FormControl('',[Validators.required]),
createdDate: new FormControl(''),
updatedDate: new FormControl(''),
isActive: new FormControl(false),
jobOrder: new FormControl('',[Validators.required])})

/** FormGroup TripPlanEventPlan */
export const TripPlanEventPlanForm = new FormGroup({
id: new FormControl(''),
plannedEndTime: new FormControl(''),
eventType: new FormControl('',[Validators.required]),
detail: new FormControl(''),
plannedStartTime: new FormControl('',[Validators.required]),
estimatedDuration: new FormControl('',[Validators.required])})

/** FormGroup TripPlanJourneyPlan */
export const TripPlanJourneyPlanForm = new FormGroup({
id: new FormControl(''),
eventPlans: new FormControl(''),
journeyActual: new FormControl(''),
journeyName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
containerLocation: new FormControl('',[Validators.required]),
driver: new FormControl('')})

/** FormGroup TripPlan */
export const TripPlanForm = new FormGroup({
id: new FormControl(''),
journeyPlans: new FormControl(''),
tripActual: new FormControl(''),
container: new FormControl(''),
tripName: new FormControl('',[Validators.required,Validators.minLength(1),Validators.maxLength(50)]),
isDone: new FormControl(false),
templatePlan: new FormControl(''),
containerTrip: new FormControl('',[Validators.required]),
vehicle: new FormControl('')})


export class Accounts{
 
/*** summary: Calls Django Auth SetPasswordForm save method.* description: Accepts the following POST parameters: new_password1, new_password2
Returns the success/fail message.
* @data
* newPassword1: string
* newPassword2: string
* method: post, responses: 201 ,model: PasswordChange */
static password_change_create(data:PasswordChange){return j2t.o('post','/accounts/password/change/',data)}

/*** summary: Calls Django Auth PasswordResetForm save method.* description: Accepts the following POST parameters: email
Returns the success/fail message.
* @data
* email: string [format: email ]
* method: post, responses: 201 ,model: PasswordReset */
static password_reset_create(data:PasswordReset){return j2t.o('post','/accounts/password/reset/',data)}

/*** summary: Password reset e-mail link is confirmed, therefore
this resets the user's password.* description: Accepts the following POST parameters: token, uid,
    new_password1, new_password2
Returns the success/fail message.
* @data
* newPassword1: string
* newPassword2: string
* uid: string
* token: string
* method: post, responses: 201 ,model: PasswordResetConfirm */
static password_reset_confirm_create(data:PasswordResetConfirm){return j2t.o('post','/accounts/password/reset/confirm/',data)}

/**
* @data
* organization: Organization
* user: RegistrationUser
* method: post, responses: 201 ,model: Registration */
static registration_create(data:Registration){return j2t.o('post','/accounts/registration/',data)}

/**
* @data
* key: string
* method: post, responses: 201 ,model: VerifyEmail */
static registration_verify_email_create(data:VerifyEmail){return j2t.o('post','/accounts/registration/verify-email/',data)}

/**
* @data
* organization: Organization
* user: RegistrationUser
* method: post, responses: 201 ,model: Registration */
static resend_verify_email_create(data:Registration){return j2t.o('post','/accounts/resend-verify-email/',data)}

/*** description: Takes a set of user credentials and returns an access and refresh JSON web
token pair to prove the authentication of those credentials.
* @data
* username: string
* password: string
* method: post, responses: 201 ,model: TokenObtainPair */
static token_create(data:TokenObtainPair){return j2t.o('post','/accounts/token/',data)}

/*** description: Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
* @data
* refresh: string
* method: post, responses: 201 ,model: TokenRefresh */
static token_refresh_create(data:TokenRefresh){return j2t.o('post','/accounts/token/refresh/',data)}

/*** summary: Reads and updates UserModel fields
Accepts GET, PUT, PATCH methods.* description: Default accepted fields: username, first_name, last_name
Default display fields: pk, username, email, first_name, last_name
Read-only fields: pk, email

Returns UserModel fields.
* @data
* method: get, responses: 200 */
static user_read(){return j2t.o('get','/accounts/user/')}

/*** summary: Reads and updates UserModel fields
Accepts GET, PUT, PATCH methods.* description: Default accepted fields: username, first_name, last_name
Default display fields: pk, username, email, first_name, last_name
Read-only fields: pk, email

Returns UserModel fields.
* @data
* readonly username?: string
* readonly email?: string [format: email ]
* readonly displayName?: string
* firstName: string
* lastName: string
* profile: UserProfile
* readonly organizations?: string
* method: put, responses: 200 ,model: UserDetail */
static user_update(data:UserDetail){return j2t.o('put','/accounts/user/',data)}

/*** summary: Reads and updates UserModel fields
Accepts GET, PUT, PATCH methods.* description: Default accepted fields: username, first_name, last_name
Default display fields: pk, username, email, first_name, last_name
Read-only fields: pk, email

Returns UserModel fields.
* @data
* readonly username?: string
* readonly email?: string [format: email ]
* readonly displayName?: string
* firstName: string
* lastName: string
* profile: UserProfile
* readonly organizations?: string
* method: patch, responses: 200 ,model: UserDetail */
static user_partial_update(data:UserDetail){return j2t.o('patch','/accounts/user/',data)}
}

export class Billing{
 
/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static export_config_list(extra:any){return j2t.o('get','/billing/export-config/',null,extra)}

/**
* @data
* readonly id?: number
* configName: string
* method: post, responses: 201 ,model: ExportConfig */
static export_config_create(data:ExportConfig){return j2t.o('post','/billing/export-config/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this export config.]
* method: get, responses: 200 */
static export_config_read(extra:any){return j2t.o('get','/billing/export-config/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this export config.]
* method: put, responses: 200 */
static export_config_update(extra:any){return j2t.o('put','/billing/export-config/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this export config.]
* method: patch, responses: 200 */
static export_config_partial_update(extra:any){return j2t.o('patch','/billing/export-config/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this export config.]
* method: delete, responses: 204 */
static export_config_delete(extra:any){return j2t.o('delete','/billing/export-config/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static invoice_condition_list(extra:any){return j2t.o('get','/billing/invoice-condition/',null,extra)}

/**
* @data
* readonly id?: number
* conditionName: string
* method: post, responses: 201 ,model: InvoiceCondition */
static invoice_condition_create(data:InvoiceCondition){return j2t.o('post','/billing/invoice-condition/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice condition.]
* method: get, responses: 200 */
static invoice_condition_read(extra:any){return j2t.o('get','/billing/invoice-condition/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice condition.]
* method: put, responses: 200 */
static invoice_condition_update(extra:any){return j2t.o('put','/billing/invoice-condition/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice condition.]
* method: patch, responses: 200 */
static invoice_condition_partial_update(extra:any){return j2t.o('patch','/billing/invoice-condition/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice condition.]
* method: delete, responses: 204 */
static invoice_condition_delete(extra:any){return j2t.o('delete','/billing/invoice-condition/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static invoice_flag_list(extra:any){return j2t.o('get','/billing/invoice-flag/',null,extra)}

/**
* @data
* readonly id?: number
* remarks: string
* invoice: number
* method: post, responses: 201 ,model: InvoiceFlag */
static invoice_flag_create(data:InvoiceFlag){return j2t.o('post','/billing/invoice-flag/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice flag.]
* method: get, responses: 200 */
static invoice_flag_read(extra:any){return j2t.o('get','/billing/invoice-flag/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice flag.]
* method: put, responses: 200 */
static invoice_flag_update(extra:any){return j2t.o('put','/billing/invoice-flag/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice flag.]
* method: patch, responses: 200 */
static invoice_flag_partial_update(extra:any){return j2t.o('patch','/billing/invoice-flag/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice flag.]
* method: delete, responses: 204 */
static invoice_flag_delete(extra:any){return j2t.o('delete','/billing/invoice-flag/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static invoice_list(extra:any){return j2t.o('get','/billing/invoice/',null,extra)}

/**
* @data
* readonly id?: number
* invoiceName: string
* status: string
* method: post, responses: 201 ,model: Invoice */
static invoice_create(data:Invoice){return j2t.o('post','/billing/invoice/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice.]
* method: get, responses: 200 */
static invoice_read(extra:any){return j2t.o('get','/billing/invoice/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice.]
* method: put, responses: 200 */
static invoice_update(extra:any){return j2t.o('put','/billing/invoice/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice.]
* method: patch, responses: 200 */
static invoice_partial_update(extra:any){return j2t.o('patch','/billing/invoice/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice.]
* method: delete, responses: 204 */
static invoice_delete(extra:any){return j2t.o('delete','/billing/invoice/{id}/',null,extra)}
}

export class Company_Assets{
 
/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static coe_list(extra:any){return j2t.o('get','/company-assets/coe/',null,extra)}

/**
* @data
* readonly id?: number
* expiryDate: string [format: date-time ]
* vehicle: string
* method: post, responses: 201 ,model: Coe */
static coe_create(data:Coe){return j2t.o('post','/company-assets/coe/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this coe.]
* method: get, responses: 200 */
static coe_read(extra:any){return j2t.o('get','/company-assets/coe/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this coe.]
* method: put, responses: 200 */
static coe_update(extra:any){return j2t.o('put','/company-assets/coe/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this coe.]
* method: patch, responses: 200 */
static coe_partial_update(extra:any){return j2t.o('patch','/company-assets/coe/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this coe.]
* method: delete, responses: 204 */
static coe_delete(extra:any){return j2t.o('delete','/company-assets/coe/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static company_owned_vpc_list(extra:any){return j2t.o('get','/company-assets/company-owned-vpc/',null,extra)}

/**
* @data
* readonly id?: number
* code: string
* vpcStartDate: string [format: date ]
* vpcEndDate: string [format: date ]
* vpcIssuedDate: string [format: date ]
* isOwner: boolean
* organization?: number
* lot?: number
* method: post, responses: 201 ,model: CompanyOwnedVpc */
static company_owned_vpc_create(data:CompanyOwnedVpc){return j2t.o('post','/company-assets/company-owned-vpc/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this company owned vpc.]
* method: get, responses: 200 */
static company_owned_vpc_read(extra:any){return j2t.o('get','/company-assets/company-owned-vpc/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company owned vpc.]
* method: put, responses: 200 */
static company_owned_vpc_update(extra:any){return j2t.o('put','/company-assets/company-owned-vpc/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company owned vpc.]
* method: patch, responses: 200 */
static company_owned_vpc_partial_update(extra:any){return j2t.o('patch','/company-assets/company-owned-vpc/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company owned vpc.]
* method: delete, responses: 204 */
static company_owned_vpc_delete(extra:any){return j2t.o('delete','/company-assets/company-owned-vpc/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static insurance_list(extra:any){return j2t.o('get','/company-assets/insurance/',null,extra)}

/**
* @data
* readonly id?: number
* insurer: string
* policyNo: string
* startDate: string [format: date-time ]
* endDate: string [format: date-time ]
* remarks?: string
* vehicle: string
* method: post, responses: 201 ,model: Insurance */
static insurance_create(data:Insurance){return j2t.o('post','/company-assets/insurance/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this insurance.]
* method: get, responses: 200 */
static insurance_read(extra:any){return j2t.o('get','/company-assets/insurance/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this insurance.]
* method: put, responses: 200 */
static insurance_update(extra:any){return j2t.o('put','/company-assets/insurance/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this insurance.]
* method: patch, responses: 200 */
static insurance_partial_update(extra:any){return j2t.o('patch','/company-assets/insurance/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this insurance.]
* method: delete, responses: 204 */
static insurance_delete(extra:any){return j2t.o('delete','/company-assets/insurance/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static lorry_list(extra:any){return j2t.o('get','/company-assets/lorry/',null,extra)}

/**
* @data
* readonly id?: number
* readonly displayName?: string
* vehicleType: string
* vehicle: string
* method: post, responses: 201 ,model: LorryDetails */
static lorry_create(data:LorryDetails){return j2t.o('post','/company-assets/lorry/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this lorry details.]
* method: get, responses: 200 */
static lorry_read(extra:any){return j2t.o('get','/company-assets/lorry/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this lorry details.]
* method: put, responses: 200 */
static lorry_update(extra:any){return j2t.o('put','/company-assets/lorry/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this lorry details.]
* method: patch, responses: 200 */
static lorry_partial_update(extra:any){return j2t.o('patch','/company-assets/lorry/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this lorry details.]
* method: delete, responses: 204 */
static lorry_delete(extra:any){return j2t.o('delete','/company-assets/lorry/{id}/',null,extra)}

/**
* @extra
* parking_lot?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static lot_list(extra:any){return j2t.o('get','/company-assets/lot/',null,extra)}

/**
* @data
* readonly id?: number
* lotType: string *enum:["HEAVY_VEHICLE_LOT","TRAILER_LOT_20_FOOT","TRAILER_LOT_40_FOOT"]
* lotNo: string
* lotOwnerName: string
* lotOwnerUen: string
* parkingLot?: number
* method: post, responses: 201 ,model: Lot */
static lot_create(data:Lot){return j2t.o('post','/company-assets/lot/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this lot.]
* method: get, responses: 200 */
static lot_read(extra:any){return j2t.o('get','/company-assets/lot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this lot.]
* method: put, responses: 200 */
static lot_update(extra:any){return j2t.o('put','/company-assets/lot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this lot.]
* method: patch, responses: 200 */
static lot_partial_update(extra:any){return j2t.o('patch','/company-assets/lot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this lot.]
* method: delete, responses: 204 */
static lot_delete(extra:any){return j2t.o('delete','/company-assets/lot/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static other_company_vpc_list(extra:any){return j2t.o('get','/company-assets/other-company-vpc/',null,extra)}

/**
* @data
* readonly id?: number
* code: string
* vpcStartDate: string [format: date ]
* vpcEndDate: string [format: date ]
* vpcIssuedDate: string [format: date ]
* isOwner: boolean
* owner: string
* costPrice: string [format: decimal ]
* organization?: number
* method: post, responses: 201 ,model: OtherCompanyVpc */
static other_company_vpc_create(data:OtherCompanyVpc){return j2t.o('post','/company-assets/other-company-vpc/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this other company vpc.]
* method: get, responses: 200 */
static other_company_vpc_read(extra:any){return j2t.o('get','/company-assets/other-company-vpc/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this other company vpc.]
* method: put, responses: 200 */
static other_company_vpc_update(extra:any){return j2t.o('put','/company-assets/other-company-vpc/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this other company vpc.]
* method: patch, responses: 200 */
static other_company_vpc_partial_update(extra:any){return j2t.o('patch','/company-assets/other-company-vpc/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this other company vpc.]
* method: delete, responses: 204 */
static other_company_vpc_delete(extra:any){return j2t.o('delete','/company-assets/other-company-vpc/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static other_site_category_list(extra:any){return j2t.o('get','/company-assets/other-site-category/',null,extra)}

/**
* @data
* readonly id?: number
* category: string
* method: post, responses: 201 ,model: OtherSiteCategory */
static other_site_category_create(data:OtherSiteCategory){return j2t.o('post','/company-assets/other-site-category/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this other site category.]
* method: get, responses: 200 */
static other_site_category_read(extra:any){return j2t.o('get','/company-assets/other-site-category/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this other site category.]
* method: put, responses: 200 */
static other_site_category_update(extra:any){return j2t.o('put','/company-assets/other-site-category/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this other site category.]
* method: patch, responses: 200 */
static other_site_category_partial_update(extra:any){return j2t.o('patch','/company-assets/other-site-category/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this other site category.]
* method: delete, responses: 204 */
static other_site_category_delete(extra:any){return j2t.o('delete','/company-assets/other-site-category/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static other_site_list(extra:any){return j2t.o('get','/company-assets/other-site/',null,extra)}

/**
* @data
* readonly id?: number
* category: OtherSiteCategory
* name: string
* isShiftLocation?: boolean
* addressMaster?: string
* belongsTo: number
* method: post, responses: 201 ,model: OtherSite */
static other_site_create(data:OtherSite){return j2t.o('post','/company-assets/other-site/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this other site.]
* method: get, responses: 200 */
static other_site_read(extra:any){return j2t.o('get','/company-assets/other-site/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this other site.]
* method: put, responses: 200 */
static other_site_update(extra:any){return j2t.o('put','/company-assets/other-site/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this other site.]
* method: patch, responses: 200 */
static other_site_partial_update(extra:any){return j2t.o('patch','/company-assets/other-site/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this other site.]
* method: delete, responses: 204 */
static other_site_delete(extra:any){return j2t.o('delete','/company-assets/other-site/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static parking_lot_list(extra:any){return j2t.o('get','/company-assets/parking-lot/',null,extra)}

/**
* @data
* readonly id?: number
* addressMaster: AddressMaster
* lots?: Array<Lot>
* readonly count40Foot?: string
* readonly count20Foot?: string
* readonly countHeavyVehicle?: string
* parkingLotCode: string
* parkingLotName: string
* haulier?: number
* method: post, responses: 201 ,model: ParkingLot */
static parking_lot_create(data:ParkingLot){return j2t.o('post','/company-assets/parking-lot/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this parking lot.]
* method: get, responses: 200 */
static parking_lot_read(extra:any){return j2t.o('get','/company-assets/parking-lot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this parking lot.]
* method: put, responses: 200 */
static parking_lot_update(extra:any){return j2t.o('put','/company-assets/parking-lot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this parking lot.]
* method: patch, responses: 200 */
static parking_lot_partial_update(extra:any){return j2t.o('patch','/company-assets/parking-lot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this parking lot.]
* method: delete, responses: 204 */
static parking_lot_delete(extra:any){return j2t.o('delete','/company-assets/parking-lot/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static portEntry_list(extra:any){return j2t.o('get','/company-assets/portEntry/',null,extra)}

/**
* @data
* readonly id?: number
* permitNo: string
* company: string
* expiryDate: string [format: date-time ]
* feePaid: number
* vehicle: string
* method: post, responses: 201 ,model: PortEntryPermit */
static portEntry_create(data:PortEntryPermit){return j2t.o('post','/company-assets/portEntry/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this port entry permit.]
* method: get, responses: 200 */
static portEntry_read(extra:any){return j2t.o('get','/company-assets/portEntry/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port entry permit.]
* method: put, responses: 200 */
static portEntry_update(extra:any){return j2t.o('put','/company-assets/portEntry/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port entry permit.]
* method: patch, responses: 200 */
static portEntry_partial_update(extra:any){return j2t.o('patch','/company-assets/portEntry/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port entry permit.]
* method: delete, responses: 204 */
static portEntry_delete(extra:any){return j2t.o('delete','/company-assets/portEntry/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static prime_mover_list(extra:any){return j2t.o('get','/company-assets/prime-mover/',null,extra)}

/**
* @data
* readonly id?: number
* readonly displayName?: string
* vehicleType: string
* vehicle: string
* method: post, responses: 201 ,model: PrimeMoverDetails */
static prime_mover_create(data:PrimeMoverDetails){return j2t.o('post','/company-assets/prime-mover/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this prime mover details.]
* method: get, responses: 200 */
static prime_mover_read(extra:any){return j2t.o('get','/company-assets/prime-mover/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this prime mover details.]
* method: put, responses: 200 */
static prime_mover_update(extra:any){return j2t.o('put','/company-assets/prime-mover/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this prime mover details.]
* method: patch, responses: 200 */
static prime_mover_partial_update(extra:any){return j2t.o('patch','/company-assets/prime-mover/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this prime mover details.]
* method: delete, responses: 204 */
static prime_mover_delete(extra:any){return j2t.o('delete','/company-assets/prime-mover/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static roadTax_list(extra:any){return j2t.o('get','/company-assets/roadTax/',null,extra)}

/**
* @data
* readonly id?: number
* organization: string
* amount: string [format: decimal ]
* renewDate: string [format: date-time ]
* expiryDate: string [format: date-time ]
* vehicle: string
* renewedBy?: number
* method: post, responses: 201 ,model: RoadTax */
static roadTax_create(data:RoadTax){return j2t.o('post','/company-assets/roadTax/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this road tax.]
* method: get, responses: 200 */
static roadTax_read(extra:any){return j2t.o('get','/company-assets/roadTax/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this road tax.]
* method: put, responses: 200 */
static roadTax_update(extra:any){return j2t.o('put','/company-assets/roadTax/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this road tax.]
* method: patch, responses: 200 */
static roadTax_partial_update(extra:any){return j2t.o('patch','/company-assets/roadTax/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this road tax.]
* method: delete, responses: 204 */
static roadTax_delete(extra:any){return j2t.o('delete','/company-assets/roadTax/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static trTyre_list(extra:any){return j2t.o('get','/company-assets/trTyre/',null,extra)}

/**
* @data
* readonly id?: number
* noOfTyres: number
* tyreType?: number
* trailer: string
* method: post, responses: 201 ,model: TrailerTyre */
static trTyre_create(data:TrailerTyre){return j2t.o('post','/company-assets/trTyre/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this trailer tyre.]
* method: get, responses: 200 */
static trTyre_read(extra:any){return j2t.o('get','/company-assets/trTyre/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trailer tyre.]
* method: put, responses: 200 */
static trTyre_update(extra:any){return j2t.o('put','/company-assets/trTyre/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trailer tyre.]
* method: patch, responses: 200 */
static trTyre_partial_update(extra:any){return j2t.o('patch','/company-assets/trTyre/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trailer tyre.]
* method: delete, responses: 204 */
static trTyre_delete(extra:any){return j2t.o('delete','/company-assets/trTyre/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static trailer_tyre_changeLog_list(extra:any){return j2t.o('get','/company-assets/trailer-tyre-changeLog/',null,extra)}

/**
* @data
* readonly id?: number
* position: string
* mileage: string [format: decimal ]
* remarks: string
* dateOfChange: string [format: date-time ]
* tyre: number
* method: post, responses: 201 ,model: TrailerTyreChangeLog */
static trailer_tyre_changeLog_create(data:TrailerTyreChangeLog){return j2t.o('post','/company-assets/trailer-tyre-changeLog/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this trailer tyre change log.]
* method: get, responses: 200 */
static trailer_tyre_changeLog_read(extra:any){return j2t.o('get','/company-assets/trailer-tyre-changeLog/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trailer tyre change log.]
* method: put, responses: 200 */
static trailer_tyre_changeLog_update(extra:any){return j2t.o('put','/company-assets/trailer-tyre-changeLog/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trailer tyre change log.]
* method: patch, responses: 200 */
static trailer_tyre_changeLog_partial_update(extra:any){return j2t.o('patch','/company-assets/trailer-tyre-changeLog/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trailer tyre change log.]
* method: delete, responses: 204 */
static trailer_tyre_changeLog_delete(extra:any){return j2t.o('delete','/company-assets/trailer-tyre-changeLog/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static trailer_list(extra:any){return j2t.o('get','/company-assets/trailer/',null,extra)}

/**
* @data
* plateNo: string
* sizeType: string
* payload: number
* isBorrowed?: boolean
* registrationDate: string [format: date ]
* brand: string
* ulw: number
* mlw: number
* mfgDate: string [format: date ]
* method: post, responses: 201 ,model: Trailer */
static trailer_create(data:Trailer){return j2t.o('post','/company-assets/trailer/',data)}

/**
* @extra
* plate_no: string [A unique value identifying this trailer.]
* method: get, responses: 200 */
static trailer_read(extra:any){return j2t.o('get','/company-assets/trailer/{plate_no}/',null,extra)}

/**
* @extra
* plate_no: string [A unique value identifying this trailer.]
* method: put, responses: 200 */
static trailer_update(extra:any){return j2t.o('put','/company-assets/trailer/{plate_no}/',null,extra)}

/**
* @extra
* plate_no: string [A unique value identifying this trailer.]
* method: patch, responses: 200 */
static trailer_partial_update(extra:any){return j2t.o('patch','/company-assets/trailer/{plate_no}/',null,extra)}

/**
* @extra
* plate_no: string [A unique value identifying this trailer.]
* method: delete, responses: 204 */
static trailer_delete(extra:any){return j2t.o('delete','/company-assets/trailer/{plate_no}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static tyre_list_list(extra:any){return j2t.o('get','/company-assets/tyre-list/',null,extra)}

/**
* @data
* readonly id?: number
* name: string
* size: string
* brand: string
* model: string
* origin: string
* vendor: string
* unitPrice: string [format: decimal ]
* isTubeless?: boolean
* belongsTo?: number
* method: post, responses: 201 ,model: TyreMaster */
static tyre_list_create(data:TyreMaster){return j2t.o('post','/company-assets/tyre-list/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this tyre master.]
* method: get, responses: 200 */
static tyre_list_read(extra:any){return j2t.o('get','/company-assets/tyre-list/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this tyre master.]
* method: put, responses: 200 */
static tyre_list_update(extra:any){return j2t.o('put','/company-assets/tyre-list/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this tyre master.]
* method: patch, responses: 200 */
static tyre_list_partial_update(extra:any){return j2t.o('patch','/company-assets/tyre-list/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this tyre master.]
* method: delete, responses: 204 */
static tyre_list_delete(extra:any){return j2t.o('delete','/company-assets/tyre-list/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static vehicle_tyre_changelog_list(extra:any){return j2t.o('get','/company-assets/vehicle-tyre-changelog/',null,extra)}

/**
* @data
* readonly id?: number
* position: string
* mileage: string [format: decimal ]
* remarks: string
* dateOfChange: string [format: date-time ]
* tyre: number
* method: post, responses: 201 ,model: VehicleTyreChangeLog */
static vehicle_tyre_changelog_create(data:VehicleTyreChangeLog){return j2t.o('post','/company-assets/vehicle-tyre-changelog/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this vehicle tyre change log.]
* method: get, responses: 200 */
static vehicle_tyre_changelog_read(extra:any){return j2t.o('get','/company-assets/vehicle-tyre-changelog/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this vehicle tyre change log.]
* method: put, responses: 200 */
static vehicle_tyre_changelog_update(extra:any){return j2t.o('put','/company-assets/vehicle-tyre-changelog/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this vehicle tyre change log.]
* method: patch, responses: 200 */
static vehicle_tyre_changelog_partial_update(extra:any){return j2t.o('patch','/company-assets/vehicle-tyre-changelog/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this vehicle tyre change log.]
* method: delete, responses: 204 */
static vehicle_tyre_changelog_delete(extra:any){return j2t.o('delete','/company-assets/vehicle-tyre-changelog/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static vehicle_tyre_list(extra:any){return j2t.o('get','/company-assets/vehicle-tyre/',null,extra)}

/**
* @data
* readonly id?: number
* noOfTyres: number
* tyreType?: number
* vehicle: string
* method: post, responses: 201 ,model: VehicleTyre */
static vehicle_tyre_create(data:VehicleTyre){return j2t.o('post','/company-assets/vehicle-tyre/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this vehicle tyre.]
* method: get, responses: 200 */
static vehicle_tyre_read(extra:any){return j2t.o('get','/company-assets/vehicle-tyre/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this vehicle tyre.]
* method: put, responses: 200 */
static vehicle_tyre_update(extra:any){return j2t.o('put','/company-assets/vehicle-tyre/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this vehicle tyre.]
* method: patch, responses: 200 */
static vehicle_tyre_partial_update(extra:any){return j2t.o('patch','/company-assets/vehicle-tyre/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this vehicle tyre.]
* method: delete, responses: 204 */
static vehicle_tyre_delete(extra:any){return j2t.o('delete','/company-assets/vehicle-tyre/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static vehicle_list(extra:any){return j2t.o('get','/company-assets/vehicle/',null,extra)}

/**
* @data
* plateNo: string
* model: string
* payload: number
* iu: string
* engineNo: string
* chassisNo: string
* ulw: number
* mlw: number
* mfgDate: string [format: date ]
* brand: string
* isActive?: boolean
* isBorrowed?: boolean
* registrationDate: string [format: date ]
* organization?: number
* belongsTo?: number
* vehicleType: number
* registeredBy?: number
* method: post, responses: 201 ,model: Vehicle */
static vehicle_create(data:Vehicle){return j2t.o('post','/company-assets/vehicle/',data)}

/**
* @data
* plateNo: string
* model: string
* payload: number
* iu: string
* engineNo: string
* chassisNo: string
* ulw: number
* mlw: number
* mfgDate: string [format: date ]
* brand: string
* isActive?: boolean
* isBorrowed?: boolean
* registrationDate: string [format: date ]
* organization?: number
* belongsTo?: number
* vehicleType: number
* registeredBy?: number
* method: post, responses: 201 ,model: Vehicle */
static vehicle_bulk_create(data:Vehicle){return j2t.o('post','/company-assets/vehicle/bulk_create/',data)}

/**
* @extra
* plate_no: string [A unique value identifying this vehicle.]
* method: get, responses: 200 */
static vehicle_read(extra:any){return j2t.o('get','/company-assets/vehicle/{plate_no}/',null,extra)}

/**
* @extra
* plate_no: string [A unique value identifying this vehicle.]
* method: put, responses: 200 */
static vehicle_update(extra:any){return j2t.o('put','/company-assets/vehicle/{plate_no}/',null,extra)}

/**
* @extra
* plate_no: string [A unique value identifying this vehicle.]
* method: patch, responses: 200 */
static vehicle_partial_update(extra:any){return j2t.o('patch','/company-assets/vehicle/{plate_no}/',null,extra)}

/**
* @extra
* plate_no: string [A unique value identifying this vehicle.]
* method: delete, responses: 204 */
static vehicle_delete(extra:any){return j2t.o('delete','/company-assets/vehicle/{plate_no}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static vpc_list(extra:any){return j2t.o('get','/company-assets/vpc/',null,extra)}

/**
* @data
* readonly id?: number
* code: string
* vpcStartDate: string [format: date ]
* vpcEndDate: string [format: date ]
* vpcIssuedDate: string [format: date ]
* isOwner: boolean
* organization?: number
* method: post, responses: 201 ,model: Vpc */
static vpc_create(data:Vpc){return j2t.o('post','/company-assets/vpc/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this vpc.]
* method: get, responses: 200 */
static vpc_read(extra:any){return j2t.o('get','/company-assets/vpc/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this vpc.]
* method: put, responses: 200 */
static vpc_update(extra:any){return j2t.o('put','/company-assets/vpc/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this vpc.]
* method: patch, responses: 200 */
static vpc_partial_update(extra:any){return j2t.o('patch','/company-assets/vpc/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this vpc.]
* method: delete, responses: 204 */
static vpc_delete(extra:any){return j2t.o('delete','/company-assets/vpc/{id}/',null,extra)}
}

export class Company{
 
/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static billing_address_list(extra:any){return j2t.o('get','/company/billing-address/',null,extra)}

/**
* @data
* readonly id?: number
* building?: string
* unit?: string
* company: number
* addressMaster?: string
* method: post, responses: 201 ,model: CompanyBillingAddress */
static billing_address_create(data:CompanyBillingAddress){return j2t.o('post','/company/billing-address/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this company billing address.]
* method: get, responses: 200 */
static billing_address_read(extra:any){return j2t.o('get','/company/billing-address/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company billing address.]
* method: put, responses: 200 */
static billing_address_update(extra:any){return j2t.o('put','/company/billing-address/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company billing address.]
* method: patch, responses: 200 */
static billing_address_partial_update(extra:any){return j2t.o('patch','/company/billing-address/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static end_customer_haulier_list(extra:any){return j2t.o('get','/company/end-customer-haulier/',null,extra)}

/**
* @data
* readonly id?: number
* endCustomer: number
* haulier: number
* method: post, responses: 201 ,model: EndCustomerHaulier */
static end_customer_haulier_create(data:EndCustomerHaulier){return j2t.o('post','/company/end-customer-haulier/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this end customer haulier.]
* method: get, responses: 200 */
static end_customer_haulier_read(extra:any){return j2t.o('get','/company/end-customer-haulier/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this end customer haulier.]
* method: put, responses: 200 */
static end_customer_haulier_update(extra:any){return j2t.o('put','/company/end-customer-haulier/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this end customer haulier.]
* method: patch, responses: 200 */
static end_customer_haulier_partial_update(extra:any){return j2t.o('patch','/company/end-customer-haulier/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static end_customer_list(extra:any){return j2t.o('get','/company/end-customer/',null,extra)}

/**
* @data
* readonly id?: number
* activeDate: string [format: date-time ]
* company: number
* method: post, responses: 201 ,model: CompanyEndCustomer */
static end_customer_create(data:CompanyEndCustomer){return j2t.o('post','/company/end-customer/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this company end customer.]
* method: get, responses: 200 */
static end_customer_read(extra:any){return j2t.o('get','/company/end-customer/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company end customer.]
* method: put, responses: 200 */
static end_customer_update(extra:any){return j2t.o('put','/company/end-customer/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company end customer.]
* method: patch, responses: 200 */
static end_customer_partial_update(extra:any){return j2t.o('patch','/company/end-customer/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static entity_type_list(extra:any){return j2t.o('get','/company/entity-type/',null,extra)}

/**
* @data
* readonly id?: number
* issuanceAgency?: string
* entityType?: string
* entityTypeIndicator: string
* method: post, responses: 201 ,model: EntityType */
static entity_type_create(data:EntityType){return j2t.o('post','/company/entity-type/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this entity type.]
* method: get, responses: 200 */
static entity_type_read(extra:any){return j2t.o('get','/company/entity-type/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this entity type.]
* method: put, responses: 200 */
static entity_type_update(extra:any){return j2t.o('put','/company/entity-type/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this entity type.]
* method: patch, responses: 200 */
static entity_type_partial_update(extra:any){return j2t.o('patch','/company/entity-type/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this entity type.]
* method: delete, responses: 204 */
static entity_type_delete(extra:any){return j2t.o('delete','/company/entity-type/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static freight_forwarder_haulier_list(extra:any){return j2t.o('get','/company/freight-forwarder-haulier/',null,extra)}

/**
* @data
* readonly id?: number
* freightForwarder: number
* haulier: number
* method: post, responses: 201 ,model: FreightForwarderHaulier */
static freight_forwarder_haulier_create(data:FreightForwarderHaulier){return j2t.o('post','/company/freight-forwarder-haulier/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this freight forwarder haulier.]
* method: get, responses: 200 */
static freight_forwarder_haulier_read(extra:any){return j2t.o('get','/company/freight-forwarder-haulier/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this freight forwarder haulier.]
* method: put, responses: 200 */
static freight_forwarder_haulier_update(extra:any){return j2t.o('put','/company/freight-forwarder-haulier/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this freight forwarder haulier.]
* method: patch, responses: 200 */
static freight_forwarder_haulier_partial_update(extra:any){return j2t.o('patch','/company/freight-forwarder-haulier/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static freight_forwarder_list(extra:any){return j2t.o('get','/company/freight-forwarder/',null,extra)}

/**
* @data
* readonly id?: number
* activeDate: string [format: date-time ]
* company: number
* method: post, responses: 201 ,model: FreightForwarder */
static freight_forwarder_create(data:FreightForwarder){return j2t.o('post','/company/freight-forwarder/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this freight forwarder.]
* method: get, responses: 200 */
static freight_forwarder_read(extra:any){return j2t.o('get','/company/freight-forwarder/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this freight forwarder.]
* method: put, responses: 200 */
static freight_forwarder_update(extra:any){return j2t.o('put','/company/freight-forwarder/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this freight forwarder.]
* method: patch, responses: 200 */
static freight_forwarder_partial_update(extra:any){return j2t.o('patch','/company/freight-forwarder/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static global_rule_list(extra:any){return j2t.o('get','/company/global-rule/',null,extra)}

/**
* @data
* readonly id?: number
* instruction: string
* customer: number
* method: post, responses: 201 ,model: CompanyGlobalRule */
static global_rule_create(data:CompanyGlobalRule){return j2t.o('post','/company/global-rule/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this company global rule.]
* method: get, responses: 200 */
static global_rule_read(extra:any){return j2t.o('get','/company/global-rule/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company global rule.]
* method: put, responses: 200 */
static global_rule_update(extra:any){return j2t.o('put','/company/global-rule/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company global rule.]
* method: patch, responses: 200 */
static global_rule_partial_update(extra:any){return j2t.o('patch','/company/global-rule/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company global rule.]
* method: delete, responses: 204 */
static global_rule_delete(extra:any){return j2t.o('delete','/company/global-rule/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this Haulier.]
* method: get, responses: 200 */
static haulier_read(extra:any){return j2t.o('get','/company/haulier/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static portnet_account_list(extra:any){return j2t.o('get','/company/portnet-account/',null,extra)}

/**
* @data
* readonly id?: number
* username: string
* password: string
* readonly createdDate?: string [format: date-time ]
* expiryDate: string [format: date-time ]
* company: number
* createdBy?: number
* method: post, responses: 201 ,model: PortnetAccount */
static portnet_account_create(data:PortnetAccount){return j2t.o('post','/company/portnet-account/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this portnet account.]
* method: get, responses: 200 */
static portnet_account_read(extra:any){return j2t.o('get','/company/portnet-account/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this portnet account.]
* method: put, responses: 200 */
static portnet_account_update(extra:any){return j2t.o('put','/company/portnet-account/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this portnet account.]
* method: patch, responses: 200 */
static portnet_account_partial_update(extra:any){return j2t.o('patch','/company/portnet-account/{id}/',null,extra)}

/**
* @extra
* company?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static shift_work_hour_list(extra:any){return j2t.o('get','/company/shift-work-hour/',null,extra)}

/**
* @data
* readonly id?: number
* company: number
* timeStartWeekday: number
* timeStartHour: string
* timeEndWeekday: number
* timeEndHour: string
* method: post, responses: 201 ,model: CompanyShiftWorkHour */
static shift_work_hour_create(data:CompanyShiftWorkHour){return j2t.o('post','/company/shift-work-hour/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this company shift work hour.]
* method: get, responses: 200 */
static shift_work_hour_read(extra:any){return j2t.o('get','/company/shift-work-hour/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company shift work hour.]
* method: put, responses: 200 */
static shift_work_hour_update(extra:any){return j2t.o('put','/company/shift-work-hour/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company shift work hour.]
* method: patch, responses: 200 */
static shift_work_hour_partial_update(extra:any){return j2t.o('patch','/company/shift-work-hour/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company shift work hour.]
* method: delete, responses: 204 */
static shift_work_hour_delete(extra:any){return j2t.o('delete','/company/shift-work-hour/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static site_contact_list(extra:any){return j2t.o('get','/company/site-contact/',null,extra)}

/**
* @data
* readonly id?: number
* firstName: string
* lastName: string
* workHp?: string
* personalHp?: string
* email?: string
* readonly createdDate?: string [format: date-time ]
* isActive?: boolean
* method: post, responses: 201 ,model: CompanySiteContact */
static site_contact_create(data:CompanySiteContact){return j2t.o('post','/company/site-contact/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this company site contact.]
* method: get, responses: 200 */
static site_contact_read(extra:any){return j2t.o('get','/company/site-contact/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company site contact.]
* method: put, responses: 200 */
static site_contact_update(extra:any){return j2t.o('put','/company/site-contact/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company site contact.]
* method: patch, responses: 200 */
static site_contact_partial_update(extra:any){return j2t.o('patch','/company/site-contact/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static site_hours_list(extra:any){return j2t.o('get','/company/site-hours/',null,extra)}

/**
* @data
* readonly id?: number
* weekdayOpen?: string [format: date-time ]
* weekdayClose?: string [format: date-time ]
* weekendOpen?: string [format: date-time ]
* weekendClose?: string [format: date-time ]
* lunchStart?: string
* lunchEnd?: string
* method: post, responses: 201 ,model: CompanySiteHour */
static site_hours_create(data:CompanySiteHour){return j2t.o('post','/company/site-hours/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this company site hour.]
* method: get, responses: 200 */
static site_hours_read(extra:any){return j2t.o('get','/company/site-hours/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company site hour.]
* method: put, responses: 200 */
static site_hours_update(extra:any){return j2t.o('put','/company/site-hours/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company site hour.]
* method: patch, responses: 200 */
static site_hours_partial_update(extra:any){return j2t.o('patch','/company/site-hours/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static site_loading_bay_list(extra:any){return j2t.o('get','/company/site-loading-bay/',null,extra)}

/**
* @data
* readonly id?: number
* name?: string
* description?: string
* method: post, responses: 201 ,model: CompanySiteLoadingBay */
static site_loading_bay_create(data:CompanySiteLoadingBay){return j2t.o('post','/company/site-loading-bay/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this company site loading bay.]
* method: get, responses: 200 */
static site_loading_bay_read(extra:any){return j2t.o('get','/company/site-loading-bay/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company site loading bay.]
* method: put, responses: 200 */
static site_loading_bay_update(extra:any){return j2t.o('put','/company/site-loading-bay/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company site loading bay.]
* method: patch, responses: 200 */
static site_loading_bay_partial_update(extra:any){return j2t.o('patch','/company/site-loading-bay/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static site_parking_list(extra:any){return j2t.o('get','/company/site-parking/',null,extra)}

/**
* @data
* readonly id?: number
* parkingRemarks?: string
* hourlyRateWkDay?: string [format: decimal ]
* hourlyRateWkEnd?: string [format: decimal ]
* peakRateWkDay?: string [format: decimal ]
* peakRateWkEnd?: string [format: decimal ]
* site: number
* method: post, responses: 201 ,model: CompanySiteParking */
static site_parking_create(data:CompanySiteParking){return j2t.o('post','/company/site-parking/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this company site parking.]
* method: get, responses: 200 */
static site_parking_read(extra:any){return j2t.o('get','/company/site-parking/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company site parking.]
* method: put, responses: 200 */
static site_parking_update(extra:any){return j2t.o('put','/company/site-parking/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this company site parking.]
* method: patch, responses: 200 */
static site_parking_partial_update(extra:any){return j2t.o('patch','/company/site-parking/{id}/',null,extra)}

/**
* @extra
* name?: string 
* address_master__address?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static site_list(extra:any){return j2t.o('get','/company/site/',null,extra)}

/**
* @data
* readonly id?: number
* readonly siteContacts?: Array<number>
* siteHours?: CompanySiteHour
* readonly parkingInfo?: Array<number>
* siteLoadingBays?: Array<CompanySiteLoadingBay>
* addressMaster: AddressMaster
* siteType?: string *enum:["wh","ob","al","ji","cs","sc","sh","m","o"]
* building?: string
* unit?: string
* name?: string
* faxNo?: string
* isOutskirtArea?: boolean
* isWithinCbd?: boolean
* hasSecurity?: boolean
* noOfLoadingBay?: number
* remarks?: string
* readonly company?: number
* method: post, responses: 201 ,model: CompanySite */
static site_create(data:CompanySite){return j2t.o('post','/company/site/',data)}

/**
* @extra
* id: string 
* method: get, responses: 200 */
static site_read(extra:any){return j2t.o('get','/company/site/{id}/',null,extra)}

/**
* @extra
* id: string 
* method: put, responses: 200 */
static site_update(extra:any){return j2t.o('put','/company/site/{id}/',null,extra)}

/**
* @extra
* id: string 
* method: patch, responses: 200 */
static site_partial_update(extra:any){return j2t.o('patch','/company/site/{id}/',null,extra)}

/**
* @extra
* id: string 
* method: delete, responses: 204 */
static site_delete(extra:any){return j2t.o('delete','/company/site/{id}/',null,extra)}

/**
* @data
* method: get, responses: 200 */
static uen_checker_list(){return j2t.o('get','/company/uen-checker/')}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static uen_list(extra:any){return j2t.o('get','/company/uen/',null,extra)}

/**
* @data
* readonly id?: number
* uen: string
* regStreetName: string
* entityName: string
* regPostalCode: string
* issuanceAgencyId: string
* rank: string [format: decimal ]
* uenIssueDate: string [format: date ]
* fullCount: number
* uenStatus: string
* entityType: number
* method: post, responses: 201 ,model: Uen */
static uen_create(data:Uen){return j2t.o('post','/company/uen/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this uen.]
* method: get, responses: 200 */
static uen_read(extra:any){return j2t.o('get','/company/uen/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this uen.]
* method: put, responses: 200 */
static uen_update(extra:any){return j2t.o('put','/company/uen/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this uen.]
* method: patch, responses: 200 */
static uen_partial_update(extra:any){return j2t.o('patch','/company/uen/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this uen.]
* method: delete, responses: 204 */
static uen_delete(extra:any){return j2t.o('delete','/company/uen/{id}/',null,extra)}
}

export class Container{
 
/**
* @extra
* container?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static attachment_list(extra:any){return j2t.o('get','/container/attachment/',null,extra)}

/**
* @data
* readonly id?: number
* readonly file?: string [format: uri ]
* remarks: string
* readonly uploadedDate?: string [format: date-time ]
* cancelledDate: string [format: date-time ]
* uploadedBy?: number
* cancelledBy?: number
* container: number
* method: post, responses: 201 ,model: ContainerAttachment */
static attachment_create(data:ContainerAttachment){return j2t.o('post','/container/attachment/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container attachment.]
* method: get, responses: 200 */
static attachment_read(extra:any){return j2t.o('get','/container/attachment/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container attachment.]
* method: put, responses: 200 */
static attachment_update(extra:any){return j2t.o('put','/container/attachment/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container attachment.]
* method: patch, responses: 200 */
static attachment_partial_update(extra:any){return j2t.o('patch','/container/attachment/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container attachment.]
* method: delete, responses: 204 */
static attachment_delete(extra:any){return j2t.o('delete','/container/attachment/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static container_list_list(extra:any){return j2t.o('get','/container/container-list/',null,extra)}

/**
* @data
* readonly id?: number
* containerDetail?: ContainerContainerDetail
* containerMaster?: ContainerContainerMaster
* cargoMaster?: ContainerCargoMaster
* jobOrder?: number
* method: post, responses: 201 ,model: Container */
static container_list_create(data:Container){return j2t.o('post','/container/container-list/',data)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static container_list_initialize(extra:any){return j2t.o('get','/container/container-list/initialize/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static container_list_scheduler(extra:any){return j2t.o('get','/container/container-list/scheduler/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container.]
* method: get, responses: 200 */
static container_list_read(extra:any){return j2t.o('get','/container/container-list/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container.]
* method: put, responses: 200 */
static container_list_update(extra:any){return j2t.o('put','/container/container-list/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container.]
* method: patch, responses: 200 */
static container_list_partial_update(extra:any){return j2t.o('patch','/container/container-list/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container.]
* method: delete, responses: 204 */
static container_list_delete(extra:any){return j2t.o('delete','/container/container-list/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static container_trip_container_trip_list(extra:any){return j2t.o('get','/container/container-trip/container-trip/',null,extra)}

/**
* @data
* readonly id?: number
* containerLocations: Array<ContainerLocation>
* containerVersion: ContainerTripContainerVersion
* order?: number
* jobOrderTrip?: number
* method: post, responses: 201 ,model: ContainerTrip */
static container_trip_container_trip_create(data:ContainerTrip){return j2t.o('post','/container/container-trip/container-trip/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container trip.]
* method: get, responses: 200 */
static container_trip_container_trip_read(extra:any){return j2t.o('get','/container/container-trip/container-trip/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container trip.]
* method: put, responses: 200 */
static container_trip_container_trip_update(extra:any){return j2t.o('put','/container/container-trip/container-trip/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container trip.]
* method: patch, responses: 200 */
static container_trip_container_trip_partial_update(extra:any){return j2t.o('patch','/container/container-trip/container-trip/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container trip.]
* method: delete, responses: 204 */
static container_trip_container_trip_delete(extra:any){return j2t.o('delete','/container/container-trip/container-trip/{id}/',null,extra)}

/**
* @extra
* container_master?: string 
* cargo_master?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static list(extra:any){return j2t.o('get','/container/container/',null,extra)}

/**
* @data
* readonly id?: number
* containerDetail?: ContainerContainerDetail
* containerMaster?: ContainerContainerMaster
* cargoMaster?: ContainerCargoMaster
* jobOrder?: number
* method: post, responses: 201 ,model: Container */
static create(data:Container){return j2t.o('post','/container/container/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container.]
* method: get, responses: 200 */
static read(extra:any){return j2t.o('get','/container/container/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container.]
* method: put, responses: 200 */
static update(extra:any){return j2t.o('put','/container/container/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container.]
* method: patch, responses: 200 */
static partial_update(extra:any){return j2t.o('patch','/container/container/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container.]
* method: delete, responses: 204 */
static delete(extra:any){return j2t.o('delete','/container/container/{id}/',null,extra)}

/**
* @extra
* container?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static detail_list(extra:any){return j2t.o('get','/container/detail/',null,extra)}

/**
* @data
* readonly id?: number
* dangerousGoods?: string
* temperature?: string [format: decimal ]
* grossWeight?: string [format: decimal ]
* containerCondition?: string
* remarks?: string
* container: number
* method: post, responses: 201 ,model: ContainerDetail */
static detail_create(data:ContainerDetail){return j2t.o('post','/container/detail/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container detail.]
* method: get, responses: 200 */
static detail_read(extra:any){return j2t.o('get','/container/detail/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container detail.]
* method: put, responses: 200 */
static detail_update(extra:any){return j2t.o('put','/container/detail/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container detail.]
* method: patch, responses: 200 */
static detail_partial_update(extra:any){return j2t.o('patch','/container/detail/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container detail.]
* method: delete, responses: 204 */
static detail_delete(extra:any){return j2t.o('delete','/container/detail/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static estimated_date_estimation_date_list(extra:any){return j2t.o('get','/container/estimated-date/estimation-date/',null,extra)}

/**
* @data
* readonly id?: number
* dateMin?: string [format: date-time ]
* dateMax?: string [format: date-time ]
* isFlexible?: boolean
* containerLocation: number
* method: post, responses: 201 ,model: ContainerLocationEstimatedDates */
static estimated_date_estimation_date_create(data:ContainerLocationEstimatedDates){return j2t.o('post','/container/estimated-date/estimation-date/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container location estimated dates.]
* method: get, responses: 200 */
static estimated_date_estimation_date_read(extra:any){return j2t.o('get','/container/estimated-date/estimation-date/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container location estimated dates.]
* method: put, responses: 200 */
static estimated_date_estimation_date_update(extra:any){return j2t.o('put','/container/estimated-date/estimation-date/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container location estimated dates.]
* method: patch, responses: 200 */
static estimated_date_estimation_date_partial_update(extra:any){return j2t.o('patch','/container/estimated-date/estimation-date/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container location estimated dates.]
* method: delete, responses: 204 */
static estimated_date_estimation_date_delete(extra:any){return j2t.o('delete','/container/estimated-date/estimation-date/{id}/',null,extra)}

/**
* @extra
* container_location?: string 
* container_goods?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static goods_history_list(extra:any){return j2t.o('get','/container/goods-history/',null,extra)}

/**
* @data
* readonly id?: number
* loadedAmount: number
* remarks?: string
* containerLocation: number
* containerGoods: number
* method: post, responses: 201 ,model: ContainerGoodsHistory */
static goods_history_create(data:ContainerGoodsHistory){return j2t.o('post','/container/goods-history/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container goods history.]
* method: get, responses: 200 */
static goods_history_read(extra:any){return j2t.o('get','/container/goods-history/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container goods history.]
* method: put, responses: 200 */
static goods_history_update(extra:any){return j2t.o('put','/container/goods-history/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container goods history.]
* method: patch, responses: 200 */
static goods_history_partial_update(extra:any){return j2t.o('patch','/container/goods-history/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container goods history.]
* method: delete, responses: 204 */
static goods_history_delete(extra:any){return j2t.o('delete','/container/goods-history/{id}/',null,extra)}

/**
* @extra
* container?: string 
* goods_name?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static goods_list(extra:any){return j2t.o('get','/container/goods/',null,extra)}

/**
* @data
* readonly id?: number
* goodsName: string
* unitSymbol: string
* description?: string
* container: number
* method: post, responses: 201 ,model: ContainerGoods */
static goods_create(data:ContainerGoods){return j2t.o('post','/container/goods/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container goods.]
* method: get, responses: 200 */
static goods_read(extra:any){return j2t.o('get','/container/goods/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container goods.]
* method: put, responses: 200 */
static goods_update(extra:any){return j2t.o('put','/container/goods/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container goods.]
* method: patch, responses: 200 */
static goods_partial_update(extra:any){return j2t.o('patch','/container/goods/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container goods.]
* method: delete, responses: 204 */
static goods_delete(extra:any){return j2t.o('delete','/container/goods/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_depot_list(extra:any){return j2t.o('get','/container/location/depot/',null,extra)}

/**
* @data
* readonly id?: number
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* offHireRef?: string
* pickUpRef?: string
* bookingRef?: string
* storingOrder?: string
* lastDay?: string [format: date-time ]
* lastDayInformedOn?: string [format: date-time ]
* createdBy?: number
* updatedBy?: number
* depotMaster?: number
* method: post, responses: 201 ,model: ContainerDepot */
static location_depot_create(data:ContainerDepot){return j2t.o('post','/container/location/depot/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container depot.]
* method: get, responses: 200 */
static location_depot_read(extra:any){return j2t.o('get','/container/location/depot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container depot.]
* method: put, responses: 200 */
static location_depot_update(extra:any){return j2t.o('put','/container/location/depot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container depot.]
* method: patch, responses: 200 */
static location_depot_partial_update(extra:any){return j2t.o('patch','/container/location/depot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container depot.]
* method: delete, responses: 204 */
static location_depot_delete(extra:any){return j2t.o('delete','/container/location/depot/{id}/',null,extra)}

/**
* @extra
* job_order_location?: string 
* container_trip__container_version__container?: string 
* container_trip?: string 
* container_trip__container_version__job_order?: string 
* container_trip__container_version__job_order__job_order_code?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_location_list(extra:any){return j2t.o('get','/container/location/location/',null,extra)}

/**
* @data
* readonly id?: number
* locationEstimatedDate?: ContainerLocationContainerLocationEstimatedDates
* port?: ContainerPort
* site?: ContainerSite
* otherSite?: ContainerOtherSite
* parkingLot?: ContainerParkingLot
* depot?: ContainerDepot
* readonly isShiftLocation?: string
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* organizationType?: string *enum:["H","F","L","C","A"]
* order?: number
* locationType: string *enum:["CLIENT","PORT","DEPOT","PARKING_LOT","OTHERS"]
* objectId?: number
* remarks?: string
* createdBy?: number
* updatedBy?: number
* genericOrganization?: number
* containerTrip: number
* jobOrderLocation?: number
* locationAction?: number
* method: post, responses: 201 ,model: ContainerLocation */
static location_location_create(data:ContainerLocation){return j2t.o('post','/container/location/location/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container location.]
* method: get, responses: 200 */
static location_location_read(extra:any){return j2t.o('get','/container/location/location/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container location.]
* method: put, responses: 200 */
static location_location_update(extra:any){return j2t.o('put','/container/location/location/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container location.]
* method: patch, responses: 200 */
static location_location_partial_update(extra:any){return j2t.o('patch','/container/location/location/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container location.]
* method: delete, responses: 204 */
static location_location_delete(extra:any){return j2t.o('delete','/container/location/location/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_others_list(extra:any){return j2t.o('get','/container/location/others/',null,extra)}

/**
* @data
* readonly id?: number
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* createdBy?: number
* updatedBy?: number
* site?: number
* category?: number
* method: post, responses: 201 ,model: ContainerOtherSite */
static location_others_create(data:ContainerOtherSite){return j2t.o('post','/container/location/others/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container other site.]
* method: get, responses: 200 */
static location_others_read(extra:any){return j2t.o('get','/container/location/others/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container other site.]
* method: put, responses: 200 */
static location_others_update(extra:any){return j2t.o('put','/container/location/others/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container other site.]
* method: patch, responses: 200 */
static location_others_partial_update(extra:any){return j2t.o('patch','/container/location/others/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container other site.]
* method: delete, responses: 204 */
static location_others_delete(extra:any){return j2t.o('delete','/container/location/others/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_parking_lot_list(extra:any){return j2t.o('get','/container/location/parking-lot/',null,extra)}

/**
* @data
* readonly id?: number
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* createdBy?: number
* updatedBy?: number
* parkingLot?: number
* method: post, responses: 201 ,model: ContainerParkingLot */
static location_parking_lot_create(data:ContainerParkingLot){return j2t.o('post','/container/location/parking-lot/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container parking lot.]
* method: get, responses: 200 */
static location_parking_lot_read(extra:any){return j2t.o('get','/container/location/parking-lot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container parking lot.]
* method: put, responses: 200 */
static location_parking_lot_update(extra:any){return j2t.o('put','/container/location/parking-lot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container parking lot.]
* method: patch, responses: 200 */
static location_parking_lot_partial_update(extra:any){return j2t.o('patch','/container/location/parking-lot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container parking lot.]
* method: delete, responses: 204 */
static location_parking_lot_delete(extra:any){return j2t.o('delete','/container/location/parking-lot/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_port_list(extra:any){return j2t.o('get','/container/location/port/',null,extra)}

/**
* @data
* readonly id?: number
* goodsPermits: Array<ContainerPortGoodsPermit>
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* vesselStore?: string
* inOutVoyageStore?: string
* billOfLading?: string
* bookingRef?: string
* deliveryOrder?: string
* portOfDischarge?: string
* portOfLoading?: string
* createdBy?: number
* updatedBy?: number
* portMaster?: number
* vessel?: number
* method: post, responses: 201 ,model: ContainerPort */
static location_port_create(data:ContainerPort){return j2t.o('post','/container/location/port/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container port.]
* method: get, responses: 200 */
static location_port_read(extra:any){return j2t.o('get','/container/location/port/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container port.]
* method: put, responses: 200 */
static location_port_update(extra:any){return j2t.o('put','/container/location/port/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container port.]
* method: patch, responses: 200 */
static location_port_partial_update(extra:any){return j2t.o('patch','/container/location/port/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container port.]
* method: delete, responses: 204 */
static location_port_delete(extra:any){return j2t.o('delete','/container/location/port/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_site_list(extra:any){return j2t.o('get','/container/location/site/',null,extra)}

/**
* @data
* readonly id?: number
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* createdBy?: number
* updatedBy?: number
* site?: number
* method: post, responses: 201 ,model: ContainerSite */
static location_site_create(data:ContainerSite){return j2t.o('post','/container/location/site/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container site.]
* method: get, responses: 200 */
static location_site_read(extra:any){return j2t.o('get','/container/location/site/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container site.]
* method: put, responses: 200 */
static location_site_update(extra:any){return j2t.o('put','/container/location/site/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container site.]
* method: patch, responses: 200 */
static location_site_partial_update(extra:any){return j2t.o('patch','/container/location/site/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container site.]
* method: delete, responses: 204 */
static location_site_delete(extra:any){return j2t.o('delete','/container/location/site/{id}/',null,extra)}
}

export class Customer{
 
/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static billing_address_list(extra:any){return j2t.o('get','/customer/billing-address/',null,extra)}

/**
* @data
* readonly id?: number
* addressMaster: string
* building?: string
* unit?: string
* isActive?: boolean
* method: post, responses: 201 ,model: CustomerBillingAddress */
static billing_address_create(data:CustomerBillingAddress){return j2t.o('post','/customer/billing-address/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this customer billing address.]
* method: get, responses: 200 */
static billing_address_read(extra:any){return j2t.o('get','/customer/billing-address/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer billing address.]
* method: put, responses: 200 */
static billing_address_update(extra:any){return j2t.o('put','/customer/billing-address/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer billing address.]
* method: patch, responses: 200 */
static billing_address_partial_update(extra:any){return j2t.o('patch','/customer/billing-address/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer billing address.]
* method: delete, responses: 204 */
static billing_address_delete(extra:any){return j2t.o('delete','/customer/billing-address/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static contact_list(extra:any){return j2t.o('get','/customer/contact/',null,extra)}

/**
* @data
* readonly id?: number
* firstname: string
* lastname: string
* position?: string
* workHp?: string
* officeHp?: string
* personalHp?: string
* faxNo?: string
* email?: string
* isActive?: boolean
* customer: number
* method: post, responses: 201 ,model: Contact */
static contact_create(data:Contact){return j2t.o('post','/customer/contact/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this contact.]
* method: get, responses: 200 */
static contact_read(extra:any){return j2t.o('get','/customer/contact/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this contact.]
* method: put, responses: 200 */
static contact_update(extra:any){return j2t.o('put','/customer/contact/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this contact.]
* method: patch, responses: 200 */
static contact_partial_update(extra:any){return j2t.o('patch','/customer/contact/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this contact.]
* method: delete, responses: 204 */
static contact_delete(extra:any){return j2t.o('delete','/customer/contact/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static global_rule_list(extra:any){return j2t.o('get','/customer/global-rule/',null,extra)}

/**
* @data
* readonly id?: number
* instructions: string
* isActive?: boolean
* method: post, responses: 201 ,model: CustomerGlobalRule */
static global_rule_create(data:CustomerGlobalRule){return j2t.o('post','/customer/global-rule/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this customer global rule.]
* method: get, responses: 200 */
static global_rule_read(extra:any){return j2t.o('get','/customer/global-rule/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer global rule.]
* method: put, responses: 200 */
static global_rule_update(extra:any){return j2t.o('put','/customer/global-rule/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer global rule.]
* method: patch, responses: 200 */
static global_rule_partial_update(extra:any){return j2t.o('patch','/customer/global-rule/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer global rule.]
* method: delete, responses: 204 */
static global_rule_delete(extra:any){return j2t.o('delete','/customer/global-rule/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static non_tenant_list(extra:any){return j2t.o('get','/customer/non-tenant/',null,extra)}

/**
* @data
* readonly id?: number
* customerOpenHours?: Array<CustomerNonTenantCustomerOpenHour>
* readonly owner?: string
* companyProfile: CompanyProfile
* nonTenantBillingAddresses?: Array<CustomerBillingAddress>
* readonly contacts?: Array<Contact>
* globalRules?: Array<CustomerGlobalRule>
* customerType: string *enum:["ff","ec"]
* customerReferenceCode?: string
* isActive?: boolean
* organization?: number
* contactInvite?: number
* method: post, responses: 201 ,model: CustomerNonTenant */
static non_tenant_create(data:CustomerNonTenant){return j2t.o('post','/customer/non-tenant/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this customer non tenant.]
* method: get, responses: 200 */
static non_tenant_read(extra:any){return j2t.o('get','/customer/non-tenant/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer non tenant.]
* method: put, responses: 200 */
static non_tenant_update(extra:any){return j2t.o('put','/customer/non-tenant/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer non tenant.]
* method: patch, responses: 200 */
static non_tenant_partial_update(extra:any){return j2t.o('patch','/customer/non-tenant/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer non tenant.]
* method: delete, responses: 204 */
static non_tenant_delete(extra:any){return j2t.o('delete','/customer/non-tenant/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static open_hour_list(extra:any){return j2t.o('get','/customer/open-hour/',null,extra)}

/**
* @data
* readonly id?: number
* customer: number
* timeStartWeekday: number
* timeStartHour: string
* timeEndWeekday: number
* timeEndHour: string
* method: post, responses: 201 ,model: CustomerOpenHour */
static open_hour_create(data:CustomerOpenHour){return j2t.o('post','/customer/open-hour/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this customer open hour.]
* method: get, responses: 200 */
static open_hour_read(extra:any){return j2t.o('get','/customer/open-hour/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer open hour.]
* method: put, responses: 200 */
static open_hour_update(extra:any){return j2t.o('put','/customer/open-hour/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer open hour.]
* method: patch, responses: 200 */
static open_hour_partial_update(extra:any){return j2t.o('patch','/customer/open-hour/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer open hour.]
* method: delete, responses: 204 */
static open_hour_delete(extra:any){return j2t.o('delete','/customer/open-hour/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static site_contact_list(extra:any){return j2t.o('get','/customer/site-contact/',null,extra)}

/**
* @data
* readonly id?: number
* firstname: string
* lastname: string
* position?: string
* workHp?: string
* personalHp?: string
* email?: string
* isActive?: boolean
* method: post, responses: 201 ,model: CustomerSiteContact */
static site_contact_create(data:CustomerSiteContact){return j2t.o('post','/customer/site-contact/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this customer site contact.]
* method: get, responses: 200 */
static site_contact_read(extra:any){return j2t.o('get','/customer/site-contact/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer site contact.]
* method: put, responses: 200 */
static site_contact_update(extra:any){return j2t.o('put','/customer/site-contact/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer site contact.]
* method: patch, responses: 200 */
static site_contact_partial_update(extra:any){return j2t.o('patch','/customer/site-contact/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer site contact.]
* method: delete, responses: 204 */
static site_contact_delete(extra:any){return j2t.o('delete','/customer/site-contact/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static site_details_list(extra:any){return j2t.o('get','/customer/site-details/',null,extra)}

/**
* @data
* readonly id?: number
* building?: string
* unit?: string
* name?: string
* faxNo?: string
* isOutskirtArea?: boolean
* isWithinCbd?: boolean
* hasSecurity?: boolean
* noOfLoadingBay?: number
* remarks?: string
* areaCode?: number
* method: post, responses: 201 ,model: CustomerSiteDetail */
static site_details_create(data:CustomerSiteDetail){return j2t.o('post','/customer/site-details/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this customer site detail.]
* method: get, responses: 200 */
static site_details_read(extra:any){return j2t.o('get','/customer/site-details/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer site detail.]
* method: put, responses: 200 */
static site_details_update(extra:any){return j2t.o('put','/customer/site-details/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer site detail.]
* method: patch, responses: 200 */
static site_details_partial_update(extra:any){return j2t.o('patch','/customer/site-details/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer site detail.]
* method: delete, responses: 204 */
static site_details_delete(extra:any){return j2t.o('delete','/customer/site-details/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static site_loading_bay_list(extra:any){return j2t.o('get','/customer/site-loading-bay/',null,extra)}

/**
* @data
* readonly id?: number
* name?: string
* description?: string
* method: post, responses: 201 ,model: CustomerSiteLoadingBay */
static site_loading_bay_create(data:CustomerSiteLoadingBay){return j2t.o('post','/customer/site-loading-bay/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this customer site loading bay.]
* method: get, responses: 200 */
static site_loading_bay_read(extra:any){return j2t.o('get','/customer/site-loading-bay/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer site loading bay.]
* method: put, responses: 200 */
static site_loading_bay_update(extra:any){return j2t.o('put','/customer/site-loading-bay/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer site loading bay.]
* method: patch, responses: 200 */
static site_loading_bay_partial_update(extra:any){return j2t.o('patch','/customer/site-loading-bay/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this customer site loading bay.]
* method: delete, responses: 204 */
static site_loading_bay_delete(extra:any){return j2t.o('delete','/customer/site-loading-bay/{id}/',null,extra)}

/**
* @extra
* customer?: string 
* address_master?: string 
* address_master__address?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static site_list(extra:any){return j2t.o('get','/customer/site/',null,extra)}

/**
* @data
* readonly id?: number
* customerSiteDetail?: CustomerSiteDetail
* customerSiteParking?: CustomerSiteParking
* customerSiteHour?: CustomerSiteHour
* customerSiteContacts?: Array<CustomerSiteContact>
* customerSiteLoadingBays?: Array<CustomerSiteLoadingBay>
* addressMaster?: AddressMaster
* siteType?: string *enum:["wh","ob","al","ji","cs","sc","sh","m","o"]
* building?: string
* unit?: string
* name: string
* faxNo?: string
* isOutskirtArea?: boolean
* isWithinCbd?: boolean
* hasSecurity?: boolean
* noOfLoadingBay?: number
* remarks?: string
* areaCode?: number
* isActive?: boolean
* customer: number
* method: post, responses: 201 ,model: CustomerSite */
static site_create(data:CustomerSite){return j2t.o('post','/customer/site/',data)}

/**
* @extra
* id: string 
* method: get, responses: 200 */
static site_read(extra:any){return j2t.o('get','/customer/site/{id}/',null,extra)}

/**
* @extra
* id: string 
* method: put, responses: 200 */
static site_update(extra:any){return j2t.o('put','/customer/site/{id}/',null,extra)}

/**
* @extra
* id: string 
* method: patch, responses: 200 */
static site_partial_update(extra:any){return j2t.o('patch','/customer/site/{id}/',null,extra)}

/**
* @extra
* id: string 
* method: delete, responses: 204 */
static site_delete(extra:any){return j2t.o('delete','/customer/site/{id}/',null,extra)}
}

export class Feed_Subscriber{
 
/**
* @data
* method: post, responses: 201 */
static resolve_create(){return j2t.o('post','/feed-subscriber/resolve/')}

/**
* @data
* method: post, responses: 201 */
static subscribe_create(){return j2t.o('post','/feed-subscriber/subscribe/')}

/**
* @data
* method: post, responses: 201 */
static unsubscribe_create(){return j2t.o('post','/feed-subscriber/unsubscribe/')}
}

export class Human_Resource{
 
/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static cpf_list(extra:any){return j2t.o('get','/human-resource/cpf/',null,extra)}

/**
* @data
* readonly id?: number
* method: post, responses: 201 ,model: CpfContribution */
static cpf_create(data:CpfContribution){return j2t.o('post','/human-resource/cpf/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this cpf contribution.]
* method: get, responses: 200 */
static cpf_read(extra:any){return j2t.o('get','/human-resource/cpf/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this cpf contribution.]
* method: put, responses: 200 */
static cpf_update(extra:any){return j2t.o('put','/human-resource/cpf/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this cpf contribution.]
* method: patch, responses: 200 */
static cpf_partial_update(extra:any){return j2t.o('patch','/human-resource/cpf/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this cpf contribution.]
* method: delete, responses: 204 */
static cpf_delete(extra:any){return j2t.o('delete','/human-resource/cpf/{id}/',null,extra)}

/**
* @extra
* driver?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static driver_regular_work_hour_list(extra:any){return j2t.o('get','/human-resource/driver-regular-work-hour/',null,extra)}

/**
* @data
* readonly id?: number
* driver: number
* timeFrom: string [format: date-time ]
* timeUntil: string [format: date-time ]
* method: post, responses: 201 ,model: DriverRegularWorkHour */
static driver_regular_work_hour_create(data:DriverRegularWorkHour){return j2t.o('post','/human-resource/driver-regular-work-hour/',data)}

/**
* @data
* readonly id?: number
* driver: number
* timeFrom: string [format: date-time ]
* timeUntil: string [format: date-time ]
* method: post, responses: 201 ,model: DriverRegularWorkHour */
static driver_regular_work_hour_bulk_create(data:DriverRegularWorkHour){return j2t.o('post','/human-resource/driver-regular-work-hour/bulk_create/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this driver regular work hour.]
* method: get, responses: 200 */
static driver_regular_work_hour_read(extra:any){return j2t.o('get','/human-resource/driver-regular-work-hour/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driver regular work hour.]
* method: put, responses: 200 */
static driver_regular_work_hour_update(extra:any){return j2t.o('put','/human-resource/driver-regular-work-hour/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driver regular work hour.]
* method: patch, responses: 200 */
static driver_regular_work_hour_partial_update(extra:any){return j2t.o('patch','/human-resource/driver-regular-work-hour/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driver regular work hour.]
* method: delete, responses: 204 */
static driver_regular_work_hour_delete(extra:any){return j2t.o('delete','/human-resource/driver-regular-work-hour/{id}/',null,extra)}

/**
* @extra
* driver?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static driver_shift_work_hour_list(extra:any){return j2t.o('get','/human-resource/driver-shift-work-hour/',null,extra)}

/**
* @data
* readonly id?: number
* driver: number
* timeStartWeekday: number
* timeStartHour: string
* timeEndWeekday: number
* timeEndHour: string
* method: post, responses: 201 ,model: DriverShiftWorkHour */
static driver_shift_work_hour_create(data:DriverShiftWorkHour){return j2t.o('post','/human-resource/driver-shift-work-hour/',data)}

/**
* @data
* readonly id?: number
* driver: number
* timeStartWeekday: number
* timeStartHour: string
* timeEndWeekday: number
* timeEndHour: string
* method: post, responses: 201 ,model: DriverShiftWorkHour */
static driver_shift_work_hour_bulk_create(data:DriverShiftWorkHour){return j2t.o('post','/human-resource/driver-shift-work-hour/bulk_create/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this driver shift work hour.]
* method: get, responses: 200 */
static driver_shift_work_hour_read(extra:any){return j2t.o('get','/human-resource/driver-shift-work-hour/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driver shift work hour.]
* method: put, responses: 200 */
static driver_shift_work_hour_update(extra:any){return j2t.o('put','/human-resource/driver-shift-work-hour/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driver shift work hour.]
* method: patch, responses: 200 */
static driver_shift_work_hour_partial_update(extra:any){return j2t.o('patch','/human-resource/driver-shift-work-hour/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driver shift work hour.]
* method: delete, responses: 204 */
static driver_shift_work_hour_delete(extra:any){return j2t.o('delete','/human-resource/driver-shift-work-hour/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static driver_list(extra:any){return j2t.o('get','/human-resource/driver/',null,extra)}

/**
* @data
* readonly id?: number
* homeAddress: DriverAddressMaster
* drivingLicense?: DrivingLicense
* hazmatLicense?: HazmatLicense
* psaPass?: PSAPass
* jurongPortPass?: JurongPortPass
* employeeId?: string
* firstName: string
* lastName: string
* nric?: string
* nationality?: string *enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BQ","BA","BW","BV","BR","IO","BN","BG","BF","BI","CV","KH","CM","CA","KY","CF","TD","CL","CN","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CW","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HK","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","NC","NZ","NI","NE","NG","NU","NF","KP","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SX","SK","SI","SB","SO","ZA","GS","KR","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","UM","US","UY","UZ","VU","VE","VN","VG","VI","WF","EH","YE","ZM","ZW"]
* dateOfBirth?: string [format: date ]
* contactNo: string
* contactNo2: string
* joinDate?: string [format: date ]
* resignDate?: string [format: date ]
* isActive?: boolean
* readonly organization?: number
* user?: number
* readonly organizations?: Array<number>
* method: post, responses: 201 ,model: Driver */
static driver_create(data:Driver){return j2t.o('post','/human-resource/driver/',data)}

/**
* @data
* readonly id?: number
* homeAddress: DriverAddressMaster
* drivingLicense?: DrivingLicense
* hazmatLicense?: HazmatLicense
* psaPass?: PSAPass
* jurongPortPass?: JurongPortPass
* employeeId?: string
* firstName: string
* lastName: string
* nric?: string
* nationality?: string *enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BQ","BA","BW","BV","BR","IO","BN","BG","BF","BI","CV","KH","CM","CA","KY","CF","TD","CL","CN","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CW","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HK","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","NC","NZ","NI","NE","NG","NU","NF","KP","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SX","SK","SI","SB","SO","ZA","GS","KR","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","UM","US","UY","UZ","VU","VE","VN","VG","VI","WF","EH","YE","ZM","ZW"]
* dateOfBirth?: string [format: date ]
* contactNo: string
* contactNo2: string
* joinDate?: string [format: date ]
* resignDate?: string [format: date ]
* isActive?: boolean
* readonly organization?: number
* user?: number
* readonly organizations?: Array<number>
* method: post, responses: 201 ,model: Driver */
static driver_bulk_create(data:Driver){return j2t.o('post','/human-resource/driver/bulk_create/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this driver.]
* method: get, responses: 200 */
static driver_read(extra:any){return j2t.o('get','/human-resource/driver/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driver.]
* method: put, responses: 200 */
static driver_update(extra:any){return j2t.o('put','/human-resource/driver/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driver.]
* method: patch, responses: 200 */
static driver_partial_update(extra:any){return j2t.o('patch','/human-resource/driver/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driver.]
* method: delete, responses: 204 */
static driver_delete(extra:any){return j2t.o('delete','/human-resource/driver/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driver.]
* method: get, responses: 200 */
static driver_get_drivinglicense(extra:any){return j2t.o('get','/human-resource/driver/{id}/get_drivinglicense/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driver.]
* method: get, responses: 200 */
static driver_get_hazmatlicense(extra:any){return j2t.o('get','/human-resource/driver/{id}/get_hazmatlicense/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driver.]
* method: get, responses: 200 */
static driver_get_jurongportpass(extra:any){return j2t.o('get','/human-resource/driver/{id}/get_jurongportpass/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driver.]
* method: get, responses: 200 */
static driver_get_psapass(extra:any){return j2t.o('get','/human-resource/driver/{id}/get_psapass/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static driving_license_list(extra:any){return j2t.o('get','/human-resource/driving-license/',null,extra)}

/**
* @data
* readonly id?: number
* licenseNo: string
* startDate: string [format: date ]
* expiryDate: string [format: date ]
* remarks?: string
* renewDate?: string [format: date ]
* demeritPoints: number
* driver?: number
* renewedBy?: number
* method: post, responses: 201 ,model: DrivingLicense */
static driving_license_create(data:DrivingLicense){return j2t.o('post','/human-resource/driving-license/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this driving license.]
* method: get, responses: 200 */
static driving_license_read(extra:any){return j2t.o('get','/human-resource/driving-license/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driving license.]
* method: put, responses: 200 */
static driving_license_update(extra:any){return j2t.o('put','/human-resource/driving-license/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driving license.]
* method: patch, responses: 200 */
static driving_license_partial_update(extra:any){return j2t.o('patch','/human-resource/driving-license/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this driving license.]
* method: delete, responses: 204 */
static driving_license_delete(extra:any){return j2t.o('delete','/human-resource/driving-license/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static hazmat_license_list(extra:any){return j2t.o('get','/human-resource/hazmat-license/',null,extra)}

/**
* @data
* readonly id?: number
* licenseNo: string
* startDate: string [format: date ]
* expiryDate: string [format: date ]
* remarks?: string
* renewDate?: string [format: date ]
* driver?: number
* renewedBy?: number
* method: post, responses: 201 ,model: HazmatLicense */
static hazmat_license_create(data:HazmatLicense){return j2t.o('post','/human-resource/hazmat-license/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this hazmat license.]
* method: get, responses: 200 */
static hazmat_license_read(extra:any){return j2t.o('get','/human-resource/hazmat-license/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this hazmat license.]
* method: put, responses: 200 */
static hazmat_license_update(extra:any){return j2t.o('put','/human-resource/hazmat-license/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this hazmat license.]
* method: patch, responses: 200 */
static hazmat_license_partial_update(extra:any){return j2t.o('patch','/human-resource/hazmat-license/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this hazmat license.]
* method: delete, responses: 204 */
static hazmat_license_delete(extra:any){return j2t.o('delete','/human-resource/hazmat-license/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static jurong_port_pass_list(extra:any){return j2t.o('get','/human-resource/jurong-port-pass/',null,extra)}

/**
* @data
* readonly id?: number
* licenseNo: string
* startDate: string [format: date ]
* expiryDate: string [format: date ]
* remarks?: string
* renewDate?: string [format: date ]
* driver?: number
* renewedBy?: number
* method: post, responses: 201 ,model: JurongPortPass */
static jurong_port_pass_create(data:JurongPortPass){return j2t.o('post','/human-resource/jurong-port-pass/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this jurong port pass.]
* method: get, responses: 200 */
static jurong_port_pass_read(extra:any){return j2t.o('get','/human-resource/jurong-port-pass/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this jurong port pass.]
* method: put, responses: 200 */
static jurong_port_pass_update(extra:any){return j2t.o('put','/human-resource/jurong-port-pass/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this jurong port pass.]
* method: patch, responses: 200 */
static jurong_port_pass_partial_update(extra:any){return j2t.o('patch','/human-resource/jurong-port-pass/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this jurong port pass.]
* method: delete, responses: 204 */
static jurong_port_pass_delete(extra:any){return j2t.o('delete','/human-resource/jurong-port-pass/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static msc_list(extra:any){return j2t.o('get','/human-resource/msc/',null,extra)}

/**
* @data
* readonly id?: number
* method: post, responses: 201 ,model: Msc */
static msc_create(data:Msc){return j2t.o('post','/human-resource/msc/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this msc.]
* method: get, responses: 200 */
static msc_read(extra:any){return j2t.o('get','/human-resource/msc/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this msc.]
* method: put, responses: 200 */
static msc_update(extra:any){return j2t.o('put','/human-resource/msc/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this msc.]
* method: patch, responses: 200 */
static msc_partial_update(extra:any){return j2t.o('patch','/human-resource/msc/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this msc.]
* method: delete, responses: 204 */
static msc_delete(extra:any){return j2t.o('delete','/human-resource/msc/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static psa_pass_list(extra:any){return j2t.o('get','/human-resource/psa-pass/',null,extra)}

/**
* @data
* readonly id?: number
* licenseNo: string
* startDate: string [format: date ]
* expiryDate: string [format: date ]
* remarks?: string
* renewDate?: string [format: date ]
* driver?: number
* renewedBy?: number
* method: post, responses: 201 ,model: PSAPass */
static psa_pass_create(data:PSAPass){return j2t.o('post','/human-resource/psa-pass/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this psa pass.]
* method: get, responses: 200 */
static psa_pass_read(extra:any){return j2t.o('get','/human-resource/psa-pass/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this psa pass.]
* method: put, responses: 200 */
static psa_pass_update(extra:any){return j2t.o('put','/human-resource/psa-pass/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this psa pass.]
* method: patch, responses: 200 */
static psa_pass_partial_update(extra:any){return j2t.o('patch','/human-resource/psa-pass/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this psa pass.]
* method: delete, responses: 204 */
static psa_pass_delete(extra:any){return j2t.o('delete','/human-resource/psa-pass/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static trip_rate_list(extra:any){return j2t.o('get','/human-resource/trip-rate/',null,extra)}

/**
* @data
* readonly id?: number
* amount: string [format: decimal ]
* driver: number
* method: post, responses: 201 ,model: TripRate */
static trip_rate_create(data:TripRate){return j2t.o('post','/human-resource/trip-rate/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this trip rate.]
* method: get, responses: 200 */
static trip_rate_read(extra:any){return j2t.o('get','/human-resource/trip-rate/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trip rate.]
* method: put, responses: 200 */
static trip_rate_update(extra:any){return j2t.o('put','/human-resource/trip-rate/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trip rate.]
* method: patch, responses: 200 */
static trip_rate_partial_update(extra:any){return j2t.o('patch','/human-resource/trip-rate/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trip rate.]
* method: delete, responses: 204 */
static trip_rate_delete(extra:any){return j2t.o('delete','/human-resource/trip-rate/{id}/',null,extra)}
}

export class Image_Recognition{
 
/**
* @extra
* id?: number 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static analyze_image_list(extra:any){return j2t.o('get','/image-recognition/analyze-image/',null,extra)}

/**
* @data
* readonly id?: number
* readonly status?: string
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* readonly photo?: string [format: uri ]
* readonly createdBy?: number
* readonly updatedBy?: number
* method: post, responses: 201 ,model: ImageRecognition */
static analyze_image_create(data:ImageRecognition){return j2t.o('post','/image-recognition/analyze-image/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this image recognition.]
* method: get, responses: 200 */
static analyze_image_read(extra:any){return j2t.o('get','/image-recognition/analyze-image/{id}/',null,extra)}

/**
* @extra
* id?: number 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static nested_analyze_image_list(extra:any){return j2t.o('get','/image-recognition/nested-analyze-image/',null,extra)}

/**
* @data
* readonly id?: number
* imageRecognition: ImageRecognition
* imageType?: number *enum:[0,1,2]
* readonly yetAnotherImage?: string [format: uri ]
* method: post, responses: 201 ,model: ImageRecognitionType */
static nested_analyze_image_create(data:ImageRecognitionType){return j2t.o('post','/image-recognition/nested-analyze-image/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this image recognition type.]
* method: get, responses: 200 */
static nested_analyze_image_read(extra:any){return j2t.o('get','/image-recognition/nested-analyze-image/{id}/',null,extra)}
}

export class Job_Order{
 
/**
* @extra
* job_order?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static attachment_list(extra:any){return j2t.o('get','/job-order/attachment/',null,extra)}

/**
* @data
* readonly id?: number
* readonly file?: string [format: uri ]
* readonly fileName?: string
* method: post, responses: 201 ,model: JobOrderAttachment */
static attachment_create(data:JobOrderAttachment){return j2t.o('post','/job-order/attachment/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this job order attachment.]
* method: get, responses: 200 */
static attachment_read(extra:any){return j2t.o('get','/job-order/attachment/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order attachment.]
* method: put, responses: 200 */
static attachment_update(extra:any){return j2t.o('put','/job-order/attachment/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order attachment.]
* method: patch, responses: 200 */
static attachment_partial_update(extra:any){return j2t.o('patch','/job-order/attachment/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order attachment.]
* method: delete, responses: 204 */
static attachment_delete(extra:any){return j2t.o('delete','/job-order/attachment/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static global_location_estimation_date_list(extra:any){return j2t.o('get','/job-order/global-location/estimation-date/',null,extra)}

/**
* @data
* readonly id?: number
* dateMin?: string [format: date-time ]
* dateMax?: string [format: date-time ]
* isFlexible?: boolean
* jobOrderLocation: number
* method: post, responses: 201 ,model: GlobalLocationEstimatedDates */
static global_location_estimation_date_create(data:GlobalLocationEstimatedDates){return j2t.o('post','/job-order/global-location/estimation-date/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this global location estimated dates.]
* method: get, responses: 200 */
static global_location_estimation_date_read(extra:any){return j2t.o('get','/job-order/global-location/estimation-date/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this global location estimated dates.]
* method: put, responses: 200 */
static global_location_estimation_date_update(extra:any){return j2t.o('put','/job-order/global-location/estimation-date/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this global location estimated dates.]
* method: patch, responses: 200 */
static global_location_estimation_date_partial_update(extra:any){return j2t.o('patch','/job-order/global-location/estimation-date/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this global location estimated dates.]
* method: delete, responses: 204 */
static global_location_estimation_date_delete(extra:any){return j2t.o('delete','/job-order/global-location/estimation-date/{id}/',null,extra)}

/**
* @extra
* job_order_code?: string 
* status?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static list(extra:any){return j2t.o('get','/job-order/job-order/',null,extra)}

/**
* @data
* readonly id?: number
* readonly jobOrderLocations?: Array<JobOrderLocation>
* readonly containers?: Array<JobOrderContainer>
* readonly attachments?: Array<JobOrderAttachment>
* organizationType?: string *enum:["H","F","L","C","A"]
* readonly jobOrderCode?: string
* customerRef?: string
* remarks?: string
* readonly createdDate?: string [format: date-time ]
* kivDate?: string [format: date-time ]
* cancelledDate?: string [format: date-time ]
* subleasedDate?: string [format: date-time ]
* status?: number *enum:[0,1,2,3,4,5]
* genericOrganization?: number
* jobType: number
* readonly purchaseOrder?: number
* customer?: number
* method: post, responses: 201 ,model: JobOrder */
static create(data:JobOrder){return j2t.o('post','/job-order/job-order/',data)}

/**
* @extra
* job_order_code?: string 
* status?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static get_new_code(extra:any){return j2t.o('get','/job-order/job-order/get_new_code/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order.]
* method: get, responses: 200 */
static read(extra:any){return j2t.o('get','/job-order/job-order/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order.]
* method: put, responses: 200 */
static update(extra:any){return j2t.o('put','/job-order/job-order/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order.]
* method: patch, responses: 200 */
static partial_update(extra:any){return j2t.o('patch','/job-order/job-order/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order.]
* method: delete, responses: 204 */
static delete(extra:any){return j2t.o('delete','/job-order/job-order/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order.]
* method: post, responses: 201 */
static cancel_jo(extra:any){return j2t.o('post','/job-order/job-order/{id}/cancel_jo/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order.]
* method: get, responses: 200 */
static get_by_code(extra:any){return j2t.o('get','/job-order/job-order/{id}/get_by_code/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order.]
* method: get, responses: 200 */
static get_generate_container_location(extra:any){return j2t.o('get','/job-order/job-order/{id}/get_generate_container_location/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order.]
* method: get, responses: 200 */
static get_generate_invoice(extra:any){return j2t.o('get','/job-order/job-order/{id}/get_generate_invoice/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order.]
* method: get, responses: 200 */
static get_generate_trip(extra:any){return j2t.o('get','/job-order/job-order/{id}/get_generate_trip/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order.]
* method: get, responses: 200 */
static get_jo_status(extra:any){return j2t.o('get','/job-order/job-order/{id}/get_jo_status/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order.]
* method: post, responses: 201 */
static kiv_jo(extra:any){return j2t.o('post','/job-order/job-order/{id}/kiv_jo/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order.]
* method: patch, responses: 200 */
static patch_request_change(extra:any){return j2t.o('patch','/job-order/job-order/{id}/patch_request_change/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_depot_list(extra:any){return j2t.o('get','/job-order/location/depot/',null,extra)}

/**
* @data
* readonly id?: number
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* offHireRef?: string
* pickUpRef?: string
* bookingRef?: string
* storingOrder?: string
* lastDay?: string [format: date-time ]
* lastDayInformedOn?: string [format: date-time ]
* createdBy?: number
* updatedBy?: number
* depotMaster?: number
* method: post, responses: 201 ,model: JobOrderDepot */
static location_depot_create(data:JobOrderDepot){return j2t.o('post','/job-order/location/depot/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this job order depot.]
* method: get, responses: 200 */
static location_depot_read(extra:any){return j2t.o('get','/job-order/location/depot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order depot.]
* method: put, responses: 200 */
static location_depot_update(extra:any){return j2t.o('put','/job-order/location/depot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order depot.]
* method: patch, responses: 200 */
static location_depot_partial_update(extra:any){return j2t.o('patch','/job-order/location/depot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order depot.]
* method: delete, responses: 204 */
static location_depot_delete(extra:any){return j2t.o('delete','/job-order/location/depot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order depot.]
* method: patch, responses: 200 */
static location_depot_patch_request_change(extra:any){return j2t.o('patch','/job-order/location/depot/{id}/patch_request_change/',null,extra)}

/**
* @data
* readonly id?: number
* value: string
* jobOrderPort: number
* method: post, responses: 201 ,model: GoodsPermit */
static location_goods_permits_create(data:GoodsPermit){return j2t.o('post','/job-order/location/goods-permits/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this goods permit.]
* method: get, responses: 200 */
static location_goods_permits_read(extra:any){return j2t.o('get','/job-order/location/goods-permits/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this goods permit.]
* method: delete, responses: 204 */
static location_goods_permits_delete(extra:any){return j2t.o('delete','/job-order/location/goods-permits/{id}/',null,extra)}

/**
* @extra
* journey_setting?: string 
* job_order_trip?: string 
* job_order_trip__job_order_version?: string 
* job_order_trip__job_order_version__job_order?: string 
* job_order_trip__job_order_version__job_order__job_order_code?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_location_list(extra:any){return j2t.o('get','/job-order/location/location/',null,extra)}

/**
* @data
* readonly id?: number
* locationEstimatedDate?: JobOrderLocationGlobalLocationEstimatedDates
* port?: JobOrderLocationJobOrderPort
* site?: JobOrderLocationJobOrderSite
* otherSite?: JobOrderLocationJobOrderOtherSite
* parkingLot?: JobOrderLocationJobOrderParkingLot
* depot?: JobOrderLocationJobOrderDepot
* readonly isShiftLocation?: string
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* order?: number
* locationType: string *enum:["CLIENT","PORT","DEPOT","PARKING_LOT","OTHERS"]
* objectId?: number
* remarks?: string
* createdBy?: number
* updatedBy?: number
* jobOrderTrip: number
* journeySetting?: number
* locationAction?: number
* method: post, responses: 201 ,model: JobOrderLocation */
static location_location_create(data:JobOrderLocation){return j2t.o('post','/job-order/location/location/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this job order location.]
* method: get, responses: 200 */
static location_location_read(extra:any){return j2t.o('get','/job-order/location/location/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order location.]
* method: put, responses: 200 */
static location_location_update(extra:any){return j2t.o('put','/job-order/location/location/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order location.]
* method: patch, responses: 200 */
static location_location_partial_update(extra:any){return j2t.o('patch','/job-order/location/location/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order location.]
* method: delete, responses: 204 */
static location_location_delete(extra:any){return j2t.o('delete','/job-order/location/location/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_others_list(extra:any){return j2t.o('get','/job-order/location/others/',null,extra)}

/**
* @data
* readonly id?: number
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* createdBy?: number
* updatedBy?: number
* site?: number
* category?: number
* method: post, responses: 201 ,model: JobOrderOtherSite */
static location_others_create(data:JobOrderOtherSite){return j2t.o('post','/job-order/location/others/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this job order other site.]
* method: get, responses: 200 */
static location_others_read(extra:any){return j2t.o('get','/job-order/location/others/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order other site.]
* method: put, responses: 200 */
static location_others_update(extra:any){return j2t.o('put','/job-order/location/others/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order other site.]
* method: patch, responses: 200 */
static location_others_partial_update(extra:any){return j2t.o('patch','/job-order/location/others/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order other site.]
* method: delete, responses: 204 */
static location_others_delete(extra:any){return j2t.o('delete','/job-order/location/others/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order other site.]
* method: patch, responses: 200 */
static location_others_patch_request_change(extra:any){return j2t.o('patch','/job-order/location/others/{id}/patch_request_change/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_parking_lot_list(extra:any){return j2t.o('get','/job-order/location/parking-lot/',null,extra)}

/**
* @data
* readonly id?: number
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* createdBy?: number
* updatedBy?: number
* parkingLot?: number
* method: post, responses: 201 ,model: JobOrderParkingLot */
static location_parking_lot_create(data:JobOrderParkingLot){return j2t.o('post','/job-order/location/parking-lot/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this job order parking lot.]
* method: get, responses: 200 */
static location_parking_lot_read(extra:any){return j2t.o('get','/job-order/location/parking-lot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order parking lot.]
* method: put, responses: 200 */
static location_parking_lot_update(extra:any){return j2t.o('put','/job-order/location/parking-lot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order parking lot.]
* method: patch, responses: 200 */
static location_parking_lot_partial_update(extra:any){return j2t.o('patch','/job-order/location/parking-lot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order parking lot.]
* method: delete, responses: 204 */
static location_parking_lot_delete(extra:any){return j2t.o('delete','/job-order/location/parking-lot/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order parking lot.]
* method: patch, responses: 200 */
static location_parking_lot_patch_request_change(extra:any){return j2t.o('patch','/job-order/location/parking-lot/{id}/patch_request_change/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_port_list(extra:any){return j2t.o('get','/job-order/location/port/',null,extra)}

/**
* @data
* readonly id?: number
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* vesselStore?: string
* inOutVoyageStore?: string
* billOfLading?: string
* bookingRef?: string
* deliveryOrder?: string
* portOfDischarge?: string
* portOfLoading?: string
* createdBy?: number
* updatedBy?: number
* portMaster?: number
* terminalMaster?: number
* vessel?: number
* method: post, responses: 201 ,model: JobOrderPort */
static location_port_create(data:JobOrderPort){return j2t.o('post','/job-order/location/port/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this job order port.]
* method: get, responses: 200 */
static location_port_read(extra:any){return j2t.o('get','/job-order/location/port/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order port.]
* method: put, responses: 200 */
static location_port_update(extra:any){return j2t.o('put','/job-order/location/port/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order port.]
* method: patch, responses: 200 */
static location_port_partial_update(extra:any){return j2t.o('patch','/job-order/location/port/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order port.]
* method: delete, responses: 204 */
static location_port_delete(extra:any){return j2t.o('delete','/job-order/location/port/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order port.]
* method: patch, responses: 200 */
static location_port_patch_request_change(extra:any){return j2t.o('patch','/job-order/location/port/{id}/patch_request_change/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_site_list(extra:any){return j2t.o('get','/job-order/location/site/',null,extra)}

/**
* @data
* readonly id?: number
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* createdBy?: number
* updatedBy?: number
* site?: number
* method: post, responses: 201 ,model: JobOrderSite */
static location_site_create(data:JobOrderSite){return j2t.o('post','/job-order/location/site/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this job order site.]
* method: get, responses: 200 */
static location_site_read(extra:any){return j2t.o('get','/job-order/location/site/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order site.]
* method: put, responses: 200 */
static location_site_update(extra:any){return j2t.o('put','/job-order/location/site/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order site.]
* method: patch, responses: 200 */
static location_site_partial_update(extra:any){return j2t.o('patch','/job-order/location/site/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order site.]
* method: delete, responses: 204 */
static location_site_delete(extra:any){return j2t.o('delete','/job-order/location/site/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order site.]
* method: patch, responses: 200 */
static location_site_patch_request_change(extra:any){return j2t.o('patch','/job-order/location/site/{id}/patch_request_change/',null,extra)}

/**
* @extra
* content_type__model?: string 
* content_type__app_label?: string 
* content_type?: string 
* object_id?: number 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static revision_request_list(extra:any){return j2t.o('get','/job-order/revision/request/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this revision request.]
* method: get, responses: 200 */
static revision_request_read(extra:any){return j2t.o('get','/job-order/revision/request/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this revision request.]
* method: delete, responses: 204 */
static revision_request_delete(extra:any){return j2t.o('delete','/job-order/revision/request/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this revision request.]
* method: post, responses: 201 */
static revision_request_accept_revision(extra:any){return j2t.o('post','/job-order/revision/request/{id}/accept_revision/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this revision request.]
* method: post, responses: 201 */
static revision_request_reject_revision(extra:any){return j2t.o('post','/job-order/revision/request/{id}/reject_revision/',null,extra)}

/**
* @extra
* job_order_version?: string 
* job_order_version__job_order?: string 
* job_order_version__job_order__job_order_code?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static trip_list(extra:any){return j2t.o('get','/job-order/trip/',null,extra)}

/**
* @data
* readonly id?: number
* order?: number
* jobOrderVersion: number
* tripSetting?: number
* method: post, responses: 201 ,model: JobOrderTrip */
static trip_create(data:JobOrderTrip){return j2t.o('post','/job-order/trip/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this job order trip.]
* method: get, responses: 200 */
static trip_read(extra:any){return j2t.o('get','/job-order/trip/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order trip.]
* method: put, responses: 200 */
static trip_update(extra:any){return j2t.o('put','/job-order/trip/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order trip.]
* method: patch, responses: 200 */
static trip_partial_update(extra:any){return j2t.o('patch','/job-order/trip/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order trip.]
* method: delete, responses: 204 */
static trip_delete(extra:any){return j2t.o('delete','/job-order/trip/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order trip.]
* method: post, responses: 201 */
static trip_add_location(extra:any){return j2t.o('post','/job-order/trip/{id}/add_location/',null,extra)}

/**
* @extra
* job_order?: string 
* version?: string 
* is_active?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static version_list(extra:any){return j2t.o('get','/job-order/version/',null,extra)}

/**
* @data
* readonly id?: number
* jobOrderTrips: Array<JobOrderVersionJobOrderTrip>
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* version: string
* isActive?: boolean
* createdBy?: number
* updatedBy?: number
* jobOrder: number
* method: post, responses: 201 ,model: JobOrderVersion */
static version_create(data:JobOrderVersion){return j2t.o('post','/job-order/version/',data)}

/**
* @data
* readonly id?: number
* jobOrderTrips: Array<JobOrderVersionJobOrderTrip>
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* version: string
* isActive?: boolean
* createdBy?: number
* updatedBy?: number
* jobOrder: number
* method: post, responses: 201 ,model: JobOrderVersion */
static version_post_merge_container_locations(data:JobOrderVersion){return j2t.o('post','/job-order/version/post_merge_container_locations/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this job order version.]
* method: get, responses: 200 */
static version_read(extra:any){return j2t.o('get','/job-order/version/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order version.]
* method: put, responses: 200 */
static version_update(extra:any){return j2t.o('put','/job-order/version/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order version.]
* method: patch, responses: 200 */
static version_partial_update(extra:any){return j2t.o('patch','/job-order/version/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order version.]
* method: delete, responses: 204 */
static version_delete(extra:any){return j2t.o('delete','/job-order/version/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order version.]
* method: post, responses: 201 */
static version_post_copy_version(extra:any){return j2t.o('post','/job-order/version/{id}/post_copy_version/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job order version.]
* method: post, responses: 201 */
static version_post_generate_trip(extra:any){return j2t.o('post','/job-order/version/{id}/post_generate_trip/',null,extra)}
}

export class Job_Setting{
 
/**
* @extra
* name?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static job_category_list(extra:any){return j2t.o('get','/job-setting/job-category/',null,extra)}

/**
* @data
* readonly id?: number
* jobTypes?: Array<JobCategoryJobType>
* organizationType?: string *enum:["H","F","L","C","A"]
* name: string
* genericOrganization?: number
* method: post, responses: 201 ,model: JobCategory */
static job_category_create(data:JobCategory){return j2t.o('post','/job-setting/job-category/',data)}

/**
* @extra
* id: string 
* method: get, responses: 200 */
static job_category_read(extra:any){return j2t.o('get','/job-setting/job-category/{id}/',null,extra)}

/**
* @extra
* id: string 
* method: put, responses: 200 */
static job_category_update(extra:any){return j2t.o('put','/job-setting/job-category/{id}/',null,extra)}

/**
* @extra
* id: string 
* method: patch, responses: 200 */
static job_category_partial_update(extra:any){return j2t.o('patch','/job-setting/job-category/{id}/',null,extra)}

/**
* @extra
* id: string 
* method: delete, responses: 204 */
static job_category_delete(extra:any){return j2t.o('delete','/job-setting/job-category/{id}/',null,extra)}

/**
* @extra
* job_category?: string 
* name?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static job_type_list(extra:any){return j2t.o('get','/job-setting/job-type/',null,extra)}

/**
* @data
* readonly id?: number
* tripSettings?: Array<JobTypeTripSetting>
* readonly jobTypeLabel?: string
* name: string
* jobCategory: number
* method: post, responses: 201 ,model: JobType */
static job_type_create(data:JobType){return j2t.o('post','/job-setting/job-type/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this job type.]
* method: get, responses: 200 */
static job_type_read(extra:any){return j2t.o('get','/job-setting/job-type/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job type.]
* method: put, responses: 200 */
static job_type_update(extra:any){return j2t.o('put','/job-setting/job-type/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job type.]
* method: patch, responses: 200 */
static job_type_partial_update(extra:any){return j2t.o('patch','/job-setting/job-type/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job type.]
* method: delete, responses: 204 */
static job_type_delete(extra:any){return j2t.o('delete','/job-setting/job-type/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this job type.]
* method: post, responses: 201 */
static job_type_add_trip(extra:any){return j2t.o('post','/job-setting/job-type/{id}/add-trip/',null,extra)}

/**
* @extra
* trip_setting?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static journey_setting_list(extra:any){return j2t.o('get','/job-setting/journey-setting/',null,extra)}

/**
* @data
* readonly id?: number
* order?: number
* location: string
* tripSetting: number
* locationAction?: number
* method: post, responses: 201 ,model: JourneySetting */
static journey_setting_create(data:JourneySetting){return j2t.o('post','/job-setting/journey-setting/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this journey setting.]
* method: get, responses: 200 */
static journey_setting_read(extra:any){return j2t.o('get','/job-setting/journey-setting/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this journey setting.]
* method: put, responses: 200 */
static journey_setting_update(extra:any){return j2t.o('put','/job-setting/journey-setting/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this journey setting.]
* method: patch, responses: 200 */
static journey_setting_partial_update(extra:any){return j2t.o('patch','/job-setting/journey-setting/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this journey setting.]
* method: delete, responses: 204 */
static journey_setting_delete(extra:any){return j2t.o('delete','/job-setting/journey-setting/{id}/',null,extra)}

/**
* @extra
* location_action?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_action_event_list(extra:any){return j2t.o('get','/job-setting/location-action-event/',null,extra)}

/**
* @data
* readonly id?: number
* order?: number
* eventType: string *enum:["departure","position","arrival","at","pt","x_ray","c_c","do_c","cl_c","dol_c","ce_c","doe_c","gl_c","clg_c","ge_c","ceg_c","l_c","un_c","br","w","pc","v_p","-"]
* locationAction: number
* method: post, responses: 201 ,model: LocationActionEvent */
static location_action_event_create(data:LocationActionEvent){return j2t.o('post','/job-setting/location-action-event/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this location action event.]
* method: get, responses: 200 */
static location_action_event_read(extra:any){return j2t.o('get','/job-setting/location-action-event/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this location action event.]
* method: put, responses: 200 */
static location_action_event_update(extra:any){return j2t.o('put','/job-setting/location-action-event/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this location action event.]
* method: patch, responses: 200 */
static location_action_event_partial_update(extra:any){return j2t.o('patch','/job-setting/location-action-event/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this location action event.]
* method: delete, responses: 204 */
static location_action_event_delete(extra:any){return j2t.o('delete','/job-setting/location-action-event/{id}/',null,extra)}

/**
* @extra
* location?: string 
* action_name?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_action_list(extra:any){return j2t.o('get','/job-setting/location-action/',null,extra)}

/**
* @data
* readonly id?: number
* events?: Array<LocationActionLocationActionEvent>
* organizationType?: string *enum:["H","F","L","C","A"]
* actionName: string
* description?: string
* location?: string
* locationId?: number
* genericOrganization?: number
* method: post, responses: 201 ,model: LocationAction */
static location_action_create(data:LocationAction){return j2t.o('post','/job-setting/location-action/',data)}

/**
* @data
* readonly id?: number
* events?: Array<LocationActionLocationActionEvent>
* organizationType?: string *enum:["H","F","L","C","A"]
* actionName: string
* description?: string
* location?: string
* locationId?: number
* genericOrganization?: number
* method: post, responses: 201 ,model: LocationAction */
static location_action_bulk_create(data:LocationAction){return j2t.o('post','/job-setting/location-action/bulk_create/',data)}

/**
* @extra
* id: string 
* method: get, responses: 200 */
static location_action_read(extra:any){return j2t.o('get','/job-setting/location-action/{id}/',null,extra)}

/**
* @extra
* id: string 
* method: put, responses: 200 */
static location_action_update(extra:any){return j2t.o('put','/job-setting/location-action/{id}/',null,extra)}

/**
* @extra
* id: string 
* method: patch, responses: 200 */
static location_action_partial_update(extra:any){return j2t.o('patch','/job-setting/location-action/{id}/',null,extra)}

/**
* @extra
* id: string 
* method: delete, responses: 204 */
static location_action_delete(extra:any){return j2t.o('delete','/job-setting/location-action/{id}/',null,extra)}

/**
* @extra
* job_type?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static trip_setting_list(extra:any){return j2t.o('get','/job-setting/trip-setting/',null,extra)}

/**
* @data
* readonly id?: number
* order?: number
* jobType: number
* method: post, responses: 201 ,model: TripSetting */
static trip_setting_create(data:TripSetting){return j2t.o('post','/job-setting/trip-setting/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this trip setting.]
* method: get, responses: 200 */
static trip_setting_read(extra:any){return j2t.o('get','/job-setting/trip-setting/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trip setting.]
* method: put, responses: 200 */
static trip_setting_update(extra:any){return j2t.o('put','/job-setting/trip-setting/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trip setting.]
* method: patch, responses: 200 */
static trip_setting_partial_update(extra:any){return j2t.o('patch','/job-setting/trip-setting/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trip setting.]
* method: delete, responses: 204 */
static trip_setting_delete(extra:any){return j2t.o('delete','/job-setting/trip-setting/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trip setting.]
* method: post, responses: 201 */
static trip_setting_add_journey(extra:any){return j2t.o('post','/job-setting/trip-setting/{id}/add_journey/',null,extra)}
}

export class Notifications{
 
/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static list(extra:any){return j2t.o('get','/notifications/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static follow_list(extra:any){return j2t.o('get','/notifications/follow/',null,extra)}

/**
* @data
* started?: string [format: date-time ]
* followObject?: GenericConstruct
* method: post, responses: 201 ,model: Follow */
static follow_create(data:Follow){return j2t.o('post','/notifications/follow/',data)}

/**
* @data
* method: delete, responses: 204 */
static follow_delete(){return j2t.o('delete','/notifications/follow/')}

/**
* @data
* method: post, responses: 201 */
static read_create(){return j2t.o('post','/notifications/read/')}

/**
* @data
* method: post, responses: 201 */
static remove_create(){return j2t.o('post','/notifications/remove/')}

/**
* @data
* method: post, responses: 201 */
static unread_create(){return j2t.o('post','/notifications/unread/')}

/**
* @extra
* id: integer [A unique integer value identifying this action.]
* method: get, responses: 200 */
static read(extra:any){return j2t.o('get','/notifications/{id}/',null,extra)}
}

export class Organization{
 
/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static contacts_list(extra:any){return j2t.o('get','/organization/contacts/',null,extra)}

/**
* @data
* code: string
* method: post, responses: 201 ,model: CreateContactInvite */
static contacts_add_contact(data:CreateContactInvite){return j2t.o('post','/organization/contacts/add-contact/',data)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static contacts_invitation_received(extra:any){return j2t.o('get','/organization/contacts/received/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static contacts_invitation_sent(extra:any){return j2t.o('get','/organization/contacts/sent/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this contact invite.]
* method: patch, responses: 200 */
static contacts_accept_invite(extra:any){return j2t.o('patch','/organization/contacts/{id}/accept/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this contact invite.]
* method: get, responses: 200 */
static contacts_non_sync_site(extra:any){return j2t.o('get','/organization/contacts/{id}/non_sync_site/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this contact invite.]
* method: patch, responses: 200 */
static contacts_reject_invite(extra:any){return j2t.o('patch','/organization/contacts/{id}/reject/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this contact invite.]
* method: patch, responses: 200 */
static contacts_remove_connection(extra:any){return j2t.o('patch','/organization/contacts/{id}/remove/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this contact invite.]
* method: get, responses: 200 */
static contacts_suggested_sync_site(extra:any){return j2t.o('get','/organization/contacts/{id}/suggested_sync_site/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this contact invite.]
* method: patch, responses: 200 */
static contacts_withdraw_invite(extra:any){return j2t.o('patch','/organization/contacts/{id}/withdraw/',null,extra)}

/*** description: Shows the current organization, error if there is no current organization set
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static current_list(extra:any){return j2t.o('get','/organization/current-organization/',null,extra)}

/*** description: Sets the current organization
* @data
* method: post, responses: 201 ,model: Organization */
static current_create(data:Organization){return j2t.o('post','/organization/current-organization/',data)}

/**
* @data
* method: put, responses: 200 ,model: Organization */
static current_update(data:Organization){return j2t.o('put','/organization/current-organization/',data)}

/**
* @data
* method: patch, responses: 200 ,model: Organization */
static current_partial_update(data:Organization){return j2t.o('patch','/organization/current-organization/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this Customer.]
* method: get, responses: 200 */
static customers_read(extra:any){return j2t.o('get','/organization/customers/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this Customer.]
* method: post, responses: 201 */
static customers_add_site(extra:any){return j2t.o('post','/organization/customers/{id}/add_site/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this Customer.]
* method: get, responses: 200 */
static customers_get_haulier_connection_status_with_site(extra:any){return j2t.o('get','/organization/customers/{id}/get_haulier_connection_status_with_site/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this Customer.]
* method: get, responses: 200 */
static customers_share_site(extra:any){return j2t.o('get','/organization/customers/{id}/share_site/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this Customer.]
* method: post, responses: 201 */
static customers_share_site_to_haulier(extra:any){return j2t.o('post','/organization/customers/{id}/share_site_to_haulier/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this Haulier.]
* method: get, responses: 200 */
static hauliers_read(extra:any){return j2t.o('get','/organization/hauliers/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this generic organization.]
* method: get, responses: 200 */
static read(extra:any){return j2t.o('get','/organization/organization/{id}/',null,extra)}

/*** description: Lists available organization permissions only (read only)
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static user_permissions_list(extra:any){return j2t.o('get','/organization/user-permissions/',null,extra)}
}

export class Portnet{
 
/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static dcon_list(extra:any){return j2t.o('get','/portnet/dcon/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this dcon.]
* method: get, responses: 200 */
static dcon_read(extra:any){return j2t.o('get','/portnet/dcon/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static dpre_list(extra:any){return j2t.o('get','/portnet/dpre/',null,extra)}

/**
* @data
* readonly id?: number
* veda: Veda
* containerMaster: number
* authNo: string
* billOfLading: string
* discharge: string
* containerOperator: string
* dangerousGoods: string
* deliveryStatus: string
* deliveryCancel: string
* loloAccount: string
* subletCancel: string
* subletRelease: string
* reasonCategory?: string
* reason?: string
* isActive?: boolean
* container?: number
* method: post, responses: 201 ,model: Dpre */
static dpre_create(data:Dpre){return j2t.o('post','/portnet/dpre/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this dpre.]
* method: get, responses: 200 */
static dpre_read(extra:any){return j2t.o('get','/portnet/dpre/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this dpre.]
* method: put, responses: 200 */
static dpre_update(extra:any){return j2t.o('put','/portnet/dpre/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this dpre.]
* method: patch, responses: 200 */
static dpre_partial_update(extra:any){return j2t.o('patch','/portnet/dpre/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static dpre_exception_list(extra:any){return j2t.o('get','/portnet/dpre_exception/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static hte_list(extra:any){return j2t.o('get','/portnet/hte/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static scda_list(extra:any){return j2t.o('get','/portnet/scda/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this scda.]
* method: get, responses: 200 */
static scda_read(extra:any){return j2t.o('get','/portnet/scda/{id}/',null,extra)}

/**
* @extra
* vessel?: string 
* name?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static veda_list(extra:any){return j2t.o('get','/portnet/veda/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this veda.]
* method: get, responses: 200 */
static veda_read(extra:any){return j2t.o('get','/portnet/veda/{id}/',null,extra)}
}

export class Purchase_Order{
 
/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static purchase_order_item_location_list(extra:any){return j2t.o('get','/purchase-order/purchase-order-item-location/',null,extra)}

/**
* @data
* readonly id?: number
* port?: PurchaseOrderPort
* site?: PurchaseOrderSite
* otherSite?: PurchaseOrderOtherSite
* parkingLot?: PurchaseOrderParkingLot
* depot?: PurchaseOrderDepot
* locationType: string *enum:["CLIENT","PORT","DEPOT","PARKING_LOT","OTHERS"]
* locationId?: number
* remarks?: string
* belongsTo: number
* method: post, responses: 201 ,model: PurchaseOrderItemLocation */
static purchase_order_item_location_create(data:PurchaseOrderItemLocation){return j2t.o('post','/purchase-order/purchase-order-item-location/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order item location.]
* method: get, responses: 200 */
static purchase_order_item_location_read(extra:any){return j2t.o('get','/purchase-order/purchase-order-item-location/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order item location.]
* method: put, responses: 200 */
static purchase_order_item_location_update(extra:any){return j2t.o('put','/purchase-order/purchase-order-item-location/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order item location.]
* method: patch, responses: 200 */
static purchase_order_item_location_partial_update(extra:any){return j2t.o('patch','/purchase-order/purchase-order-item-location/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order item location.]
* method: delete, responses: 204 */
static purchase_order_item_location_delete(extra:any){return j2t.o('delete','/purchase-order/purchase-order-item-location/{id}/',null,extra)}

/**
* @extra
* purchase_order?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static purchase_order_item_list(extra:any){return j2t.o('get','/purchase-order/purchase-order-item/',null,extra)}

/**
* @data
* readonly id?: number
* actualPrice: string [format: decimal ]
* deliveryDate?: string [format: date-time ]
* description?: string
* remarks?: string
* purchaseOrder: number
* salesCode?: number
* itemInvoiceCode: number
* item: number
* gstRate: number
* containerMaster?: number
* method: post, responses: 201 ,model: PurchaseOrderItem */
static purchase_order_item_create(data:PurchaseOrderItem){return j2t.o('post','/purchase-order/purchase-order-item/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order item.]
* method: get, responses: 200 */
static purchase_order_item_read(extra:any){return j2t.o('get','/purchase-order/purchase-order-item/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order item.]
* method: put, responses: 200 */
static purchase_order_item_update(extra:any){return j2t.o('put','/purchase-order/purchase-order-item/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order item.]
* method: patch, responses: 200 */
static purchase_order_item_partial_update(extra:any){return j2t.o('patch','/purchase-order/purchase-order-item/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order item.]
* method: delete, responses: 204 */
static purchase_order_item_delete(extra:any){return j2t.o('delete','/purchase-order/purchase-order-item/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order.]
* method: put, responses: 200 */
static purchase_order_quantity_update(extra:any){return j2t.o('put','/purchase-order/purchase-order-quantity/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order.]
* method: patch, responses: 200 */
static purchase_order_quantity_partial_update(extra:any){return j2t.o('patch','/purchase-order/purchase-order-quantity/{id}/',null,extra)}

/**
* @extra
* purchase_order_number?: string 
* status?: string 
* purchase_contract?: number 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static list(extra:any){return j2t.o('get','/purchase-order/purchase-order/',null,extra)}

/**
* @data
* readonly id?: number
* readonly purchaseOrderNumber?: string
* purchaseOrderItems: Array<PurchaseOrderPurchaseOrderItem>
* acceptedBy?: UserGeneral
* rejectedBy?: UserGeneral
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* organizationType?: string *enum:["H","F","L","C","A"]
* status?: string *enum:["STANDING_ORDER","QUOTATION","JOB_ORDER","UNASSIGNED"]
* purchaseContract?: number
* startContractDate?: string [format: date-time ]
* endContractDate?: string [format: date-time ]
* bufferTime?: number
* remarks?: string
* isActive?: boolean
* acceptedDate?: string [format: date-time ]
* rejectedDate?: string [format: date-time ]
* contractCycleInDays?: number
* modeOfPayment: string
* paymentTerms?: string
* createdBy?: number
* updatedBy?: number
* genericOrganization?: number
* method: post, responses: 201 ,model: PurchaseOrder */
static create(data:PurchaseOrder){return j2t.o('post','/purchase-order/purchase-order/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order.]
* method: get, responses: 200 */
static read(extra:any){return j2t.o('get','/purchase-order/purchase-order/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order.]
* method: put, responses: 200 */
static update(extra:any){return j2t.o('put','/purchase-order/purchase-order/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order.]
* method: patch, responses: 200 */
static partial_update(extra:any){return j2t.o('patch','/purchase-order/purchase-order/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order.]
* method: delete, responses: 204 */
static delete(extra:any){return j2t.o('delete','/purchase-order/purchase-order/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order.]
* method: post, responses: 201 */
static accept_purchase_order(extra:any){return j2t.o('post','/purchase-order/purchase-order/{id}/accept_purchase_order/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this purchase order.]
* method: post, responses: 201 */
static reject_purchase_order(extra:any){return j2t.o('post','/purchase-order/purchase-order/{id}/reject_purchase_order/',null,extra)}
}

export class Quotation{
 
/**
* @extra
* quotation_contract_item?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static quotation_contract_item_location_list(extra:any){return j2t.o('get','/quotation/quotation-contract-item-location/',null,extra)}

/**
* @data
* readonly id?: number
* port?: QuotationContractPort
* site?: QuotationContractSite
* otherSite?: QuotationContractOtherSite
* parkingLot?: QuotationContractParkingLot
* depot?: QuotationContractDepot
* locationType: string *enum:["CLIENT","PORT","DEPOT","PARKING_LOT","OTHERS"]
* remarks?: string
* quotationContractItem: number
* method: post, responses: 201 ,model: QuotationContractItemLocation */
static quotation_contract_item_location_create(data:QuotationContractItemLocation){return j2t.o('post','/quotation/quotation-contract-item-location/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation contract item location.]
* method: get, responses: 200 */
static quotation_contract_item_location_read(extra:any){return j2t.o('get','/quotation/quotation-contract-item-location/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation contract item location.]
* method: put, responses: 200 */
static quotation_contract_item_location_update(extra:any){return j2t.o('put','/quotation/quotation-contract-item-location/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation contract item location.]
* method: patch, responses: 200 */
static quotation_contract_item_location_partial_update(extra:any){return j2t.o('patch','/quotation/quotation-contract-item-location/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation contract item location.]
* method: delete, responses: 204 */
static quotation_contract_item_location_delete(extra:any){return j2t.o('delete','/quotation/quotation-contract-item-location/{id}/',null,extra)}

/**
* @extra
* quotation_contract?: string 
* billing_unit?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static quotation_contract_item_list(extra:any){return j2t.o('get','/quotation/quotation-contract-item/',null,extra)}

/**
* @data
* readonly id?: number
* quantity: number
* deliveryDate?: string [format: date-time ]
* description?: string
* quotationContract: number
* billingUnit: number
* isoCode?: number
* containerNumber?: number
* method: post, responses: 201 ,model: QuotationContractItem */
static quotation_contract_item_create(data:QuotationContractItem){return j2t.o('post','/quotation/quotation-contract-item/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation contract item.]
* method: get, responses: 200 */
static quotation_contract_item_read(extra:any){return j2t.o('get','/quotation/quotation-contract-item/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation contract item.]
* method: put, responses: 200 */
static quotation_contract_item_update(extra:any){return j2t.o('put','/quotation/quotation-contract-item/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation contract item.]
* method: patch, responses: 200 */
static quotation_contract_item_partial_update(extra:any){return j2t.o('patch','/quotation/quotation-contract-item/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation contract item.]
* method: delete, responses: 204 */
static quotation_contract_item_delete(extra:any){return j2t.o('delete','/quotation/quotation-contract-item/{id}/',null,extra)}

/**
* @extra
* quotation_contract_number?: string 
* customer?: string 
* is_active?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static quotation_contract_list(extra:any){return j2t.o('get','/quotation/quotation-contract/',null,extra)}

/**
* @data
* readonly id?: number
* readonly quotationContractItems?: Array<QuotationContractQuotationContractItem>
* readonly quotationContractLocationItems?: string
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* quotationContractNumber?: string
* startContractDate: string [format: date-time ]
* endContractDate: string [format: date-time ]
* isActive?: boolean
* remarks?: string
* createdBy?: number
* updatedBy?: number
* customer: number
* method: post, responses: 201 ,model: QuotationContract */
static quotation_contract_create(data:QuotationContract){return j2t.o('post','/quotation/quotation-contract/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation contract.]
* method: get, responses: 200 */
static quotation_contract_read(extra:any){return j2t.o('get','/quotation/quotation-contract/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation contract.]
* method: put, responses: 200 */
static quotation_contract_update(extra:any){return j2t.o('put','/quotation/quotation-contract/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation contract.]
* method: patch, responses: 200 */
static quotation_contract_partial_update(extra:any){return j2t.o('patch','/quotation/quotation-contract/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation contract.]
* method: delete, responses: 204 */
static quotation_contract_delete(extra:any){return j2t.o('delete','/quotation/quotation-contract/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation contract.]
* method: get, responses: 200 */
static quotation_contract_get_by_job_order(extra:any){return j2t.o('get','/quotation/quotation-contract/{id}/get_by_job_order/',null,extra)}

/**
* @extra
* quotation?: string 
* quotation_contract_item?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static quotation_item_list(extra:any){return j2t.o('get','/quotation/quotation-item/',null,extra)}

/**
* @data
* readonly id?: number
* setPrice?: string [format: decimal ]
* remarks?: string
* quotation: number
* quotationContract?: number
* quotationContractItem: number
* salesCode: number
* gstRate: number
* method: post, responses: 201 ,model: QuotationItem */
static quotation_item_create(data:QuotationItem){return j2t.o('post','/quotation/quotation-item/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation item.]
* method: get, responses: 200 */
static quotation_item_read(extra:any){return j2t.o('get','/quotation/quotation-item/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation item.]
* method: put, responses: 200 */
static quotation_item_update(extra:any){return j2t.o('put','/quotation/quotation-item/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation item.]
* method: patch, responses: 200 */
static quotation_item_partial_update(extra:any){return j2t.o('patch','/quotation/quotation-item/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation item.]
* method: delete, responses: 204 */
static quotation_item_delete(extra:any){return j2t.o('delete','/quotation/quotation-item/{id}/',null,extra)}

/**
* @extra
* id: string 
* method: get, responses: 200 */
static quotation_version_read(extra:any){return j2t.o('get','/quotation/quotation-version/{id}/',null,extra)}

/**
* @extra
* haulier?: string 
* quotation_contract?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static list(extra:any){return j2t.o('get','/quotation/quotation/',null,extra)}

/**
* @data
* readonly id?: number
* createdBy?: UserGeneral
* updatedBy?: UserGeneral
* acceptedBy?: UserGeneral
* withdrawnBy?: UserGeneral
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* quotationNumber?: string
* isActive?: boolean
* acceptedOn?: string [format: date-time ]
* withdrawnOn?: string [format: date-time ]
* quotationContract: number
* haulier: number
* method: post, responses: 201 ,model: Quotation */
static create(data:Quotation){return j2t.o('post','/quotation/quotation/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation.]
* method: get, responses: 200 */
static read(extra:any){return j2t.o('get','/quotation/quotation/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation.]
* method: delete, responses: 204 */
static delete(extra:any){return j2t.o('delete','/quotation/quotation/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation.]
* method: post, responses: 201 */
static post_accept_quotation(extra:any){return j2t.o('post','/quotation/quotation/{id}/post_accept_quotation/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this quotation.]
* method: post, responses: 201 */
static post_withdraw_quotation(extra:any){return j2t.o('post','/quotation/quotation/{id}/post_withdraw_quotation/',null,extra)}
}

export class Sales{
 
/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static billing_unit_master_list(extra:any){return j2t.o('get','/sales/billing-unit-master/',null,extra)}

/**
* @data
* readonly id?: number
* unitName: string
* unitSymbol: string
* hasLocationSetting?: boolean
* isSystemDefault?: boolean
* method: post, responses: 201 ,model: BillingUnitMaster */
static billing_unit_master_create(data:BillingUnitMaster){return j2t.o('post','/sales/billing-unit-master/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this billing unit master.]
* method: get, responses: 200 */
static billing_unit_master_read(extra:any){return j2t.o('get','/sales/billing-unit-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this billing unit master.]
* method: put, responses: 200 */
static billing_unit_master_update(extra:any){return j2t.o('put','/sales/billing-unit-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this billing unit master.]
* method: patch, responses: 200 */
static billing_unit_master_partial_update(extra:any){return j2t.o('patch','/sales/billing-unit-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this billing unit master.]
* method: delete, responses: 204 */
static billing_unit_master_delete(extra:any){return j2t.o('delete','/sales/billing-unit-master/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static goods_and_services_tax_list(extra:any){return j2t.o('get','/sales/goods-and-services-tax/',null,extra)}

/**
* @data
* readonly id?: number
* name: string
* description?: string
* salesRate: string [format: decimal ]
* purchaseRate: string [format: decimal ]
* method: post, responses: 201 ,model: GoodsAndServicesTax */
static goods_and_services_tax_create(data:GoodsAndServicesTax){return j2t.o('post','/sales/goods-and-services-tax/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this goods and services tax.]
* method: get, responses: 200 */
static goods_and_services_tax_read(extra:any){return j2t.o('get','/sales/goods-and-services-tax/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this goods and services tax.]
* method: put, responses: 200 */
static goods_and_services_tax_update(extra:any){return j2t.o('put','/sales/goods-and-services-tax/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this goods and services tax.]
* method: patch, responses: 200 */
static goods_and_services_tax_partial_update(extra:any){return j2t.o('patch','/sales/goods-and-services-tax/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this goods and services tax.]
* method: delete, responses: 204 */
static goods_and_services_tax_delete(extra:any){return j2t.o('delete','/sales/goods-and-services-tax/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static haulier_billing_unit_list(extra:any){return j2t.o('get','/sales/haulier-billing-unit/',null,extra)}

/**
* @data
* readonly id?: number
* billingUnitMaster: HaulierBillingUnitBillingUnit
* haulier: number
* method: post, responses: 201 ,model: HaulierBillingUnit */
static haulier_billing_unit_create(data:HaulierBillingUnit){return j2t.o('post','/sales/haulier-billing-unit/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this haulier billing unit.]
* method: get, responses: 200 */
static haulier_billing_unit_read(extra:any){return j2t.o('get','/sales/haulier-billing-unit/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this haulier billing unit.]
* method: put, responses: 200 */
static haulier_billing_unit_update(extra:any){return j2t.o('put','/sales/haulier-billing-unit/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this haulier billing unit.]
* method: patch, responses: 200 */
static haulier_billing_unit_partial_update(extra:any){return j2t.o('patch','/sales/haulier-billing-unit/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this haulier billing unit.]
* method: delete, responses: 204 */
static haulier_billing_unit_delete(extra:any){return j2t.o('delete','/sales/haulier-billing-unit/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static invoice_code_list(extra:any){return j2t.o('get','/sales/invoice-code/',null,extra)}

/**
* @data
* readonly id?: number
* invoiceCodeType: string *enum:["FC","VC","SC"]
* code?: string
* description?: string
* unitPrice: string [format: decimal ]
* haulier?: number
* haulierBillingUnit: number
* method: post, responses: 201 ,model: InvoiceCode */
static invoice_code_create(data:InvoiceCode){return j2t.o('post','/sales/invoice-code/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice code.]
* method: get, responses: 200 */
static invoice_code_read(extra:any){return j2t.o('get','/sales/invoice-code/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice code.]
* method: put, responses: 200 */
static invoice_code_update(extra:any){return j2t.o('put','/sales/invoice-code/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice code.]
* method: patch, responses: 200 */
static invoice_code_partial_update(extra:any){return j2t.o('patch','/sales/invoice-code/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this invoice code.]
* method: delete, responses: 204 */
static invoice_code_delete(extra:any){return j2t.o('delete','/sales/invoice-code/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static item_category_list(extra:any){return j2t.o('get','/sales/item/category/',null,extra)}

/**
* @data
* readonly id?: number
* name: string
* method: post, responses: 201 ,model: ItemCategory */
static item_category_create(data:ItemCategory){return j2t.o('post','/sales/item/category/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this item category.]
* method: get, responses: 200 */
static item_category_read(extra:any){return j2t.o('get','/sales/item/category/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item category.]
* method: put, responses: 200 */
static item_category_update(extra:any){return j2t.o('put','/sales/item/category/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item category.]
* method: patch, responses: 200 */
static item_category_partial_update(extra:any){return j2t.o('patch','/sales/item/category/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item category.]
* method: delete, responses: 204 */
static item_category_delete(extra:any){return j2t.o('delete','/sales/item/category/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static item_invoice_code_price_log_list(extra:any){return j2t.o('get','/sales/item/invoice-code-price-log/',null,extra)}

/**
* @data
* readonly id?: number
* price: string [format: decimal ]
* dateOfChange?: string [format: date-time ]
* itemInvoiceCode: number
* method: post, responses: 201 ,model: ItemInvoiceCodePriceLog */
static item_invoice_code_price_log_create(data:ItemInvoiceCodePriceLog){return j2t.o('post','/sales/item/invoice-code-price-log/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this item invoice code price log.]
* method: get, responses: 200 */
static item_invoice_code_price_log_read(extra:any){return j2t.o('get','/sales/item/invoice-code-price-log/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item invoice code price log.]
* method: put, responses: 200 */
static item_invoice_code_price_log_update(extra:any){return j2t.o('put','/sales/item/invoice-code-price-log/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item invoice code price log.]
* method: patch, responses: 200 */
static item_invoice_code_price_log_partial_update(extra:any){return j2t.o('patch','/sales/item/invoice-code-price-log/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item invoice code price log.]
* method: delete, responses: 204 */
static item_invoice_code_price_log_delete(extra:any){return j2t.o('delete','/sales/item/invoice-code-price-log/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static item_invoice_code_list(extra:any){return j2t.o('get','/sales/item/invoice-code/',null,extra)}

/**
* @data
* readonly id?: number
* code?: string
* description?: string
* unitPrice: string [format: decimal ]
* genericOrganization: number
* gstRate: number
* item: Array<number>
* method: post, responses: 201 ,model: ItemInvoiceCode */
static item_invoice_code_create(data:ItemInvoiceCode){return j2t.o('post','/sales/item/invoice-code/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this item invoice code.]
* method: get, responses: 200 */
static item_invoice_code_read(extra:any){return j2t.o('get','/sales/item/invoice-code/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item invoice code.]
* method: put, responses: 200 */
static item_invoice_code_update(extra:any){return j2t.o('put','/sales/item/invoice-code/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item invoice code.]
* method: patch, responses: 200 */
static item_invoice_code_partial_update(extra:any){return j2t.o('patch','/sales/item/invoice-code/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item invoice code.]
* method: delete, responses: 204 */
static item_invoice_code_delete(extra:any){return j2t.o('delete','/sales/item/invoice-code/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static item_master_area_list(extra:any){return j2t.o('get','/sales/item/master-area/',null,extra)}

/**
* @data
* readonly id?: number
* itemMaster: number
* areaCode: number
* method: post, responses: 201 ,model: ItemMasterArea */
static item_master_area_create(data:ItemMasterArea){return j2t.o('post','/sales/item/master-area/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this item master area.]
* method: get, responses: 200 */
static item_master_area_read(extra:any){return j2t.o('get','/sales/item/master-area/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item master area.]
* method: put, responses: 200 */
static item_master_area_update(extra:any){return j2t.o('put','/sales/item/master-area/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item master area.]
* method: patch, responses: 200 */
static item_master_area_partial_update(extra:any){return j2t.o('patch','/sales/item/master-area/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item master area.]
* method: delete, responses: 204 */
static item_master_area_delete(extra:any){return j2t.o('delete','/sales/item/master-area/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static item_master_iso_list(extra:any){return j2t.o('get','/sales/item/master-iso/',null,extra)}

/**
* @data
* readonly id?: number
* itemMaster: number
* isoCode: number
* method: post, responses: 201 ,model: ItemMasterISO */
static item_master_iso_create(data:ItemMasterISO){return j2t.o('post','/sales/item/master-iso/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this item master iso.]
* method: get, responses: 200 */
static item_master_iso_read(extra:any){return j2t.o('get','/sales/item/master-iso/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item master iso.]
* method: put, responses: 200 */
static item_master_iso_update(extra:any){return j2t.o('put','/sales/item/master-iso/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item master iso.]
* method: patch, responses: 200 */
static item_master_iso_partial_update(extra:any){return j2t.o('patch','/sales/item/master-iso/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item master iso.]
* method: delete, responses: 204 */
static item_master_iso_delete(extra:any){return j2t.o('delete','/sales/item/master-iso/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static item_master_list(extra:any){return j2t.o('get','/sales/item/master/',null,extra)}

/**
* @data
* readonly id?: number
* organizationType?: string *enum:["H","F","L","C","A"]
* itemCode: string
* itemDescription?: string
* itemSymbol: string
* isSystemDefault?: boolean
* genericOrganization?: number
* itemCategory: number
* method: post, responses: 201 ,model: ItemMaster */
static item_master_create(data:ItemMaster){return j2t.o('post','/sales/item/master/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this item master.]
* method: get, responses: 200 */
static item_master_read(extra:any){return j2t.o('get','/sales/item/master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item master.]
* method: put, responses: 200 */
static item_master_update(extra:any){return j2t.o('put','/sales/item/master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item master.]
* method: patch, responses: 200 */
static item_master_partial_update(extra:any){return j2t.o('patch','/sales/item/master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this item master.]
* method: delete, responses: 204 */
static item_master_delete(extra:any){return j2t.o('delete','/sales/item/master/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static pricing_group_list(extra:any){return j2t.o('get','/sales/pricing-group/',null,extra)}

/**
* @data
* readonly id?: number
* groupName: string
* method: post, responses: 201 ,model: PricingGroup */
static pricing_group_create(data:PricingGroup){return j2t.o('post','/sales/pricing-group/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this pricing group.]
* method: get, responses: 200 */
static pricing_group_read(extra:any){return j2t.o('get','/sales/pricing-group/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this pricing group.]
* method: put, responses: 200 */
static pricing_group_update(extra:any){return j2t.o('put','/sales/pricing-group/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this pricing group.]
* method: patch, responses: 200 */
static pricing_group_partial_update(extra:any){return j2t.o('patch','/sales/pricing-group/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this pricing group.]
* method: delete, responses: 204 */
static pricing_group_delete(extra:any){return j2t.o('delete','/sales/pricing-group/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static sales_code_iso_list_list(extra:any){return j2t.o('get','/sales/sales-code-iso-list/',null,extra)}

/**
* @data
* readonly id?: number
* salesCode: number
* isoCode: number
* method: post, responses: 201 ,model: SalesCodeISOList */
static sales_code_iso_list_create(data:SalesCodeISOList){return j2t.o('post','/sales/sales-code-iso-list/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this sales code iso list.]
* method: get, responses: 200 */
static sales_code_iso_list_read(extra:any){return j2t.o('get','/sales/sales-code-iso-list/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this sales code iso list.]
* method: put, responses: 200 */
static sales_code_iso_list_update(extra:any){return j2t.o('put','/sales/sales-code-iso-list/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this sales code iso list.]
* method: patch, responses: 200 */
static sales_code_iso_list_partial_update(extra:any){return j2t.o('patch','/sales/sales-code-iso-list/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this sales code iso list.]
* method: delete, responses: 204 */
static sales_code_iso_list_delete(extra:any){return j2t.o('delete','/sales/sales-code-iso-list/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static sales_code_list(extra:any){return j2t.o('get','/sales/sales-code/',null,extra)}

/**
* @data
* readonly id?: number
* readonly defaultUnitPrice?: string
* readonly salesIsoCodes?: Array<SalesCodeISOList>
* code?: string
* description?: string
* locationRequired?: boolean
* unit: number
* jobType?: number
* method: post, responses: 201 ,model: SalesCode */
static sales_code_create(data:SalesCode){return j2t.o('post','/sales/sales-code/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this sales code.]
* method: get, responses: 200 */
static sales_code_read(extra:any){return j2t.o('get','/sales/sales-code/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this sales code.]
* method: put, responses: 200 */
static sales_code_update(extra:any){return j2t.o('put','/sales/sales-code/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this sales code.]
* method: patch, responses: 200 */
static sales_code_partial_update(extra:any){return j2t.o('patch','/sales/sales-code/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this sales code.]
* method: delete, responses: 204 */
static sales_code_delete(extra:any){return j2t.o('delete','/sales/sales-code/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static sales_invoice_code_list(extra:any){return j2t.o('get','/sales/sales-invoice-code/',null,extra)}

/**
* @data
* readonly id?: number
* salesCode: number
* invoiceCode: number
* method: post, responses: 201 ,model: SalesInvoiceCode */
static sales_invoice_code_create(data:SalesInvoiceCode){return j2t.o('post','/sales/sales-invoice-code/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this sales invoice code.]
* method: get, responses: 200 */
static sales_invoice_code_read(extra:any){return j2t.o('get','/sales/sales-invoice-code/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this sales invoice code.]
* method: put, responses: 200 */
static sales_invoice_code_update(extra:any){return j2t.o('put','/sales/sales-invoice-code/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this sales invoice code.]
* method: patch, responses: 200 */
static sales_invoice_code_partial_update(extra:any){return j2t.o('patch','/sales/sales-invoice-code/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this sales invoice code.]
* method: delete, responses: 204 */
static sales_invoice_code_delete(extra:any){return j2t.o('delete','/sales/sales-invoice-code/{id}/',null,extra)}
}

export class Shared_Assets{
 
/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static address_master_list(extra:any){return j2t.o('get','/shared-assets/address-master/',null,extra)}

/**
* @data
* googleMapId: string
* address: string
* method: post, responses: 201 ,model: AddressMaster */
static address_master_create(data:AddressMaster){return j2t.o('post','/shared-assets/address-master/',data)}

/**
* @extra
* google_map_id: string [A unique value identifying this address master.]
* method: get, responses: 200 */
static address_master_read(extra:any){return j2t.o('get','/shared-assets/address-master/{google_map_id}/',null,extra)}

/**
* @extra
* google_map_id: string [A unique value identifying this address master.]
* method: put, responses: 200 */
static address_master_update(extra:any){return j2t.o('put','/shared-assets/address-master/{google_map_id}/',null,extra)}

/**
* @extra
* google_map_id: string [A unique value identifying this address master.]
* method: patch, responses: 200 */
static address_master_partial_update(extra:any){return j2t.o('patch','/shared-assets/address-master/{google_map_id}/',null,extra)}

/**
* @extra
* google_map_id: string [A unique value identifying this address master.]
* method: delete, responses: 204 */
static address_master_delete(extra:any){return j2t.o('delete','/shared-assets/address-master/{google_map_id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static container_container_master_list(extra:any){return j2t.o('get','/shared-assets/container/container-master/',null,extra)}

/**
* @data
* readonly id?: number
* readonly createdDate?: string [format: date-time ]
* containerNumber: string
* tareWeight?: number
* maxGrossWeight?: number
* createdBy?: number
* isoCodeMaster: number
* isOwnedBy?: number
* method: post, responses: 201 ,model: ContainerMaster */
static container_container_master_create(data:ContainerMaster){return j2t.o('post','/shared-assets/container/container-master/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container master.]
* method: get, responses: 200 */
static container_container_master_read(extra:any){return j2t.o('get','/shared-assets/container/container-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container master.]
* method: put, responses: 200 */
static container_container_master_update(extra:any){return j2t.o('put','/shared-assets/container/container-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container master.]
* method: patch, responses: 200 */
static container_container_master_partial_update(extra:any){return j2t.o('patch','/shared-assets/container/container-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container master.]
* method: delete, responses: 204 */
static container_container_master_delete(extra:any){return j2t.o('delete','/shared-assets/container/container-master/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static container_container_operators_list(extra:any){return j2t.o('get','/shared-assets/container/container-operators/',null,extra)}

/**
* @data
* readonly id?: number
* fullname: string
* psaCode: string
* depot: Array<number>
* method: post, responses: 201 ,model: ContainerOperator */
static container_container_operators_create(data:ContainerOperator){return j2t.o('post','/shared-assets/container/container-operators/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this container operator.]
* method: get, responses: 200 */
static container_container_operators_read(extra:any){return j2t.o('get','/shared-assets/container/container-operators/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container operator.]
* method: put, responses: 200 */
static container_container_operators_update(extra:any){return j2t.o('put','/shared-assets/container/container-operators/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container operator.]
* method: patch, responses: 200 */
static container_container_operators_partial_update(extra:any){return j2t.o('patch','/shared-assets/container/container-operators/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this container operator.]
* method: delete, responses: 204 */
static container_container_operators_delete(extra:any){return j2t.o('delete','/shared-assets/container/container-operators/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static container_iso_code_master_list(extra:any){return j2t.o('get','/shared-assets/container/iso-code-master/',null,extra)}

/**
* @data
* readonly id?: number
* isoSizeType: string
* isoTypeGeneric: string
* typeDescription: string
* lengthInInches: string [format: decimal ]
* heightInInches: string [format: decimal ]
* widthInInches: string [format: decimal ]
* method: post, responses: 201 ,model: ISOCodeMaster */
static container_iso_code_master_create(data:ISOCodeMaster){return j2t.o('post','/shared-assets/container/iso-code-master/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this iso code master.]
* method: get, responses: 200 */
static container_iso_code_master_read(extra:any){return j2t.o('get','/shared-assets/container/iso-code-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this iso code master.]
* method: put, responses: 200 */
static container_iso_code_master_update(extra:any){return j2t.o('put','/shared-assets/container/iso-code-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this iso code master.]
* method: patch, responses: 200 */
static container_iso_code_master_partial_update(extra:any){return j2t.o('patch','/shared-assets/container/iso-code-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this iso code master.]
* method: delete, responses: 204 */
static container_iso_code_master_delete(extra:any){return j2t.o('delete','/shared-assets/container/iso-code-master/{id}/',null,extra)}

/**
* @extra
* id?: number 
* name?: string 
* depot_group_master?: string 
* psa_code?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static depot_depot_contact_details_list(extra:any){return j2t.o('get','/shared-assets/depot/depot-contact-details/',null,extra)}

/**
* @data
* readonly id?: number
* readonly officeNumber?: Array<DepotOfficeNumber>
* readonly faxNumber?: Array<DepotFaxNumber>
* readonly email?: Array<DepotEmail>
* name: string
* psaCode: string
* cmsCode: string
* dhc: string [format: decimal ]
* inputSource: string
* addressMaster: string
* depotGroupMaster?: number
* method: post, responses: 201 ,model: DepotContactDetails */
static depot_depot_contact_details_create(data:DepotContactDetails){return j2t.o('post','/shared-assets/depot/depot-contact-details/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this depot master.]
* method: get, responses: 200 */
static depot_depot_contact_details_read(extra:any){return j2t.o('get','/shared-assets/depot/depot-contact-details/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot master.]
* method: put, responses: 200 */
static depot_depot_contact_details_update(extra:any){return j2t.o('put','/shared-assets/depot/depot-contact-details/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot master.]
* method: patch, responses: 200 */
static depot_depot_contact_details_partial_update(extra:any){return j2t.o('patch','/shared-assets/depot/depot-contact-details/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot master.]
* method: delete, responses: 204 */
static depot_depot_contact_details_delete(extra:any){return j2t.o('delete','/shared-assets/depot/depot-contact-details/{id}/',null,extra)}

/**
* @extra
* department?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static depot_depot_email_list(extra:any){return j2t.o('get','/shared-assets/depot/depot-email/',null,extra)}

/**
* @data
* readonly id?: number
* name: string
* email: string
* department: number
* method: post, responses: 201 ,model: DepotEmail */
static depot_depot_email_create(data:DepotEmail){return j2t.o('post','/shared-assets/depot/depot-email/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this depot email.]
* method: get, responses: 200 */
static depot_depot_email_read(extra:any){return j2t.o('get','/shared-assets/depot/depot-email/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot email.]
* method: put, responses: 200 */
static depot_depot_email_update(extra:any){return j2t.o('put','/shared-assets/depot/depot-email/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot email.]
* method: patch, responses: 200 */
static depot_depot_email_partial_update(extra:any){return j2t.o('patch','/shared-assets/depot/depot-email/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot email.]
* method: delete, responses: 204 */
static depot_depot_email_delete(extra:any){return j2t.o('delete','/shared-assets/depot/depot-email/{id}/',null,extra)}

/**
* @extra
* department?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static depot_depot_fax_number_list(extra:any){return j2t.o('get','/shared-assets/depot/depot-fax-number/',null,extra)}

/**
* @data
* readonly id?: number
* name: string
* faxNumber: string
* department: number
* method: post, responses: 201 ,model: DepotFaxNumber */
static depot_depot_fax_number_create(data:DepotFaxNumber){return j2t.o('post','/shared-assets/depot/depot-fax-number/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this depot fax number.]
* method: get, responses: 200 */
static depot_depot_fax_number_read(extra:any){return j2t.o('get','/shared-assets/depot/depot-fax-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot fax number.]
* method: put, responses: 200 */
static depot_depot_fax_number_update(extra:any){return j2t.o('put','/shared-assets/depot/depot-fax-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot fax number.]
* method: patch, responses: 200 */
static depot_depot_fax_number_partial_update(extra:any){return j2t.o('patch','/shared-assets/depot/depot-fax-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot fax number.]
* method: delete, responses: 204 */
static depot_depot_fax_number_delete(extra:any){return j2t.o('delete','/shared-assets/depot/depot-fax-number/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static depot_depot_group_master_list(extra:any){return j2t.o('get','/shared-assets/depot/depot-group-master/',null,extra)}

/**
* @data
* readonly id?: number
* name: string
* method: post, responses: 201 ,model: DepotGroupMaster */
static depot_depot_group_master_create(data:DepotGroupMaster){return j2t.o('post','/shared-assets/depot/depot-group-master/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this depot group master.]
* method: get, responses: 200 */
static depot_depot_group_master_read(extra:any){return j2t.o('get','/shared-assets/depot/depot-group-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot group master.]
* method: put, responses: 200 */
static depot_depot_group_master_update(extra:any){return j2t.o('put','/shared-assets/depot/depot-group-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot group master.]
* method: patch, responses: 200 */
static depot_depot_group_master_partial_update(extra:any){return j2t.o('patch','/shared-assets/depot/depot-group-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot group master.]
* method: delete, responses: 204 */
static depot_depot_group_master_delete(extra:any){return j2t.o('delete','/shared-assets/depot/depot-group-master/{id}/',null,extra)}

/**
* @extra
* name?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static depot_depot_master_list(extra:any){return j2t.o('get','/shared-assets/depot/depot-master/',null,extra)}

/**
* @data
* readonly id?: number
* addressMaster: DepotMasterAddressMaster
* name: string
* psaCode: string
* cmsCode: string
* dhc: string [format: decimal ]
* inputSource: string
* depotGroupMaster?: number
* method: post, responses: 201 ,model: DepotMaster */
static depot_depot_master_create(data:DepotMaster){return j2t.o('post','/shared-assets/depot/depot-master/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this depot master.]
* method: get, responses: 200 */
static depot_depot_master_read(extra:any){return j2t.o('get','/shared-assets/depot/depot-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot master.]
* method: put, responses: 200 */
static depot_depot_master_update(extra:any){return j2t.o('put','/shared-assets/depot/depot-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot master.]
* method: patch, responses: 200 */
static depot_depot_master_partial_update(extra:any){return j2t.o('patch','/shared-assets/depot/depot-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot master.]
* method: delete, responses: 204 */
static depot_depot_master_delete(extra:any){return j2t.o('delete','/shared-assets/depot/depot-master/{id}/',null,extra)}

/**
* @extra
* department?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static depot_depot_office_number_list(extra:any){return j2t.o('get','/shared-assets/depot/depot-office-number/',null,extra)}

/**
* @data
* readonly id?: number
* name: string
* officeNumber: string
* department: number
* method: post, responses: 201 ,model: DepotOfficeNumber */
static depot_depot_office_number_create(data:DepotOfficeNumber){return j2t.o('post','/shared-assets/depot/depot-office-number/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this depot office number.]
* method: get, responses: 200 */
static depot_depot_office_number_read(extra:any){return j2t.o('get','/shared-assets/depot/depot-office-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot office number.]
* method: put, responses: 200 */
static depot_depot_office_number_update(extra:any){return j2t.o('put','/shared-assets/depot/depot-office-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot office number.]
* method: patch, responses: 200 */
static depot_depot_office_number_partial_update(extra:any){return j2t.o('patch','/shared-assets/depot/depot-office-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot office number.]
* method: delete, responses: 204 */
static depot_depot_office_number_delete(extra:any){return j2t.o('delete','/shared-assets/depot/depot-office-number/{id}/',null,extra)}

/**
* @extra
* depot?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static depot_depot_open_hours_list(extra:any){return j2t.o('get','/shared-assets/depot/depot-open-hours/',null,extra)}

/**
* @data
* readonly id?: number
* depot: number
* timeStartWeekday: number
* timeStartHour: string
* timeEndWeekday: number
* timeEndHour: string
* method: post, responses: 201 ,model: DepotOpenHour */
static depot_depot_open_hours_create(data:DepotOpenHour){return j2t.o('post','/shared-assets/depot/depot-open-hours/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this depot open hour.]
* method: get, responses: 200 */
static depot_depot_open_hours_read(extra:any){return j2t.o('get','/shared-assets/depot/depot-open-hours/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot open hour.]
* method: put, responses: 200 */
static depot_depot_open_hours_update(extra:any){return j2t.o('put','/shared-assets/depot/depot-open-hours/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot open hour.]
* method: patch, responses: 200 */
static depot_depot_open_hours_partial_update(extra:any){return j2t.o('patch','/shared-assets/depot/depot-open-hours/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this depot open hour.]
* method: delete, responses: 204 */
static depot_depot_open_hours_delete(extra:any){return j2t.o('delete','/shared-assets/depot/depot-open-hours/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static dg_class_imco_dg_class_master_list(extra:any){return j2t.o('get','/shared-assets/dg-class/imco-dg-class-master/',null,extra)}

/**
* @data
* readonly id?: number
* name: string
* description?: string
* imageUrl?: string [format: uri ]
* method: post, responses: 201 ,model: ImcoDgClassMaster */
static dg_class_imco_dg_class_master_create(data:ImcoDgClassMaster){return j2t.o('post','/shared-assets/dg-class/imco-dg-class-master/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this imco dg class master.]
* method: get, responses: 200 */
static dg_class_imco_dg_class_master_read(extra:any){return j2t.o('get','/shared-assets/dg-class/imco-dg-class-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this imco dg class master.]
* method: put, responses: 200 */
static dg_class_imco_dg_class_master_update(extra:any){return j2t.o('put','/shared-assets/dg-class/imco-dg-class-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this imco dg class master.]
* method: patch, responses: 200 */
static dg_class_imco_dg_class_master_partial_update(extra:any){return j2t.o('patch','/shared-assets/dg-class/imco-dg-class-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this imco dg class master.]
* method: delete, responses: 204 */
static dg_class_imco_dg_class_master_delete(extra:any){return j2t.o('delete','/shared-assets/dg-class/imco-dg-class-master/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static dg_class_port_dg_class_master_list(extra:any){return j2t.o('get','/shared-assets/dg-class/port-dg-class-master/',null,extra)}

/**
* @data
* readonly id?: number
* name: string
* description?: string
* imageUrl?: string [format: uri ]
* portMaster: number
* method: post, responses: 201 ,model: PortDgClassMaster */
static dg_class_port_dg_class_master_create(data:PortDgClassMaster){return j2t.o('post','/shared-assets/dg-class/port-dg-class-master/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this port dg class master.]
* method: get, responses: 200 */
static dg_class_port_dg_class_master_read(extra:any){return j2t.o('get','/shared-assets/dg-class/port-dg-class-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port dg class master.]
* method: put, responses: 200 */
static dg_class_port_dg_class_master_update(extra:any){return j2t.o('put','/shared-assets/dg-class/port-dg-class-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port dg class master.]
* method: patch, responses: 200 */
static dg_class_port_dg_class_master_partial_update(extra:any){return j2t.o('patch','/shared-assets/dg-class/port-dg-class-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port dg class master.]
* method: delete, responses: 204 */
static dg_class_port_dg_class_master_delete(extra:any){return j2t.o('delete','/shared-assets/dg-class/port-dg-class-master/{id}/',null,extra)}

/**
* @extra
* department?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static port_port_department_email_list(extra:any){return j2t.o('get','/shared-assets/port/port-department-email/',null,extra)}

/**
* @data
* email: string
* method: post, responses: 201 ,model: PortDepartmentEmail */
static port_port_department_email_create(data:PortDepartmentEmail){return j2t.o('post','/shared-assets/port/port-department-email/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this port department email.]
* method: get, responses: 200 */
static port_port_department_email_read(extra:any){return j2t.o('get','/shared-assets/port/port-department-email/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port department email.]
* method: put, responses: 200 */
static port_port_department_email_update(extra:any){return j2t.o('put','/shared-assets/port/port-department-email/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port department email.]
* method: patch, responses: 200 */
static port_port_department_email_partial_update(extra:any){return j2t.o('patch','/shared-assets/port/port-department-email/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port department email.]
* method: delete, responses: 204 */
static port_port_department_email_delete(extra:any){return j2t.o('delete','/shared-assets/port/port-department-email/{id}/',null,extra)}

/**
* @extra
* department?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static port_port_department_fax_number_list(extra:any){return j2t.o('get','/shared-assets/port/port-department-fax-number/',null,extra)}

/**
* @data
* faxNumber: string
* method: post, responses: 201 ,model: PortDepartmentFaxNumber */
static port_port_department_fax_number_create(data:PortDepartmentFaxNumber){return j2t.o('post','/shared-assets/port/port-department-fax-number/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this port department fax number.]
* method: get, responses: 200 */
static port_port_department_fax_number_read(extra:any){return j2t.o('get','/shared-assets/port/port-department-fax-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port department fax number.]
* method: put, responses: 200 */
static port_port_department_fax_number_update(extra:any){return j2t.o('put','/shared-assets/port/port-department-fax-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port department fax number.]
* method: patch, responses: 200 */
static port_port_department_fax_number_partial_update(extra:any){return j2t.o('patch','/shared-assets/port/port-department-fax-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port department fax number.]
* method: delete, responses: 204 */
static port_port_department_fax_number_delete(extra:any){return j2t.o('delete','/shared-assets/port/port-department-fax-number/{id}/',null,extra)}

/**
* @extra
* department?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static port_port_department_office_number_list(extra:any){return j2t.o('get','/shared-assets/port/port-department-office-number/',null,extra)}

/**
* @data
* officeNumber: string
* method: post, responses: 201 ,model: PortDepartmentOfficeNumber */
static port_port_department_office_number_create(data:PortDepartmentOfficeNumber){return j2t.o('post','/shared-assets/port/port-department-office-number/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this port department office number.]
* method: get, responses: 200 */
static port_port_department_office_number_read(extra:any){return j2t.o('get','/shared-assets/port/port-department-office-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port department office number.]
* method: put, responses: 200 */
static port_port_department_office_number_update(extra:any){return j2t.o('put','/shared-assets/port/port-department-office-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port department office number.]
* method: patch, responses: 200 */
static port_port_department_office_number_partial_update(extra:any){return j2t.o('patch','/shared-assets/port/port-department-office-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port department office number.]
* method: delete, responses: 204 */
static port_port_department_office_number_delete(extra:any){return j2t.o('delete','/shared-assets/port/port-department-office-number/{id}/',null,extra)}

/**
* @extra
* port?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static port_port_departments_list(extra:any){return j2t.o('get','/shared-assets/port/port-departments/',null,extra)}

/**
* @data
* readonly id?: number
* readonly officeNumber?: Array<PortDepartmentOfficeNumber>
* readonly faxNumber?: Array<PortDepartmentFaxNumber>
* readonly email?: Array<PortDepartmentEmail>
* name?: string
* port: number
* operations: number
* method: post, responses: 201 ,model: PortDepartment */
static port_port_departments_create(data:PortDepartment){return j2t.o('post','/shared-assets/port/port-departments/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this port department.]
* method: get, responses: 200 */
static port_port_departments_read(extra:any){return j2t.o('get','/shared-assets/port/port-departments/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port department.]
* method: put, responses: 200 */
static port_port_departments_update(extra:any){return j2t.o('put','/shared-assets/port/port-departments/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port department.]
* method: patch, responses: 200 */
static port_port_departments_partial_update(extra:any){return j2t.o('patch','/shared-assets/port/port-departments/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port department.]
* method: delete, responses: 204 */
static port_port_departments_delete(extra:any){return j2t.o('delete','/shared-assets/port/port-departments/{id}/',null,extra)}

/**
* @extra
* port_name?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static port_port_master_list(extra:any){return j2t.o('get','/shared-assets/port/port-master/',null,extra)}

/**
* @data
* readonly id?: number
* portName: string
* website?: string
* method: post, responses: 201 ,model: PortMaster */
static port_port_master_create(data:PortMaster){return j2t.o('post','/shared-assets/port/port-master/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this port master.]
* method: get, responses: 200 */
static port_port_master_read(extra:any){return j2t.o('get','/shared-assets/port/port-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port master.]
* method: put, responses: 200 */
static port_port_master_update(extra:any){return j2t.o('put','/shared-assets/port/port-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port master.]
* method: patch, responses: 200 */
static port_port_master_partial_update(extra:any){return j2t.o('patch','/shared-assets/port/port-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port master.]
* method: delete, responses: 204 */
static port_port_master_delete(extra:any){return j2t.o('delete','/shared-assets/port/port-master/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static shipping_lines_list(extra:any){return j2t.o('get','/shared-assets/shipping-lines/',null,extra)}

/**
* @data
* readonly id?: number
* name: string
* psaCode: string
* inputSource: string
* method: post, responses: 201 ,model: ShippingLine */
static shipping_lines_create(data:ShippingLine){return j2t.o('post','/shared-assets/shipping-lines/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this shipping line.]
* method: get, responses: 200 */
static shipping_lines_read(extra:any){return j2t.o('get','/shared-assets/shipping-lines/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this shipping line.]
* method: put, responses: 200 */
static shipping_lines_update(extra:any){return j2t.o('put','/shared-assets/shipping-lines/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this shipping line.]
* method: patch, responses: 200 */
static shipping_lines_partial_update(extra:any){return j2t.o('patch','/shared-assets/shipping-lines/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this shipping line.]
* method: delete, responses: 204 */
static shipping_lines_delete(extra:any){return j2t.o('delete','/shared-assets/shipping-lines/{id}/',null,extra)}

/**
* @extra
* department?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static terminal_terminal_department_email_list(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-department-email/',null,extra)}

/**
* @data
* readonly id?: number
* name: string
* email: string
* department: number
* method: post, responses: 201 ,model: TerminalDepartmentEmail */
static terminal_terminal_department_email_create(data:TerminalDepartmentEmail){return j2t.o('post','/shared-assets/terminal/terminal-department-email/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department email.]
* method: get, responses: 200 */
static terminal_terminal_department_email_read(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-department-email/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department email.]
* method: put, responses: 200 */
static terminal_terminal_department_email_update(extra:any){return j2t.o('put','/shared-assets/terminal/terminal-department-email/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department email.]
* method: patch, responses: 200 */
static terminal_terminal_department_email_partial_update(extra:any){return j2t.o('patch','/shared-assets/terminal/terminal-department-email/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department email.]
* method: delete, responses: 204 */
static terminal_terminal_department_email_delete(extra:any){return j2t.o('delete','/shared-assets/terminal/terminal-department-email/{id}/',null,extra)}

/**
* @extra
* department?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static terminal_terminal_department_fax_number_list(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-department-fax-number/',null,extra)}

/**
* @data
* faxNumber: string
* method: post, responses: 201 ,model: TerminalDepartmentFaxNumber */
static terminal_terminal_department_fax_number_create(data:TerminalDepartmentFaxNumber){return j2t.o('post','/shared-assets/terminal/terminal-department-fax-number/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department fax number.]
* method: get, responses: 200 */
static terminal_terminal_department_fax_number_read(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-department-fax-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department fax number.]
* method: put, responses: 200 */
static terminal_terminal_department_fax_number_update(extra:any){return j2t.o('put','/shared-assets/terminal/terminal-department-fax-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department fax number.]
* method: patch, responses: 200 */
static terminal_terminal_department_fax_number_partial_update(extra:any){return j2t.o('patch','/shared-assets/terminal/terminal-department-fax-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department fax number.]
* method: delete, responses: 204 */
static terminal_terminal_department_fax_number_delete(extra:any){return j2t.o('delete','/shared-assets/terminal/terminal-department-fax-number/{id}/',null,extra)}

/**
* @extra
* department?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static terminal_terminal_department_office_number_list(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-department-office-number/',null,extra)}

/**
* @data
* officeNumber: string
* method: post, responses: 201 ,model: TerminalDepartmentOfficeNumber */
static terminal_terminal_department_office_number_create(data:TerminalDepartmentOfficeNumber){return j2t.o('post','/shared-assets/terminal/terminal-department-office-number/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department office number.]
* method: get, responses: 200 */
static terminal_terminal_department_office_number_read(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-department-office-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department office number.]
* method: put, responses: 200 */
static terminal_terminal_department_office_number_update(extra:any){return j2t.o('put','/shared-assets/terminal/terminal-department-office-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department office number.]
* method: patch, responses: 200 */
static terminal_terminal_department_office_number_partial_update(extra:any){return j2t.o('patch','/shared-assets/terminal/terminal-department-office-number/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department office number.]
* method: delete, responses: 204 */
static terminal_terminal_department_office_number_delete(extra:any){return j2t.o('delete','/shared-assets/terminal/terminal-department-office-number/{id}/',null,extra)}

/**
* @extra
* terminal?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static terminal_terminal_departments_list(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-departments/',null,extra)}

/**
* @data
* readonly id?: number
* readonly officeNumber?: Array<TerminalDepartmentOfficeNumber>
* readonly faxNumber?: Array<TerminalDepartmentFaxNumber>
* readonly email?: Array<TerminalDepartmentEmail>
* name?: string
* terminal: number
* operations: number
* method: post, responses: 201 ,model: TerminalDepartment */
static terminal_terminal_departments_create(data:TerminalDepartment){return j2t.o('post','/shared-assets/terminal/terminal-departments/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department.]
* method: get, responses: 200 */
static terminal_terminal_departments_read(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-departments/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department.]
* method: put, responses: 200 */
static terminal_terminal_departments_update(extra:any){return j2t.o('put','/shared-assets/terminal/terminal-departments/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department.]
* method: patch, responses: 200 */
static terminal_terminal_departments_partial_update(extra:any){return j2t.o('patch','/shared-assets/terminal/terminal-departments/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal department.]
* method: delete, responses: 204 */
static terminal_terminal_departments_delete(extra:any){return j2t.o('delete','/shared-assets/terminal/terminal-departments/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static terminal_terminal_master_list(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-master/',null,extra)}

/**
* @data
* readonly id?: number
* terminalName: string
* inputSource: string
* addressMaster: string
* portMaster: number
* method: post, responses: 201 ,model: TerminalMaster */
static terminal_terminal_master_create(data:TerminalMaster){return j2t.o('post','/shared-assets/terminal/terminal-master/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal master.]
* method: get, responses: 200 */
static terminal_terminal_master_read(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal master.]
* method: put, responses: 200 */
static terminal_terminal_master_update(extra:any){return j2t.o('put','/shared-assets/terminal/terminal-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal master.]
* method: patch, responses: 200 */
static terminal_terminal_master_partial_update(extra:any){return j2t.o('patch','/shared-assets/terminal/terminal-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal master.]
* method: delete, responses: 204 */
static terminal_terminal_master_delete(extra:any){return j2t.o('delete','/shared-assets/terminal/terminal-master/{id}/',null,extra)}

/**
* @extra
* terminal?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static terminal_terminal_open_hours_list(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-open-hours/',null,extra)}

/**
* @data
* readonly id?: number
* terminal: number
* timeStartWeekday: number
* timeStartHour: string
* timeEndWeekday: number
* timeEndHour: string
* method: post, responses: 201 ,model: TerminalOpenHour */
static terminal_terminal_open_hours_create(data:TerminalOpenHour){return j2t.o('post','/shared-assets/terminal/terminal-open-hours/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal open hour.]
* method: get, responses: 200 */
static terminal_terminal_open_hours_read(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-open-hours/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal open hour.]
* method: put, responses: 200 */
static terminal_terminal_open_hours_update(extra:any){return j2t.o('put','/shared-assets/terminal/terminal-open-hours/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal open hour.]
* method: patch, responses: 200 */
static terminal_terminal_open_hours_partial_update(extra:any){return j2t.o('patch','/shared-assets/terminal/terminal-open-hours/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this terminal open hour.]
* method: delete, responses: 204 */
static terminal_terminal_open_hours_delete(extra:any){return j2t.o('delete','/shared-assets/terminal/terminal-open-hours/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static terminal_terminal_operations_master_list(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-operations-master/',null,extra)}

/**
* @data
* readonly id?: number
* name: string
* description?: string
* method: post, responses: 201 ,model: PortTerminalOperationsMaster */
static terminal_terminal_operations_master_create(data:PortTerminalOperationsMaster){return j2t.o('post','/shared-assets/terminal/terminal-operations-master/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this port terminal operations master.]
* method: get, responses: 200 */
static terminal_terminal_operations_master_read(extra:any){return j2t.o('get','/shared-assets/terminal/terminal-operations-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port terminal operations master.]
* method: put, responses: 200 */
static terminal_terminal_operations_master_update(extra:any){return j2t.o('put','/shared-assets/terminal/terminal-operations-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port terminal operations master.]
* method: patch, responses: 200 */
static terminal_terminal_operations_master_partial_update(extra:any){return j2t.o('patch','/shared-assets/terminal/terminal-operations-master/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this port terminal operations master.]
* method: delete, responses: 204 */
static terminal_terminal_operations_master_delete(extra:any){return j2t.o('delete','/shared-assets/terminal/terminal-operations-master/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static veda_veda_berthing_list(extra:any){return j2t.o('get','/shared-assets/veda/veda-berthing/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this veda berthing.]
* method: get, responses: 200 */
static veda_veda_berthing_read(extra:any){return j2t.o('get','/shared-assets/veda/veda-berthing/{id}/',null,extra)}

/**
* @extra
* vessel?: string 
* name?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static veda_veda_list(extra:any){return j2t.o('get','/shared-assets/veda/veda/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this veda.]
* method: get, responses: 200 */
static veda_veda_read(extra:any){return j2t.o('get','/shared-assets/veda/veda/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static vehicle_type_list(extra:any){return j2t.o('get','/shared-assets/vehicle-type/',null,extra)}

/**
* @data
* readonly id?: number
* name: string
* method: post, responses: 201 ,model: VehicleType */
static vehicle_type_create(data:VehicleType){return j2t.o('post','/shared-assets/vehicle-type/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this vehicle type.]
* method: get, responses: 200 */
static vehicle_type_read(extra:any){return j2t.o('get','/shared-assets/vehicle-type/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this vehicle type.]
* method: put, responses: 200 */
static vehicle_type_update(extra:any){return j2t.o('put','/shared-assets/vehicle-type/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this vehicle type.]
* method: patch, responses: 200 */
static vehicle_type_partial_update(extra:any){return j2t.o('patch','/shared-assets/vehicle-type/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this vehicle type.]
* method: delete, responses: 204 */
static vehicle_type_delete(extra:any){return j2t.o('delete','/shared-assets/vehicle-type/{id}/',null,extra)}
}

export class Standing_Order{
 
/**
* @data
* readonly id?: number
* readonly purchaseOrderNumber?: string
* purchaseContract?: number
* readonly status?: string *enum:["STANDING_ORDER","QUOTATION","JOB_ORDER","UNASSIGNED"]
* readonly startContractDate?: string [format: date-time ]
* readonly endContractDate?: string [format: date-time ]
* readonly bufferTime?: number
* readonly remarks?: string
* readonly isActive?: boolean
* readonly purchaseOrderItems?: Array<PurchaseOrderPurchaseOrderItem>
* method: post, responses: 201 ,model: PurchaseOrderStandingOrder */
static purchase_order_create(data:PurchaseOrderStandingOrder){return j2t.o('post','/standing-order/purchase-order/',data)}

/**
* @extra
* standing_order_template?: string 
* standing_order_contract_number?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static standing_order_contract_list(extra:any){return j2t.o('get','/standing-order/standing-order-contract/',null,extra)}

/**
* @data
* readonly id?: number
* createdBy?: UserGeneral
* updatedBy?: UserGeneral
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* standingOrderContractNumber?: string
* bufferTime?: number
* startContractDate: string [format: date-time ]
* endContractDate: string [format: date-time ]
* remarks?: string
* isActive?: boolean
* modeOfPayment: string
* paymentTerms?: string
* organization?: number
* standingOrderTemplate: number
* organizations: Array<number>
* method: post, responses: 201 ,model: StandingOrderContract */
static standing_order_contract_create(data:StandingOrderContract){return j2t.o('post','/standing-order/standing-order-contract/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this standing order contract.]
* method: get, responses: 200 */
static standing_order_contract_read(extra:any){return j2t.o('get','/standing-order/standing-order-contract/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this standing order contract.]
* method: put, responses: 200 */
static standing_order_contract_update(extra:any){return j2t.o('put','/standing-order/standing-order-contract/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this standing order contract.]
* method: patch, responses: 200 */
static standing_order_contract_partial_update(extra:any){return j2t.o('patch','/standing-order/standing-order-contract/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this standing order contract.]
* method: delete, responses: 204 */
static standing_order_contract_delete(extra:any){return j2t.o('delete','/standing-order/standing-order-contract/{id}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static standing_order_template_list(extra:any){return j2t.o('get','/standing-order/standing-order-template/',null,extra)}

/**
* @data
* readonly id?: number
* standingOrderItems: Array<StandingOrderTemplateItem>
* name: string
* description?: string
* genericOrganization: number
* method: post, responses: 201 ,model: StandingOrderTemplate */
static standing_order_template_create(data:StandingOrderTemplate){return j2t.o('post','/standing-order/standing-order-template/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this standing order template.]
* method: get, responses: 200 */
static standing_order_template_read(extra:any){return j2t.o('get','/standing-order/standing-order-template/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this standing order template.]
* method: put, responses: 200 */
static standing_order_template_update(extra:any){return j2t.o('put','/standing-order/standing-order-template/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this standing order template.]
* method: patch, responses: 200 */
static standing_order_template_partial_update(extra:any){return j2t.o('patch','/standing-order/standing-order-template/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this standing order template.]
* method: delete, responses: 204 */
static standing_order_template_delete(extra:any){return j2t.o('delete','/standing-order/standing-order-template/{id}/',null,extra)}
}

export class Trip{
 
/**
* @extra
* journey_actual?: string 
* event_type?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static actual_event_list(extra:any){return j2t.o('get','/trip/actual/event/',null,extra)}

/**
* @data
* readonly id?: number
* eventType: string *enum:["departure","position","arrival","at","pt","x_ray","c_c","do_c","cl_c","dol_c","ce_c","doe_c","gl_c","clg_c","ge_c","ceg_c","l_c","un_c","br","w","pc","v_p","-"]
* detail?: string
* readonly occurredTime?: string [format: date-time ]
* journeyActual?: number
* method: post, responses: 201 ,model: EventActual */
static actual_event_create(data:EventActual){return j2t.o('post','/trip/actual/event/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this event actual.]
* method: get, responses: 200 */
static actual_event_read(extra:any){return j2t.o('get','/trip/actual/event/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this event actual.]
* method: put, responses: 200 */
static actual_event_update(extra:any){return j2t.o('put','/trip/actual/event/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this event actual.]
* method: patch, responses: 200 */
static actual_event_partial_update(extra:any){return j2t.o('patch','/trip/actual/event/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this event actual.]
* method: delete, responses: 204 */
static actual_event_delete(extra:any){return j2t.o('delete','/trip/actual/event/{id}/',null,extra)}

/**
* @extra
* trip_plan__template_plan__job_order?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static actual_list(extra:any){return j2t.o('get','/trip/actual/trip/',null,extra)}

/**
* @data
* readonly id?: number
* tripPlan: number
* method: post, responses: 201 ,model: TripActual */
static actual_create(data:TripActual){return j2t.o('post','/trip/actual/trip/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this trip actual.]
* method: get, responses: 200 */
static actual_read(extra:any){return j2t.o('get','/trip/actual/trip/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trip actual.]
* method: put, responses: 200 */
static actual_update(extra:any){return j2t.o('put','/trip/actual/trip/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trip actual.]
* method: patch, responses: 200 */
static actual_partial_update(extra:any){return j2t.o('patch','/trip/actual/trip/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trip actual.]
* method: delete, responses: 204 */
static actual_delete(extra:any){return j2t.o('delete','/trip/actual/trip/{id}/',null,extra)}

/**
* @extra
* event_type?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static event_default_duration_list(extra:any){return j2t.o('get','/trip/event-default-duration//',null,extra)}

/**
* @data
* eventType: string *enum:["departure","position","arrival","at","pt","x_ray","c_c","do_c","cl_c","dol_c","ce_c","doe_c","gl_c","clg_c","ge_c","ceg_c","l_c","un_c","br","w","pc","v_p","-"]
* duration?: number
* remarks?: string
* method: post, responses: 201 ,model: EventDefaultDuration */
static event_default_duration_create(data:EventDefaultDuration){return j2t.o('post','/trip/event-default-duration//',data)}

/**
* @extra
* event_type: string [A unique value identifying this event default duration.]
* method: get, responses: 200 */
static event_default_duration__read(extra:any){return j2t.o('get','/trip/event-default-duration//{event_type}/',null,extra)}

/**
* @extra
* event_type: string [A unique value identifying this event default duration.]
* method: put, responses: 200 */
static event_default_duration__update(extra:any){return j2t.o('put','/trip/event-default-duration//{event_type}/',null,extra)}

/**
* @extra
* event_type: string [A unique value identifying this event default duration.]
* method: patch, responses: 200 */
static event_default_duration__partial_update(extra:any){return j2t.o('patch','/trip/event-default-duration//{event_type}/',null,extra)}

/**
* @extra
* event_type: string [A unique value identifying this event default duration.]
* method: delete, responses: 204 */
static event_default_duration__delete(extra:any){return j2t.o('delete','/trip/event-default-duration//{event_type}/',null,extra)}

/**
* @extra
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static location_action_event_list(extra:any){return j2t.o('get','/trip/location-action/event/',null,extra)}

/**
* @data
* readonly id?: number
* order?: number
* eventType: string *enum:["departure","position","arrival","at","pt","x_ray","c_c","do_c","cl_c","dol_c","ce_c","doe_c","gl_c","clg_c","ge_c","ceg_c","l_c","un_c","br","w","pc","v_p","-"]
* locationAction: number
* method: post, responses: 201 ,model: EventLocationAction */
static location_action_event_create(data:EventLocationAction){return j2t.o('post','/trip/location-action/event/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this location action event.]
* method: get, responses: 200 */
static location_action_event_read(extra:any){return j2t.o('get','/trip/location-action/event/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this location action event.]
* method: put, responses: 200 */
static location_action_event_update(extra:any){return j2t.o('put','/trip/location-action/event/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this location action event.]
* method: patch, responses: 200 */
static location_action_event_partial_update(extra:any){return j2t.o('patch','/trip/location-action/event/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this location action event.]
* method: delete, responses: 204 */
static location_action_event_delete(extra:any){return j2t.o('delete','/trip/location-action/event/{id}/',null,extra)}

/**
* @extra
* journey_plan?: string 
* event_type?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static plan_event_list(extra:any){return j2t.o('get','/trip/plan/event/',null,extra)}

/**
* @data
* readonly id?: number
* readonly eventTypeLabel?: string
* eventType: string *enum:["departure","position","arrival","at","pt","x_ray","c_c","do_c","cl_c","dol_c","ce_c","doe_c","gl_c","clg_c","ge_c","ceg_c","l_c","un_c","br","w","pc","v_p","-"]
* detail?: string
* plannedStartTime: string [format: date-time ]
* estimatedDuration: number
* journeyPlan?: number
* method: post, responses: 201 ,model: EventPlan */
static plan_event_create(data:EventPlan){return j2t.o('post','/trip/plan/event/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this event plan.]
* method: get, responses: 200 */
static plan_event_read(extra:any){return j2t.o('get','/trip/plan/event/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this event plan.]
* method: put, responses: 200 */
static plan_event_update(extra:any){return j2t.o('put','/trip/plan/event/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this event plan.]
* method: patch, responses: 200 */
static plan_event_partial_update(extra:any){return j2t.o('patch','/trip/plan/event/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this event plan.]
* method: delete, responses: 204 */
static plan_event_delete(extra:any){return j2t.o('delete','/trip/plan/event/{id}/',null,extra)}

/**
* @extra
* name?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static plan_template_plan_name_list(extra:any){return j2t.o('get','/trip/plan/template-plan-name/',null,extra)}

/**
* @data
* readonly id?: number
* name?: string
* method: post, responses: 201 ,model: TemplatePlanName */
static plan_template_plan_name_create(data:TemplatePlanName){return j2t.o('post','/trip/plan/template-plan-name/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this template plan name.]
* method: get, responses: 200 */
static plan_template_plan_name_read(extra:any){return j2t.o('get','/trip/plan/template-plan-name/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this template plan name.]
* method: put, responses: 200 */
static plan_template_plan_name_update(extra:any){return j2t.o('put','/trip/plan/template-plan-name/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this template plan name.]
* method: patch, responses: 200 */
static plan_template_plan_name_partial_update(extra:any){return j2t.o('patch','/trip/plan/template-plan-name/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this template plan name.]
* method: delete, responses: 204 */
static plan_template_plan_name_delete(extra:any){return j2t.o('delete','/trip/plan/template-plan-name/{id}/',null,extra)}

/**
* @extra
* job_order?: string 
* template_plan_name?: string 
* is_active?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static plan_template_plan_list(extra:any){return j2t.o('get','/trip/plan/template-plan/',null,extra)}

/**
* @data
* readonly id?: number
* createdBy?: UserGeneral
* updatedBy?: UserGeneral
* templatePlanName: string
* readonly createdDate?: string [format: date-time ]
* readonly updatedDate?: string [format: date-time ]
* isActive?: boolean
* jobOrder: number
* method: post, responses: 201 ,model: TemplatePlan */
static plan_template_plan_create(data:TemplatePlan){return j2t.o('post','/trip/plan/template-plan/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this template plan.]
* method: get, responses: 200 */
static plan_template_plan_read(extra:any){return j2t.o('get','/trip/plan/template-plan/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this template plan.]
* method: put, responses: 200 */
static plan_template_plan_update(extra:any){return j2t.o('put','/trip/plan/template-plan/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this template plan.]
* method: patch, responses: 200 */
static plan_template_plan_partial_update(extra:any){return j2t.o('patch','/trip/plan/template-plan/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this template plan.]
* method: delete, responses: 204 */
static plan_template_plan_delete(extra:any){return j2t.o('delete','/trip/plan/template-plan/{id}/',null,extra)}

/**
* @extra
* template_plan?: string 
* trip_name?: string 
* search?: string [A search term.]
* page?: integer [A page number within the paginated result set.]
* method: get, responses: 200 */
static plan_list(extra:any){return j2t.o('get','/trip/plan/trip/',null,extra)}

/**
* @data
* readonly id?: number
* readonly journeyPlans?: Array<TripPlanJourneyPlan>
* readonly tripActual?: string
* readonly container?: string
* tripName: string
* isDone?: boolean
* templatePlan?: number
* containerTrip: number
* vehicle?: string
* method: post, responses: 201 ,model: TripPlan */
static plan_create(data:TripPlan){return j2t.o('post','/trip/plan/trip/',data)}

/**
* @data
* readonly id?: number
* readonly journeyPlans?: Array<TripPlanJourneyPlan>
* readonly tripActual?: string
* readonly container?: string
* tripName: string
* isDone?: boolean
* templatePlan?: number
* containerTrip: number
* vehicle?: string
* method: post, responses: 201 ,model: TripPlan */
static plan_check_in(data:TripPlan){return j2t.o('post','/trip/plan/trip/check-in/',data)}

/**
* @data
* readonly id?: number
* readonly journeyPlans?: Array<TripPlanJourneyPlan>
* readonly tripActual?: string
* readonly container?: string
* tripName: string
* isDone?: boolean
* templatePlan?: number
* containerTrip: number
* vehicle?: string
* method: post, responses: 201 ,model: TripPlan */
static plan_start_trip(data:TripPlan){return j2t.o('post','/trip/plan/trip/start-trip/',data)}

/**
* @extra
* id: integer [A unique integer value identifying this trip plan.]
* method: get, responses: 200 */
static plan_read(extra:any){return j2t.o('get','/trip/plan/trip/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trip plan.]
* method: put, responses: 200 */
static plan_update(extra:any){return j2t.o('put','/trip/plan/trip/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trip plan.]
* method: patch, responses: 200 */
static plan_partial_update(extra:any){return j2t.o('patch','/trip/plan/trip/{id}/',null,extra)}

/**
* @extra
* id: integer [A unique integer value identifying this trip plan.]
* method: delete, responses: 204 */
static plan_delete(extra:any){return j2t.o('delete','/trip/plan/trip/{id}/',null,extra)}
}

                